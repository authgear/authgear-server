name: Signup blocked by authentication.post_identified
authgear.yaml:
  override: |
    hook:
      blocking_handlers:
      - event: authentication.post_identified
        url: authgeardeno:///deno/notallowed.ts
extra_files_directory: ./var
steps:
  - action: "create"
    input: |
      {
        "type": "signup",
        "name": "default"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "identify",
              "data": {
                  "type": "identification_data",
                  "options": "[[array]]"
              }
          }
        }

  - action: input
    input: |
      {
        "identification": "username",
        "login_id": "e2e_login"
      }
    output:
      error: |
        {
          "name": "Forbidden",
          "reason": "WebHookDisallowed",
          "code": 403,
          "info": {
            "event_type": "authentication.post_identified",
            "reasons": [
              {
                "reason": "",
                "title": ""
              }
            ]
          }
        }
---
name: MFA required by authentication.post_identified in signup
extra_files_directory: ./var
authgear.yaml:
  override: |
    hook:
      blocking_handlers:
      - event: authentication.post_identified
        url: authgeardeno:///deno/constraintsmfa.ts
    authentication_flow:
      signup_flows:
        - name: default
          steps:
          - name: signup_identify
            type: identify
            one_of:
            - identification: username
              steps:
              - name: authenticate_primary
                type: create_authenticator
                one_of:
                - authentication: primary_password
              - name: authenticate_mfa
                type: create_authenticator
                show_until_amr_constraints_fulfilled: true
                one_of:
                - authentication: secondary_totp
steps:
  - action: "create"
    input: |
      {
        "type": "signup",
        "name": "default"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "identify",
              "data": {
                  "type": "identification_data",
                  "options": "[[array]]"
              }
          }
        }

  - action: input
    input: |
      {
        "identification": "username",
        "login_id": "e2e_login"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "create_authenticator",
              "data": {
                  "type": "create_authenticator_data",
                  "options": "[[array]]"
              }
          }
        }

  - action: input
    input: |
      {
        "authentication": "primary_password",
        "new_password": "e2e_password"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "create_authenticator",
              "data": {
                  "type": "create_authenticator_data",
                  "options": "[[array]]"
              }
          }
        }

  - action: input
    input: |
      {
        "authentication": "secondary_totp"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "create_authenticator",
              "authentication": "secondary_totp",
              "data": {
                  "type": "create_totp_data",
                  "secret": "[[string]]",
                  "otpauth_uri": "[[string]]"
              }
          }
        }

  - action: generate_totp_code
    totp_secret: "{{ .prev.result.action.data.secret }}"
    output:
      result: |
        {
          "totp_code": "[[string]]"
        }

  - action: input
    input: |
      {
        "code": "{{ .prev.result.totp_code }}"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "finished"
          }
        }
---
name: MFA not required by authentication.post_identified in signup
extra_files_directory: ./var
authgear.yaml:
  override: |
    hook:
      blocking_handlers:
      - event: authentication.post_identified
        url: authgeardeno:///deno/allowed.ts
    authentication_flow:
      signup_flows:
        - name: default
          steps:
          - name: signup_identify
            type: identify
            one_of:
            - identification: username
              steps:
              - name: authenticate_primary
                type: create_authenticator
                one_of:
                - authentication: primary_password
              - name: authenticate_mfa
                type: create_authenticator
                show_until_amr_constraints_fulfilled: true
                one_of:
                - authentication: secondary_totp
steps:
  - action: "create"
    input: |
      {
        "type": "signup",
        "name": "default"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "identify",
              "data": {
                  "type": "identification_data",
                  "options": "[[array]]"
              }
          }
        }

  - action: input
    input: |
      {
        "identification": "username",
        "login_id": "e2e_login"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "create_authenticator",
              "data": {
                  "type": "create_authenticator_data",
                  "options": "[[array]]"
              }
          }
        }

  - action: input
    input: |
      {
        "authentication": "primary_password",
        "new_password": "e2e_password"
      }
    output:
      result: |
        {
          "state_token": "[[string]]",
          "type": "signup",
          "name": "default",
          "action": {
              "type": "finished"
          }
        }
