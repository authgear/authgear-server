// Code generated by MockGen. DO NOT EDIT.
// Source: state_provider.go

// Package webapp is a generated GoMock package.
package webapp

import (
	flows "github.com/authgear/authgear-server/pkg/auth/dependency/interaction/flows"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockStateStore is a mock of StateStore interface
type MockStateStore struct {
	ctrl     *gomock.Controller
	recorder *MockStateStoreMockRecorder
}

// MockStateStoreMockRecorder is the mock recorder for MockStateStore
type MockStateStoreMockRecorder struct {
	mock *MockStateStore
}

// NewMockStateStore creates a new mock instance
func NewMockStateStore(ctrl *gomock.Controller) *MockStateStore {
	mock := &MockStateStore{ctrl: ctrl}
	mock.recorder = &MockStateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateStore) EXPECT() *MockStateStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStateStore) Get(id string) (*State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStateStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStateStore)(nil).Get), id)
}

// Set mocks base method
func (m *MockStateStore) Set(state *State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockStateStoreMockRecorder) Set(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStateStore)(nil).Set), state)
}

// Delete mocks base method
func (m *MockStateStore) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStateStoreMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStateStore)(nil).Delete), id)
}

// MockStateProvider is a mock of StateProvider interface
type MockStateProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStateProviderMockRecorder
}

// MockStateProviderMockRecorder is the mock recorder for MockStateProvider
type MockStateProviderMockRecorder struct {
	mock *MockStateProvider
}

// NewMockStateProvider creates a new mock instance
func NewMockStateProvider(ctrl *gomock.Controller) *MockStateProvider {
	mock := &MockStateProvider{ctrl: ctrl}
	mock.recorder = &MockStateProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateProvider) EXPECT() *MockStateProviderMockRecorder {
	return m.recorder
}

// CreateState mocks base method
func (m *MockStateProvider) CreateState(r *http.Request, result *flows.WebAppResult, inputError error) *State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateState", r, result, inputError)
	ret0, _ := ret[0].(*State)
	return ret0
}

// CreateState indicates an expected call of CreateState
func (mr *MockStateProviderMockRecorder) CreateState(r, result, inputError interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateState", reflect.TypeOf((*MockStateProvider)(nil).CreateState), r, result, inputError)
}

// UpdateState mocks base method
func (m *MockStateProvider) UpdateState(s *State, r *flows.WebAppResult, inputError error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateState", s, r, inputError)
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockStateProviderMockRecorder) UpdateState(s, r, inputError interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockStateProvider)(nil).UpdateState), s, r, inputError)
}

// RestoreState mocks base method
func (m *MockStateProvider) RestoreState(r *http.Request, optional bool) (*State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreState", r, optional)
	ret0, _ := ret[0].(*State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreState indicates an expected call of RestoreState
func (mr *MockStateProviderMockRecorder) RestoreState(r, optional interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreState", reflect.TypeOf((*MockStateProvider)(nil).RestoreState), r, optional)
}

// DeleteState mocks base method
func (m *MockStateProvider) DeleteState(s *State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteState", s)
}

// DeleteState indicates an expected call of DeleteState
func (mr *MockStateProviderMockRecorder) DeleteState(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockStateProvider)(nil).DeleteState), s)
}
