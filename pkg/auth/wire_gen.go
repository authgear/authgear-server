// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package auth

import (
	"context"
	"github.com/authgear/authgear-server/pkg/auth/handler/oauth"
	webapp2 "github.com/authgear/authgear-server/pkg/auth/handler/webapp"
	"github.com/authgear/authgear-server/pkg/auth/handler/webapp/viewmodels"
	"github.com/authgear/authgear-server/pkg/auth/webapp"
	"github.com/authgear/authgear-server/pkg/lib/analytic"
	"github.com/authgear/authgear-server/pkg/lib/audit"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticationinfo"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticator/oob"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticator/password"
	service2 "github.com/authgear/authgear-server/pkg/lib/authn/authenticator/service"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticator/totp"
	"github.com/authgear/authgear-server/pkg/lib/authn/challenge"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/anonymous"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/biometric"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/loginid"
	oauth3 "github.com/authgear/authgear-server/pkg/lib/authn/identity/oauth"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/service"
	"github.com/authgear/authgear-server/pkg/lib/authn/mfa"
	"github.com/authgear/authgear-server/pkg/lib/authn/otp"
	"github.com/authgear/authgear-server/pkg/lib/authn/sso"
	"github.com/authgear/authgear-server/pkg/lib/authn/stdattrs"
	"github.com/authgear/authgear-server/pkg/lib/authn/user"
	"github.com/authgear/authgear-server/pkg/lib/config"
	"github.com/authgear/authgear-server/pkg/lib/deps"
	"github.com/authgear/authgear-server/pkg/lib/elasticsearch"
	"github.com/authgear/authgear-server/pkg/lib/event"
	"github.com/authgear/authgear-server/pkg/lib/facade"
	"github.com/authgear/authgear-server/pkg/lib/feature/forgotpassword"
	"github.com/authgear/authgear-server/pkg/lib/feature/verification"
	"github.com/authgear/authgear-server/pkg/lib/feature/welcomemessage"
	"github.com/authgear/authgear-server/pkg/lib/healthz"
	"github.com/authgear/authgear-server/pkg/lib/hook"
	"github.com/authgear/authgear-server/pkg/lib/infra/db/appdb"
	"github.com/authgear/authgear-server/pkg/lib/infra/db/auditdb"
	"github.com/authgear/authgear-server/pkg/lib/infra/db/globaldb"
	"github.com/authgear/authgear-server/pkg/lib/infra/middleware"
	"github.com/authgear/authgear-server/pkg/lib/interaction"
	"github.com/authgear/authgear-server/pkg/lib/nonce"
	oauth2 "github.com/authgear/authgear-server/pkg/lib/oauth"
	"github.com/authgear/authgear-server/pkg/lib/oauth/handler"
	"github.com/authgear/authgear-server/pkg/lib/oauth/oidc"
	handler2 "github.com/authgear/authgear-server/pkg/lib/oauth/oidc/handler"
	"github.com/authgear/authgear-server/pkg/lib/oauth/pq"
	"github.com/authgear/authgear-server/pkg/lib/oauth/redis"
	"github.com/authgear/authgear-server/pkg/lib/ratelimit"
	"github.com/authgear/authgear-server/pkg/lib/session"
	"github.com/authgear/authgear-server/pkg/lib/session/access"
	"github.com/authgear/authgear-server/pkg/lib/session/idpsession"
	"github.com/authgear/authgear-server/pkg/lib/translation"
	"github.com/authgear/authgear-server/pkg/lib/web"
	"github.com/authgear/authgear-server/pkg/util/clock"
	"github.com/authgear/authgear-server/pkg/util/httproute"
	"github.com/authgear/authgear-server/pkg/util/httputil"
	"github.com/authgear/authgear-server/pkg/util/rand"
	"github.com/authgear/authgear-server/pkg/util/template"
	"net/http"
)

// Injectors from wire_handler.go:

func newHealthzHandler(p *deps.RootProvider, w http.ResponseWriter, r *http.Request, ctx context.Context) http.Handler {
	pool := p.DatabasePool
	environmentConfig := p.EnvironmentConfig
	databaseEnvironmentConfig := &environmentConfig.Database
	factory := p.LoggerFactory
	handle := globaldb.NewHandle(ctx, pool, databaseEnvironmentConfig, factory)
	sqlExecutor := globaldb.NewSQLExecutor(ctx, handle)
	handlerLogger := healthz.NewHandlerLogger(factory)
	handler := &healthz.Handler{
		Context:        ctx,
		GlobalDatabase: handle,
		GlobalExecutor: sqlExecutor,
		Logger:         handlerLogger,
	}
	return handler
}

func newOAuthAuthorizeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	authorizeHandlerLogger := oauth.NewAuthorizeHandlerLogger(factory)
	handle := appProvider.AppDatabase
	request := p.Request
	contextContext := deps.ProvideRequestContext(request)
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	httpConfig := appConfig.HTTP
	authorizationHandlerLogger := handler.NewAuthorizationHandlerLogger(factory)
	appredisHandle := appProvider.Redis
	clock := _wireSystemClockValue
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	storeRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	sessionConfig := appConfig.Session
	rand := _wireRandValue
	provider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        storeRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clock,
		Random:       rand,
	}
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	logger := redis.NewLogger(factory)
	store := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clock,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	urlProvider := &oauth2.URLProvider{
		Endpoints: endpointsProvider,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	interactionLogger := interaction.NewLogger(factory)
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               loginidProvider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oobStoreRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: oobStoreRedis,
		Clock:     clock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     storeRedis,
		Clock:     clock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	sessionManager := &oauth2.SessionManager{
		Store:  store,
		Clock:  clock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	webappURLProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  webappURLProvider,
		Clock:                        clock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clock,
		URLs:           webappURLProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       webappURLProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  provider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  interactionLogger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	authenticateURLProvider := &webapp.AuthenticateURLProvider{
		Endpoints: endpointsProvider,
		Pages:     webappService2,
		Clock:     clock,
	}
	scopesValidator := _wireScopesValidatorValue
	tokenGenerator := _wireTokenGeneratorValue
	loginHintHandler := &webapp.LoginHintHandler{
		Config:           oAuthConfig,
		Anonymous:        anonymousProvider,
		OfflineGrants:    store,
		AppSessionTokens: store,
		AppSessions:      store,
		Clock:            clock,
		Cookies:          cookieManager,
		Pages:            webappService2,
	}
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clock,
	}
	authorizationHandler := &handler.AuthorizationHandler{
		Context:                   contextContext,
		AppID:                     appID,
		Config:                    oAuthConfig,
		HTTPConfig:                httpConfig,
		Logger:                    authorizationHandlerLogger,
		Sessions:                  provider,
		Authorizations:            authorizationStore,
		OfflineGrants:             store,
		CodeGrants:                store,
		OAuthURLs:                 urlProvider,
		WebAppURLs:                authenticateURLProvider,
		ValidateScopes:            scopesValidator,
		CodeGenerator:             tokenGenerator,
		LoginHint:                 loginHintHandler,
		IDTokens:                  idTokenIssuer,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Clock:                     clock,
		Cookies:                   cookieManager,
	}
	authorizeHandler := &oauth.AuthorizeHandler{
		Logger:       authorizeHandlerLogger,
		Database:     handle,
		AuthzHandler: authorizationHandler,
	}
	return authorizeHandler
}

var (
	_wireSystemClockValue     = clock.NewSystemClock()
	_wireRandValue            = idpsession.Rand(rand.SecureRand)
	_wireScopesValidatorValue = handler.ScopesValidator(oidc.ValidateScopes)
	_wireTokenGeneratorValue  = handler.TokenGenerator(oauth2.GenerateToken)
)

func newOAuthFromWebAppHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	fromWebAppHandlerLogger := oauth.NewFromWebAppHandlerLogger(factory)
	handle := appProvider.AppDatabase
	request := p.Request
	contextContext := deps.ProvideRequestContext(request)
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	httpConfig := appConfig.HTTP
	authorizationHandlerLogger := handler.NewAuthorizationHandlerLogger(factory)
	appredisHandle := appProvider.Redis
	clockClock := _wireSystemClockValue
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	storeRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	provider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        storeRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	logger := redis.NewLogger(factory)
	store := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	urlProvider := &oauth2.URLProvider{
		Endpoints: endpointsProvider,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	interactionLogger := interaction.NewLogger(factory)
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               loginidProvider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oobStoreRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: oobStoreRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     storeRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	sessionManager := &oauth2.SessionManager{
		Store:  store,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	webappURLProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  webappURLProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           webappURLProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       webappURLProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  provider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  interactionLogger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	authenticateURLProvider := &webapp.AuthenticateURLProvider{
		Endpoints: endpointsProvider,
		Pages:     webappService2,
		Clock:     clockClock,
	}
	scopesValidator := _wireScopesValidatorValue
	tokenGenerator := _wireTokenGeneratorValue
	loginHintHandler := &webapp.LoginHintHandler{
		Config:           oAuthConfig,
		Anonymous:        anonymousProvider,
		OfflineGrants:    store,
		AppSessionTokens: store,
		AppSessions:      store,
		Clock:            clockClock,
		Cookies:          cookieManager,
		Pages:            webappService2,
	}
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clockClock,
	}
	authorizationHandler := &handler.AuthorizationHandler{
		Context:                   contextContext,
		AppID:                     appID,
		Config:                    oAuthConfig,
		HTTPConfig:                httpConfig,
		Logger:                    authorizationHandlerLogger,
		Sessions:                  provider,
		Authorizations:            authorizationStore,
		OfflineGrants:             store,
		CodeGrants:                store,
		OAuthURLs:                 urlProvider,
		WebAppURLs:                authenticateURLProvider,
		ValidateScopes:            scopesValidator,
		CodeGenerator:             tokenGenerator,
		LoginHint:                 loginHintHandler,
		IDTokens:                  idTokenIssuer,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Clock:                     clockClock,
		Cookies:                   cookieManager,
	}
	fromWebAppHandler := &oauth.FromWebAppHandler{
		Logger:   fromWebAppHandlerLogger,
		Database: handle,
		Handler:  authorizationHandler,
	}
	return fromWebAppHandler
}

func newOAuthTokenHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	tokenHandlerLogger := oauth.NewTokenHandlerLogger(factory)
	handle := appProvider.AppDatabase
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	handlerTokenHandlerLogger := handler.NewTokenHandlerLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	appredisHandle := appProvider.Redis
	logger := redis.NewLogger(factory)
	clockClock := _wireSystemClockValue
	store := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	interactionLogger := interaction.NewLogger(factory)
	featureConfig := config.FeatureConfig
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	sessionManager := &oauth2.SessionManager{
		Store:  store,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef,
		MFADeviceTokenCookie:      mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  interactionLogger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clockClock,
	}
	accessTokenEncoding := &oauth2.AccessTokenEncoding{
		Secrets:    oAuthKeyMaterials,
		Clock:      clockClock,
		UserClaims: idTokenIssuer,
		BaseURL:    endpointsProvider,
	}
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := &handler.TokenHandler{
		Request:           request,
		AppID:             appID,
		Config:            oAuthConfig,
		TrustProxy:        trustProxy,
		Logger:            handlerTokenHandlerLogger,
		Authorizations:    authorizationStore,
		CodeGrants:        store,
		OfflineGrants:     store,
		AccessGrants:      store,
		AppSessionTokens:  store,
		AccessEvents:      eventProvider,
		Graphs:            interactionService,
		IDTokenIssuer:     idTokenIssuer,
		AccessTokenIssuer: accessTokenEncoding,
		GenerateToken:     tokenGenerator,
		Clock:             clockClock,
		Users:             queries,
	}
	oauthTokenHandler := &oauth.TokenHandler{
		Logger:       tokenHandlerLogger,
		Database:     handle,
		TokenHandler: tokenHandler,
	}
	return oauthTokenHandler
}

func newOAuthRevokeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	revokeHandlerLogger := oauth.NewRevokeHandlerLogger(factory)
	handle := appProvider.AppDatabase
	config := appProvider.Config
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	request := p.Request
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	store := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	rawQueries := &user.RawQueries{
		Store: store,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	featureConfig := config.FeatureConfig
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	appredisHandle := appProvider.Redis
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  store,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          store,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	manager2 := &session.Manager{
		Users:               queries,
		IDPSessions:         idpsessionManager,
		AccessTokenSessions: sessionManager,
		Events:              eventService,
	}
	revokeHandler := &handler.RevokeHandler{
		SessionManager: manager2,
		OfflineGrants:  redisStore,
		AccessGrants:   redisStore,
	}
	oauthRevokeHandler := &oauth.RevokeHandler{
		Logger:        revokeHandlerLogger,
		Database:      handle,
		RevokeHandler: revokeHandler,
	}
	return oauthRevokeHandler
}

func newOAuthMetadataHandler(p *deps.RequestProvider) http.Handler {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	metadataProvider := &oauth2.MetadataProvider{
		Endpoints: endpointsProvider,
	}
	oidcMetadataProvider := &oidc.MetadataProvider{
		Endpoints: endpointsProvider,
	}
	v := ProvideOAuthMetadataProviders(metadataProvider, oidcMetadataProvider)
	metadataHandler := &oauth.MetadataHandler{
		Providers: v,
	}
	return metadataHandler
}

func newOAuthJWKSHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	jwksHandlerLogger := oauth.NewJWKSHandlerLogger(factory)
	config := appProvider.Config
	secretConfig := config.SecretConfig
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	contextContext := deps.ProvideRequestContext(request)
	handle := appProvider.AppDatabase
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	store := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	rawQueries := &user.RawQueries{
		Store: store,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	featureConfig := config.FeatureConfig
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	appredisHandle := appProvider.Redis
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  store,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          store,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clockClock,
	}
	jwksHandler := &oauth.JWKSHandler{
		Logger: jwksHandlerLogger,
		JWKS:   idTokenIssuer,
	}
	return jwksHandler
}

func newOAuthUserInfoHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	userInfoHandlerLogger := oauth.NewUserInfoHandlerLogger(factory)
	handle := appProvider.AppDatabase
	config := appProvider.Config
	secretConfig := config.SecretConfig
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	store := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	rawQueries := &user.RawQueries{
		Store: store,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	featureConfig := config.FeatureConfig
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	appredisHandle := appProvider.Redis
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  store,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          store,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clockClock,
	}
	userInfoHandler := &oauth.UserInfoHandler{
		Logger:           userInfoHandlerLogger,
		Database:         handle,
		UserInfoProvider: idTokenIssuer,
	}
	return userInfoHandler
}

func newOAuthEndSessionHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	endSessionHandlerLogger := oauth.NewEndSessionHandlerLogger(factory)
	handle := appProvider.AppDatabase
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	store := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	rawQueries := &user.RawQueries{
		Store: store,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	featureConfig := config.FeatureConfig
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	appredisHandle := appProvider.Redis
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  store,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          store,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	manager2 := &session.Manager{
		Users:               queries,
		IDPSessions:         idpsessionManager,
		AccessTokenSessions: sessionManager,
		Events:              eventService,
	}
	endSessionHandler := &handler2.EndSessionHandler{
		Config:           oAuthConfig,
		Endpoints:        endpointsProvider,
		URLs:             urlProvider,
		SessionManager:   manager2,
		SessionCookieDef: cookieDef,
		Cookies:          cookieManager,
	}
	oauthEndSessionHandler := &oauth.EndSessionHandler{
		Logger:            endSessionHandlerLogger,
		Database:          handle,
		EndSessionHandler: endSessionHandler,
	}
	return oauthEndSessionHandler
}

func newOAuthChallengeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	clockClock := _wireSystemClockValue
	provider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	factory := appProvider.LoggerFactory
	jsonResponseWriterLogger := httputil.NewJSONResponseWriterLogger(factory)
	jsonResponseWriter := &httputil.JSONResponseWriter{
		Logger: jsonResponseWriterLogger,
	}
	challengeHandler := &oauth.ChallengeHandler{
		Database:   handle,
		Challenges: provider,
		JSON:       jsonResponseWriter,
	}
	return challengeHandler
}

func newOAuthAppSessionTokenHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.AppDatabase
	factory := appProvider.LoggerFactory
	jsonResponseWriterLogger := httputil.NewJSONResponseWriterLogger(factory)
	jsonResponseWriter := &httputil.JSONResponseWriter{
		Logger: jsonResponseWriterLogger,
	}
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	tokenHandlerLogger := handler.NewTokenHandlerLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	appredisHandle := appProvider.Redis
	logger := redis.NewLogger(factory)
	clockClock := _wireSystemClockValue
	store := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	interactionLogger := interaction.NewLogger(factory)
	featureConfig := config.FeatureConfig
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	sessionManager := &oauth2.SessionManager{
		Store:  store,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef,
		MFADeviceTokenCookie:      mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  interactionLogger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clockClock,
	}
	accessTokenEncoding := &oauth2.AccessTokenEncoding{
		Secrets:    oAuthKeyMaterials,
		Clock:      clockClock,
		UserClaims: idTokenIssuer,
		BaseURL:    endpointsProvider,
	}
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := &handler.TokenHandler{
		Request:           request,
		AppID:             appID,
		Config:            oAuthConfig,
		TrustProxy:        trustProxy,
		Logger:            tokenHandlerLogger,
		Authorizations:    authorizationStore,
		CodeGrants:        store,
		OfflineGrants:     store,
		AccessGrants:      store,
		AppSessionTokens:  store,
		AccessEvents:      eventProvider,
		Graphs:            interactionService,
		IDTokenIssuer:     idTokenIssuer,
		AccessTokenIssuer: accessTokenEncoding,
		GenerateToken:     tokenGenerator,
		Clock:             clockClock,
		Users:             queries,
	}
	appSessionTokenHandler := &oauth.AppSessionTokenHandler{
		Database:         handle,
		JSON:             jsonResponseWriter,
		AppSessionTokens: tokenHandler,
	}
	return appSessionTokenHandler
}

func newWebAppOAuthEntrypointHandler(p *deps.RequestProvider) http.Handler {
	oAuthEntrypointHandler := &webapp2.OAuthEntrypointHandler{}
	return oAuthEntrypointHandler
}

func newWebAppRootHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	authenticationConfig := appConfig.Authentication
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	rootHandler := &webapp2.RootHandler{
		AuthenticationConfig: authenticationConfig,
		Cookies:              cookieManager,
		SignedUpCookie:       signedUpCookieDef,
	}
	return rootHandler
}

func newWebAppLoginHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	analyticredisHandle := appProvider.AnalyticRedis
	analyticStoreRedisLogger := analytic.NewStoreRedisLogger(factory)
	writeStoreRedis := &analytic.WriteStoreRedis{
		Context: contextContext,
		Redis:   analyticredisHandle,
		AppID:   appID,
		Clock:   clockClock,
		Logger:  analyticStoreRedisLogger,
	}
	analyticService := &analytic.Service{
		Counter: writeStoreRedis,
	}
	loginHandler := &webapp2.LoginHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		FormPrefiller:     formPrefiller,
		Renderer:          responseRenderer,
		AnalyticService:   analyticService,
	}
	return loginHandler
}

func newWebAppSignupHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	analyticredisHandle := appProvider.AnalyticRedis
	analyticStoreRedisLogger := analytic.NewStoreRedisLogger(factory)
	writeStoreRedis := &analytic.WriteStoreRedis{
		Context: contextContext,
		Redis:   analyticredisHandle,
		AppID:   appID,
		Clock:   clockClock,
		Logger:  analyticStoreRedisLogger,
	}
	analyticService := &analytic.Service{
		Counter: writeStoreRedis,
	}
	signupHandler := &webapp2.SignupHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		FormPrefiller:     formPrefiller,
		Renderer:          responseRenderer,
		AnalyticService:   analyticService,
	}
	return signupHandler
}

func newWebAppPromoteHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	promoteHandler := &webapp2.PromoteHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		FormPrefiller:     formPrefiller,
		Renderer:          responseRenderer,
	}
	return promoteHandler
}

func newWebAppSelectAccountHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	selectAccountHandler := &webapp2.SelectAccountHandler{
		ControllerFactory:         controllerFactory,
		BaseViewModel:             baseViewModeler,
		Renderer:                  responseRenderer,
		AuthenticationConfig:      authenticationConfig,
		SignedUpCookie:            signedUpCookieDef,
		Users:                     queries,
		Identities:                serviceService,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Cookies:                   cookieManager,
	}
	return selectAccountHandler
}

func newWebAppSSOCallbackHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	ssoCallbackHandler := &webapp2.SSOCallbackHandler{
		ControllerFactory: controllerFactory,
	}
	return ssoCallbackHandler
}

func newWechatAuthHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	wechatAuthHandler := &webapp2.WechatAuthHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		IdentityConfig:    identityConfig,
	}
	return wechatAuthHandler
}

func newWechatCallbackHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	jsonResponseWriterLogger := httputil.NewJSONResponseWriterLogger(factory)
	jsonResponseWriter := &httputil.JSONResponseWriter{
		Logger: jsonResponseWriterLogger,
	}
	wechatCallbackHandler := &webapp2.WechatCallbackHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		JSON:              jsonResponseWriter,
	}
	return wechatCallbackHandler
}

func newWebAppEnterLoginIDHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	enterLoginIDHandler := &webapp2.EnterLoginIDHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Identities:        serviceService,
	}
	return enterLoginIDHandler
}

func newWebAppEnterPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	enterPasswordHandler := &webapp2.EnterPasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return enterPasswordHandler
}

func newWebAppCreatePasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	createPasswordHandler := &webapp2.CreatePasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		PasswordPolicy:    passwordChecker,
	}
	return createPasswordHandler
}

func newWebAppSetupTOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	setupTOTPHandler := &webapp2.SetupTOTPHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Clock:             clockClock,
		Endpoints:         endpointsProvider,
	}
	return setupTOTPHandler
}

func newWebAppEnterTOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	enterTOTPHandler := &webapp2.EnterTOTPHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return enterTOTPHandler
}

func newWebAppSetupOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	setupOOBOTPHandler := &webapp2.SetupOOBOTPHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return setupOOBOTPHandler
}

func newWebAppEnterOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	enterOOBOTPHandler := &webapp2.EnterOOBOTPHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		RateLimiter:       limiter,
		FlashMessage:      flashMessage,
	}
	return enterOOBOTPHandler
}

func newWebAppEnterRecoveryCodeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	enterRecoveryCodeHandler := &webapp2.EnterRecoveryCodeHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return enterRecoveryCodeHandler
}

func newWebAppSetupRecoveryCodeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	setupRecoveryCodeHandler := &webapp2.SetupRecoveryCodeHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return setupRecoveryCodeHandler
}

func newWebAppVerifyIdentityHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	verifyIdentityHandler := &webapp2.VerifyIdentityHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Verifications:     verificationService,
		RateLimiter:       limiter,
		FlashMessage:      flashMessage,
	}
	return verifyIdentityHandler
}

func newWebAppVerifyIdentitySuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	verifyIdentitySuccessHandler := &webapp2.VerifyIdentitySuccessHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return verifyIdentitySuccessHandler
}

func newWebAppForgotPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	forgotPasswordHandler := &webapp2.ForgotPasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		FormPrefiller:     formPrefiller,
		Renderer:          responseRenderer,
	}
	return forgotPasswordHandler
}

func newWebAppForgotPasswordSuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	forgotPasswordSuccessHandler := &webapp2.ForgotPasswordSuccessHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return forgotPasswordSuccessHandler
}

func newWebAppResetPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	resetPasswordHandler := &webapp2.ResetPasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		PasswordPolicy:    passwordChecker,
	}
	return resetPasswordHandler
}

func newWebAppResetPasswordSuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	resetPasswordSuccessHandler := &webapp2.ResetPasswordSuccessHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return resetPasswordSuccessHandler
}

func newWebAppSettingsHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	biometricConfig := identityConfig.Biometric
	settingsViewModeler := &viewmodels.SettingsViewModeler{
		Users:          queries,
		Authenticators: service3,
		Identities:     serviceService,
		MFA:            mfaService,
		Authentication: authenticationConfig,
		Biometric:      biometricConfig,
	}
	settingsHandler := &webapp2.SettingsHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		SettingsViewModel: settingsViewModeler,
		Renderer:          responseRenderer,
		Identities:        serviceService,
		Verification:      verificationService,
	}
	return settingsHandler
}

func newWebAppSettingsIdentityHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsIdentityHandler := &webapp2.SettingsIdentityHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Identities:        serviceService,
		Verification:      verificationService,
	}
	return settingsIdentityHandler
}

func newWebAppSettingsBiometricHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsBiometricHandler := &webapp2.SettingsBiometricHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Identities:        serviceService,
	}
	return settingsBiometricHandler
}

func newWebAppSettingsMFAHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	biometricConfig := identityConfig.Biometric
	settingsViewModeler := &viewmodels.SettingsViewModeler{
		Users:          queries,
		Authenticators: service3,
		Identities:     serviceService,
		MFA:            mfaService,
		Authentication: authenticationConfig,
		Biometric:      biometricConfig,
	}
	settingsMFAHandler := &webapp2.SettingsMFAHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		SettingsViewModel: settingsViewModeler,
		Renderer:          responseRenderer,
		MFA:               mfaService,
	}
	return settingsMFAHandler
}

func newWebAppSettingsTOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsTOTPHandler := &webapp2.SettingsTOTPHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Authenticators:    service3,
	}
	return settingsTOTPHandler
}

func newWebAppSettingsOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsOOBOTPHandler := &webapp2.SettingsOOBOTPHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Authenticators:    service3,
	}
	return settingsOOBOTPHandler
}

func newWebAppSettingsRecoveryCodeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsRecoveryCodeHandler := &webapp2.SettingsRecoveryCodeHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Authentication:    authenticationConfig,
		MFA:               mfaService,
	}
	return settingsRecoveryCodeHandler
}

func newWebAppSettingsSessionsHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	manager2 := &session.Manager{
		Users:               queries,
		IDPSessions:         idpsessionManager,
		AccessTokenSessions: sessionManager,
		Events:              eventService,
	}
	settingsSessionsHandler := &webapp2.SettingsSessionsHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		Sessions:          manager2,
	}
	return settingsSessionsHandler
}

func newWebAppForceChangePasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	forceChangePasswordHandler := &webapp2.ForceChangePasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		PasswordPolicy:    passwordChecker,
	}
	return forceChangePasswordHandler
}

func newWebAppSettingsChangePasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsChangePasswordHandler := &webapp2.SettingsChangePasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		PasswordPolicy:    passwordChecker,
	}
	return settingsChangePasswordHandler
}

func newWebAppForceChangeSecondaryPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	forceChangeSecondaryPasswordHandler := &webapp2.ForceChangeSecondaryPasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		PasswordPolicy:    passwordChecker,
	}
	return forceChangeSecondaryPasswordHandler
}

func newWebAppSettingsChangeSecondaryPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	settingsChangeSecondaryPasswordHandler := &webapp2.SettingsChangeSecondaryPasswordHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
		PasswordPolicy:    passwordChecker,
	}
	return settingsChangeSecondaryPasswordHandler
}

func newWebAppUserDisabledHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	userDisabledHandler := &webapp2.UserDisabledHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return userDisabledHandler
}

func newWebAppLogoutHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	manager2 := &session.Manager{
		Users:               queries,
		IDPSessions:         idpsessionManager,
		AccessTokenSessions: sessionManager,
		Events:              eventService,
	}
	logoutHandler := &webapp2.LogoutHandler{
		ControllerFactory: controllerFactory,
		Database:          handle,
		TrustProxy:        trustProxy,
		OAuth:             oAuthConfig,
		UIConfig:          uiConfig,
		SessionManager:    manager2,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return logoutHandler
}

func newWebAppStaticAssetsHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	manager := appProvider.Resources
	staticAssetsHandler := &webapp2.StaticAssetsHandler{
		Resources: manager,
	}
	return staticAssetsHandler
}

func newWebAppReturnHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	returnHandler := &webapp2.ReturnHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return returnHandler
}

func newWebAppErrorHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	handle := appProvider.AppDatabase
	appredisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	signedUpCookieDef := webapp.NewSignedUpCookieDef()
	authenticationConfig := appConfig.Authentication
	cookieDef := mfa.NewDeviceTokenCookieDef(authenticationConfig)
	errorCookieDef := webapp.NewErrorCookieDef()
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	logger := interaction.NewLogger(factory)
	contextContext := deps.ProvideRequestContext(request)
	sqlExecutor := appdb.NewSQLExecutor(contextContext, handle)
	clockClock := _wireSystemClockValue
	featureConfig := config.FeatureConfig
	identityConfig := appConfig.Identity
	identityFeatureConfig := featureConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 store,
		LoginID:               provider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedis := &oob.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: storeRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: appredisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, handle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  appredisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieDef2 := session.NewSessionCookieDef(sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:     idpsessionStoreRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef2,
	}
	redisLogger := redis.NewLogger(factory)
	redisStore := &redis.Store{
		Context:     contextContext,
		Redis:       appredisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthConfig := appConfig.OAuth
	sessionManager := &oauth2.SessionManager{
		Store:  redisStore,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
		Events:      eventService,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	wechatURLProvider := &webapp.WechatURLProvider{
		Endpoints: endpointsProvider,
	}
	normalizer := &stdattrs.Normalizer{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                    endpointsProvider,
		IdentityConfig:               identityConfig,
		Credentials:                  oAuthClientCredentials,
		RedirectURL:                  urlProvider,
		Clock:                        clockClock,
		WechatURLProvider:            wechatURLProvider,
		StandardAttributesNormalizer: normalizer,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Context: contextContext,
		AppID:   appID,
		Redis:   appredisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Request:        request,
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		TrustProxy:     trustProxy,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
		FeatureConfig:  featureConfig,
		Events:         eventService,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	responseWriter := p.ResponseWriter
	nonceService := &nonce.Service{
		Cookies:        cookieManager,
		Request:        request,
		ResponseWriter: responseWriter,
	}
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	elasticsearchService := &elasticsearch.Service{
		AppID:     appID,
		Client:    client,
		Users:     userStore,
		OAuth:     oauthStore,
		LoginID:   loginidStore,
		TaskQueue: queue,
	}
	challengeProvider := &challenge.Provider{
		Redis: appredisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	authenticationinfoStoreRedis := &authenticationinfo.StoreRedis{
		Context: contextContext,
		Redis:   appredisHandle,
		AppID:   appID,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        appredisHandle,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionContext := &interaction.Context{
		Request:                   request,
		Database:                  sqlExecutor,
		Clock:                     clockClock,
		Config:                    appConfig,
		FeatureConfig:             featureConfig,
		TrustProxy:                trustProxy,
		Identities:                identityFacade,
		Authenticators:            authenticatorFacade,
		AnonymousIdentities:       anonymousProvider,
		BiometricIdentities:       biometricProvider,
		OOBAuthenticators:         oobProvider,
		OOBCodeSender:             codeSender,
		OAuthProviderFactory:      oAuthProviderFactory,
		MFA:                       mfaService,
		ForgotPassword:            forgotpasswordProvider,
		ResetPassword:             forgotpasswordProvider,
		LoginIDNormalizerFactory:  normalizerFactory,
		Verification:              verificationService,
		VerificationCodeSender:    verificationCodeSender,
		RateLimiter:               limiter,
		Nonces:                    nonceService,
		Search:                    elasticsearchService,
		Challenges:                challengeProvider,
		Users:                     userProvider,
		Events:                    eventService,
		CookieManager:             cookieManager,
		AuthenticationInfoService: authenticationinfoStoreRedis,
		Sessions:                  idpsessionProvider,
		SessionManager:            idpsessionManager,
		SessionCookie:             cookieDef2,
		MFADeviceTokenCookie:      cookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: appredisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappService2 := &webapp.Service2{
		Logger:               serviceLogger,
		Request:              request,
		Sessions:             sessionStoreRedis,
		SessionCookie:        sessionCookieDef,
		SignedUpCookie:       signedUpCookieDef,
		MFADeviceTokenCookie: cookieDef,
		ErrorCookie:          errorCookie,
		Cookies:              cookieManager,
		Graph:                interactionService,
	}
	uiConfig := appConfig.UI
	uiFeatureConfig := featureConfig.UI
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	publisher := webapp2.NewPublisher(appID, appredisHandle)
	controllerDeps := webapp2.ControllerDeps{
		Database:      handle,
		RedisHandle:   appredisHandle,
		AppID:         appID,
		Page:          webappService2,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		Publisher:     publisher,
		Clock:         clockClock,
		UIConfig:      uiConfig,
		TrustProxy:    trustProxy,
	}
	controllerFactory := webapp2.ControllerFactory{
		LoggerFactory:  factory,
		ControllerDeps: controllerDeps,
	}
	errorHandler := &webapp2.ErrorHandler{
		ControllerFactory: controllerFactory,
		BaseViewModel:     baseViewModeler,
		Renderer:          responseRenderer,
	}
	return errorHandler
}

func newWebAppWebsocketHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	factory := appProvider.LoggerFactory
	handle := appProvider.Redis
	publisher := webapp2.NewPublisher(appID, handle)
	websocketHandler := &webapp2.WebsocketHandler{
		AppID:         appID,
		LoggerFactory: factory,
		RedisHandle:   handle,
		Publisher:     publisher,
	}
	return websocketHandler
}

// Injectors from wire_middleware.go:

func newPanicMiddleware(p *deps.RootProvider) httproute.Middleware {
	factory := p.LoggerFactory
	panicMiddlewareLogger := middleware.NewPanicMiddlewareLogger(factory)
	panicMiddleware := &middleware.PanicMiddleware{
		Logger: panicMiddlewareLogger,
	}
	return panicMiddleware
}

func newSentryMiddleware(p *deps.RootProvider) httproute.Middleware {
	hub := p.SentryHub
	environmentConfig := p.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	sentryMiddleware := &middleware.SentryMiddleware{
		SentryHub:  hub,
		TrustProxy: trustProxy,
	}
	return sentryMiddleware
}

func newBodyLimitMiddleware(p *deps.RootProvider) httproute.Middleware {
	bodyLimitMiddleware := &middleware.BodyLimitMiddleware{}
	return bodyLimitMiddleware
}

func newPanicWebAppMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	panicMiddlewareLogger := webapp2.NewPanicMiddlewareLogger(factory)
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	uiConfig := appConfig.UI
	featureConfig := config.FeatureConfig
	uiFeatureConfig := featureConfig.UI
	request := p.Request
	contextContext := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	errorCookieDef := webapp.NewErrorCookieDef()
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	errorCookie := &webapp.ErrorCookie{
		Cookie:  errorCookieDef,
		Cookies: cookieManager,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	resolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	clockClock := _wireSystemClockValue
	flashMessage := &httputil.FlashMessage{
		Cookies: cookieManager,
	}
	baseViewModeler := &viewmodels.BaseViewModeler{
		TrustProxy:            trustProxy,
		OAuth:                 oAuthConfig,
		AuthUI:                uiConfig,
		AuthUIFeatureConfig:   uiFeatureConfig,
		StaticAssets:          staticAssetResolver,
		ForgotPassword:        forgotPasswordConfig,
		Authentication:        authenticationConfig,
		ErrorCookie:           errorCookie,
		Translations:          translationService,
		Clock:                 clockClock,
		FlashMessage:          flashMessage,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	panicMiddleware := &webapp2.PanicMiddleware{
		Logger:        panicMiddlewareLogger,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
	}
	return panicMiddleware
}

func newPublicOriginMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	factory := appProvider.LoggerFactory
	publicOriginMiddlewareLogger := webapp.NewPublicOriginMiddlewareLogger(factory)
	publicOriginMiddleware := &webapp.PublicOriginMiddleware{
		Config:     httpConfig,
		TrustProxy: trustProxy,
		Logger:     publicOriginMiddlewareLogger,
	}
	return publicOriginMiddleware
}

func newCORSMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	factory := appProvider.LoggerFactory
	corsMiddlewareLogger := middleware.NewCORSMiddlewareLogger(factory)
	corsMiddleware := &middleware.CORSMiddleware{
		Config: httpConfig,
		Logger: corsMiddlewareLogger,
	}
	return corsMiddleware
}

func newSecHeadersMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	secHeadersMiddleware := provideSecHeadersMiddleware(httpConfig)
	return secHeadersMiddleware
}

func newCSRFMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	secretConfig := config.SecretConfig
	csrfKeyMaterials := deps.ProvideCSRFKeyMaterials(secretConfig)
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	csrfMiddleware := &webapp.CSRFMiddleware{
		Secret:     csrfKeyMaterials,
		CookieDef:  csrfCookieDef,
		TrustProxy: trustProxy,
	}
	return csrfMiddleware
}

func newAuthEntryPointMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	authEntryPointMiddleware := &webapp.AuthEntryPointMiddleware{
		TrustProxy: trustProxy,
	}
	return authEntryPointMiddleware
}

func newSessionMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	sessionConfig := appConfig.Session
	cookieDef := session.NewSessionCookieDef(sessionConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	contextContext := deps.ProvideRequestContext(request)
	appID := appConfig.ID
	handle := appProvider.Redis
	clockClock := _wireSystemClockValue
	factory := appProvider.LoggerFactory
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	storeRedis := &idpsession.StoreRedis{
		Redis:  handle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: handle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	provider := &idpsession.Provider{
		Context:      contextContext,
		Request:      request,
		AppID:        appID,
		Redis:        handle,
		Store:        storeRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	resolver := &idpsession.Resolver{
		Cookies:    cookieManager,
		CookieDef:  cookieDef,
		Provider:   provider,
		TrustProxy: trustProxy,
		Clock:      clockClock,
	}
	oAuthConfig := appConfig.OAuth
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilderApp := appdb.NewSQLBuilderApp(databaseCredentials, appID)
	appdbHandle := appProvider.AppDatabase
	sqlExecutor := appdb.NewSQLExecutor(contextContext, appdbHandle)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	logger := redis.NewLogger(factory)
	store := &redis.Store{
		Context:     contextContext,
		Redis:       handle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oAuthKeyMaterials := deps.ProvideOAuthKeyMaterials(secretConfig)
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	rawQueries := &user.RawQueries{
		Store: userStore,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	featureConfig := config.FeatureConfig
	identityFeatureConfig := featureConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	biometricStore := &biometric.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	biometricProvider := &biometric.Provider{
		Store: biometricStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication:        authenticationConfig,
		Identity:              identityConfig,
		IdentityFeatureConfig: identityFeatureConfig,
		Store:                 serviceStore,
		LoginID:               loginidProvider,
		OAuth:                 oauthProvider,
		Anonymous:             anonymousProvider,
		Biometric:             biometricProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	oobStoreRedis := &oob.StoreRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	oobLogger := oob.NewLogger(factory)
	oobProvider := &oob.Provider{
		Config:    authenticatorOOBConfig,
		Store:     oobStore,
		CodeStore: oobStoreRedis,
		Clock:     clockClock,
		Logger:    oobLogger,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: handle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Request:     request,
		Logger:      verificationLogger,
		Config:      verificationConfig,
		TrustProxy:  trustProxy,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilderApp,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	defaultLanguageTag := deps.ProvideDefaultLanguageTag(config)
	supportedLanguageTags := deps.ProvideSupportedLanguageTags(config)
	templateResolver := &template.Resolver{
		Resources:             manager,
		DefaultLanguageTag:    defaultLanguageTag,
		SupportedLanguageTags: supportedLanguageTags,
	}
	engine := &template.Engine{
		Resolver: templateResolver,
	}
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            contextContext,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:        contextContext,
		TemplateEngine: engine,
		StaticAssets:   staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	eventLogger := event.NewLogger(factory)
	sqlBuilder := appdb.NewSQLBuilder(databaseCredentials)
	storeImpl := &event.StoreImpl{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookLogger := hook.NewLogger(factory)
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	sink := &hook.Sink{
		Logger:    hookLogger,
		Deliverer: deliverer,
	}
	auditLogger := audit.NewLogger(factory)
	writeHandle := appProvider.AuditWriteDatabase
	auditDatabaseCredentials := deps.ProvideAuditDatabaseCredentials(secretConfig)
	auditdbSQLBuilderApp := auditdb.NewSQLBuilderApp(auditDatabaseCredentials, appID)
	writeSQLExecutor := auditdb.NewWriteSQLExecutor(contextContext, writeHandle)
	writeStore := &audit.WriteStore{
		SQLBuilder:  auditdbSQLBuilderApp,
		SQLExecutor: writeSQLExecutor,
	}
	auditSink := &audit.Sink{
		Logger:   auditLogger,
		Database: writeHandle,
		Store:    writeStore,
	}
	eventService := event.NewService(contextContext, request, trustProxy, eventLogger, appdbHandle, clockClock, localizationConfig, storeImpl, sink, auditSink)
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
		Events:               eventService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	userProfileConfig := appConfig.UserProfile
	commands := &user.Commands{
		RawCommands:       rawCommands,
		RawQueries:        rawQueries,
		Events:            eventService,
		Verification:      verificationService,
		UserProfileConfig: userProfileConfig,
	}
	idpsessionManager := &idpsession.Manager{
		Store:     storeRedis,
		Clock:     clockClock,
		Config:    sessionConfig,
		Cookies:   cookieManager,
		CookieDef: cookieDef,
	}
	sessionManager := &oauth2.SessionManager{
		Store:  store,
		Clock:  clockClock,
		Config: oAuthConfig,
	}
	coordinator := &facade.Coordinator{
		Identities:      serviceService,
		Authenticators:  service3,
		Verification:    verificationService,
		MFA:             mfaService,
		UserCommands:    commands,
		UserQueries:     rawQueries,
		PasswordHistory: historyStore,
		OAuth:           authorizationStore,
		IDPSessions:     idpsessionManager,
		OAuthSessions:   sessionManager,
		IdentityConfig:  identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		RawQueries:     rawQueries,
		Store:          userStore,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		Verification:   verificationService,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets: oAuthKeyMaterials,
		BaseURL: endpointsProvider,
		Users:   queries,
		Clock:   clockClock,
	}
	accessTokenEncoding := &oauth2.AccessTokenEncoding{
		Secrets:    oAuthKeyMaterials,
		Clock:      clockClock,
		UserClaims: idTokenIssuer,
		BaseURL:    endpointsProvider,
	}
	oauthResolver := &oauth2.Resolver{
		OAuthConfig:        oAuthConfig,
		TrustProxy:         trustProxy,
		Authorizations:     authorizationStore,
		AccessGrants:       store,
		OfflineGrants:      store,
		AppSessions:        store,
		AccessTokenDecoder: accessTokenEncoding,
		Sessions:           provider,
		Cookies:            cookieManager,
		Clock:              clockClock,
	}
	middlewareLogger := session.NewMiddlewareLogger(factory)
	analyticredisHandle := appProvider.AnalyticRedis
	analyticStoreRedisLogger := analytic.NewStoreRedisLogger(factory)
	writeStoreRedis := &analytic.WriteStoreRedis{
		Context: contextContext,
		Redis:   analyticredisHandle,
		AppID:   appID,
		Clock:   clockClock,
		Logger:  analyticStoreRedisLogger,
	}
	analyticService := &analytic.Service{
		Counter: writeStoreRedis,
	}
	sessionMiddleware := &session.Middleware{
		SessionCookie:              cookieDef,
		Cookies:                    cookieManager,
		IDPSessionResolver:         resolver,
		AccessTokenSessionResolver: oauthResolver,
		AccessEvents:               eventProvider,
		Users:                      queries,
		Database:                   appdbHandle,
		Logger:                     middlewareLogger,
		AnalyticService:            analyticService,
	}
	return sessionMiddleware
}

func newWebAppSessionMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	handle := appProvider.Redis
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: handle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	sessionMiddleware := &webapp.SessionMiddleware{
		States:    sessionStoreRedis,
		CookieDef: sessionCookieDef,
		Cookies:   cookieManager,
	}
	return sessionMiddleware
}

func newWebAppUILocalesMiddleware(p *deps.RequestProvider) httproute.Middleware {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	uiLocalesMiddleware := &webapp.UILocalesMiddleware{
		Cookies: cookieManager,
	}
	return uiLocalesMiddleware
}

func newWebAppClientIDMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	handle := appProvider.Redis
	sessionStoreRedis := &webapp.SessionStoreRedis{
		AppID: appID,
		Redis: handle,
	}
	sessionCookieDef := webapp.NewSessionCookieDef()
	clientIDCookieDef := webapp.NewClientIDCookieDef()
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	clientIDMiddleware := &webapp.ClientIDMiddleware{
		States:            sessionStoreRedis,
		SessionCookieDef:  sessionCookieDef,
		ClientIDCookieDef: clientIDCookieDef,
		Cookies:           cookieManager,
	}
	return clientIDMiddleware
}

func newWebAppWeChatRedirectURIMiddleware(p *deps.RequestProvider) httproute.Middleware {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	weChatRedirectURIMiddleware := &webapp.WeChatRedirectURIMiddleware{
		Cookies: cookieManager,
	}
	return weChatRedirectURIMiddleware
}

func newWebAppVisitorIDMiddleware(p *deps.RequestProvider) httproute.Middleware {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	cookieManager := deps.NewCookieManager(request, trustProxy, httpConfig)
	visitorIDMiddleware := &webapp.VisitorIDMiddleware{
		Cookies: cookieManager,
	}
	return visitorIDMiddleware
}

// wire_middleware.go:

func provideSecHeadersMiddleware(http2 *config.HTTPConfig) *web.SecHeadersMiddleware {
	return &web.SecHeadersMiddleware{CSPDirectives: http2.CSPDirectives}
}
