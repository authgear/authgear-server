package webapp

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"

	"github.com/authgear/authgear-server/pkg/auth/handler/webapp/viewmodels"
	"github.com/authgear/authgear-server/pkg/auth/webapp"
	authflow "github.com/authgear/authgear-server/pkg/lib/authenticationflow"
	"github.com/authgear/authgear-server/pkg/lib/authn/sso"
	"github.com/authgear/authgear-server/pkg/lib/meter"
	"github.com/authgear/authgear-server/pkg/util/httproute"
	"github.com/authgear/authgear-server/pkg/util/httputil"
)

func ConfigureAuthflowLoginRoute(route httproute.Route) httproute.Route {
	return route.
		WithMethods("OPTIONS", "POST", "GET").
		WithPathPattern(webapp.AuthflowRouteLogin)
}

type AuthflowLoginEndpointsProvider interface {
	SSOCallbackURL(alias string) *url.URL
}

type AuthflowLoginHandler struct {
	Controller              *AuthflowController
	BaseViewModel           *viewmodels.BaseViewModeler
	AuthenticationViewModel *viewmodels.AuthenticationViewModeler
	FormPrefiller           *FormPrefiller
	Renderer                Renderer
	MeterService            MeterService
	TutorialCookie          TutorialCookie
	ErrorCookie             ErrorCookie
	Endpoints               AuthflowLoginEndpointsProvider
}

func (h *AuthflowLoginHandler) GetData(w http.ResponseWriter, r *http.Request, screen *webapp.AuthflowScreenWithFlowResponse, allowLoginOnly bool) (map[string]interface{}, error) {
	data := make(map[string]interface{})
	baseViewModel := h.BaseViewModel.ViewModel(r, w)
	if h.TutorialCookie.Pop(r, w, httputil.SignupLoginTutorialCookieName) {
		baseViewModel.SetTutorial(httputil.SignupLoginTutorialCookieName)
	}
	viewmodels.Embed(data, baseViewModel)
	authenticationViewModel := h.AuthenticationViewModel.NewWithAuthflow(screen.StateTokenFlowResponse, r.Form)
	viewmodels.Embed(data, authenticationViewModel)
	viewmodels.Embed(data, NewLoginViewModel(allowLoginOnly, r))
	return data, nil
}

func (h *AuthflowLoginHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	h.FormPrefiller.Prefill(r.Form)

	opts := webapp.SessionOptions{
		RedirectURI: h.Controller.RedirectURI(r),
	}
	s, err := h.Controller.GetOrCreateWebSession(w, r, opts)
	if err != nil {
		// FIXME(authflow): log the error.
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}

	flowName := "default"
	screen, err := h.Controller.GetScreen(s, GetXStepFromQuery(r))
	if err != nil {
		if errors.Is(err, authflow.ErrFlowNotFound) {
			result, err := h.Controller.CreateScreen(r, s, authflow.FlowReference{
				Type: authflow.FlowTypeLogin,
				Name: flowName,
			})
			if err != nil {
				// FIXME(authflow): log the error.
				http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
				return
			}

			result.WriteResponse(w, r)
			return
		}

		// FIXME(authflow): log the error.
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}

	var handlers AuthflowControllerHandlers
	defer h.Controller.MakeHTTPHandler(&handlers).ServeHTTP(w, r)

	oauthProviderAlias := s.OAuthProviderAlias
	allowLoginOnly := s.UserIDHint != ""

	oauthPostAction := func(providerAlias string) error {
		callbackURL := h.Endpoints.SSOCallbackURL(providerAlias).String()
		input := map[string]interface{}{
			"identification": "oauth",
			"alias":          providerAlias,
			"redirect_uri":   callbackURL,
			"response_mode":  string(sso.ResponseModeFormPost),
		}

		result, err := h.Controller.ReplaceScreen(r, s, authflow.FlowReference{
			Type: authflow.FlowTypeSignupLogin,
			Name: flowName,
		}, input)
		if err != nil {
			return err
		}

		result.WriteResponse(w, r)
		return nil
	}

	handlers.Get(func() error {
		visitorID := webapp.GetVisitorID(r.Context())
		if visitorID == "" {
			// visitor id should be generated by VisitorIDMiddleware
			return fmt.Errorf("webapp: missing visitor id")
		}

		err := h.MeterService.TrackPageView(visitorID, meter.PageTypeLogin)
		if err != nil {
			return err
		}

		_, hasErr := h.ErrorCookie.GetError(r)
		// If x_oauth_provider_alias is provided via authz endpoint
		// redirect the user to the oauth provider
		// If there is error in the ErrorCookie, the user will stay in the login
		// page to see the error message and the redirection won't be performed
		if !hasErr && oauthProviderAlias != "" {
			return oauthPostAction(oauthProviderAlias)
		}

		data, err := h.GetData(w, r, screen, allowLoginOnly)
		if err != nil {
			return err
		}

		h.Renderer.RenderHTML(w, r, TemplateWebLoginHTML, data)
		return nil
	})

	handlers.PostAction("oauth", func() error {
		providerAlias := r.Form.Get("x_provider_alias")
		return oauthPostAction(providerAlias)
	})

	handlers.PostAction("login_id", func() error {
		err = LoginWithLoginIDSchema.Validator().ValidateValue(FormToJSON(r.Form))
		if err != nil {
			return err
		}

		loginID := r.Form.Get("q_login_id")
		identification := webapp.GetMostAppropriateIdentification(screen.StateTokenFlowResponse, loginID)
		input := map[string]interface{}{
			"identification": identification,
			"login_id":       loginID,
		}

		result, err := h.Controller.FeedInput(r, s, screen, input)
		if err != nil {
			return err
		}

		result.WriteResponse(w, r)
		return nil
	})

	//handlers.PostAction("passkey", func() error {
	//	result, err := ctrl.EntryPointPost(opts, intent, func() (input interface{}, err error) {
	//		err = PasskeyAutofillSchema.Validator().ValidateValue(FormToJSON(r.Form))
	//		if err != nil {
	//			return
	//		}

	//		assertionResponseStr := r.Form.Get("x_assertion_response")
	//		assertionResponse := []byte(assertionResponseStr)
	//		stage := string(authn.AuthenticationStagePrimary)

	//		input = &InputPasskeyAssertionResponse{
	//			Stage:             stage,
	//			AssertionResponse: assertionResponse,
	//		}
	//		return
	//	})
	//	if err != nil {
	//		return err
	//	}

	//	result.WriteResponse(w, r)
	//	return nil
	//})
}
