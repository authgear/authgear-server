// Code generated by MockGen. DO NOT EDIT.
// Source: authflow_controller.go

// Package webapp is a generated GoMock package.
package webapp

import (
	http "net/http"
	reflect "reflect"

	webapp "github.com/authgear/authgear-server/pkg/auth/webapp"
	authflowclient "github.com/authgear/authgear-server/pkg/lib/authflowclient"
	config "github.com/authgear/authgear-server/pkg/lib/config"
	httputil "github.com/authgear/authgear-server/pkg/util/httputil"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthflowControllerCookieManager is a mock of AuthflowControllerCookieManager interface.
type MockAuthflowControllerCookieManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthflowControllerCookieManagerMockRecorder
}

// MockAuthflowControllerCookieManagerMockRecorder is the mock recorder for MockAuthflowControllerCookieManager.
type MockAuthflowControllerCookieManagerMockRecorder struct {
	mock *MockAuthflowControllerCookieManager
}

// NewMockAuthflowControllerCookieManager creates a new mock instance.
func NewMockAuthflowControllerCookieManager(ctrl *gomock.Controller) *MockAuthflowControllerCookieManager {
	mock := &MockAuthflowControllerCookieManager{ctrl: ctrl}
	mock.recorder = &MockAuthflowControllerCookieManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthflowControllerCookieManager) EXPECT() *MockAuthflowControllerCookieManagerMockRecorder {
	return m.recorder
}

// ClearCookie mocks base method.
func (m *MockAuthflowControllerCookieManager) ClearCookie(def *httputil.CookieDef) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCookie", def)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// ClearCookie indicates an expected call of ClearCookie.
func (mr *MockAuthflowControllerCookieManagerMockRecorder) ClearCookie(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCookie", reflect.TypeOf((*MockAuthflowControllerCookieManager)(nil).ClearCookie), def)
}

// GetCookie mocks base method.
func (m *MockAuthflowControllerCookieManager) GetCookie(r *http.Request, def *httputil.CookieDef) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie", r, def)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockAuthflowControllerCookieManagerMockRecorder) GetCookie(r, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockAuthflowControllerCookieManager)(nil).GetCookie), r, def)
}

// ValueCookie mocks base method.
func (m *MockAuthflowControllerCookieManager) ValueCookie(def *httputil.CookieDef, value string) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueCookie", def, value)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// ValueCookie indicates an expected call of ValueCookie.
func (mr *MockAuthflowControllerCookieManagerMockRecorder) ValueCookie(def, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueCookie", reflect.TypeOf((*MockAuthflowControllerCookieManager)(nil).ValueCookie), def, value)
}

// MockAuthflowControllerSessionStore is a mock of AuthflowControllerSessionStore interface.
type MockAuthflowControllerSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthflowControllerSessionStoreMockRecorder
}

// MockAuthflowControllerSessionStoreMockRecorder is the mock recorder for MockAuthflowControllerSessionStore.
type MockAuthflowControllerSessionStoreMockRecorder struct {
	mock *MockAuthflowControllerSessionStore
}

// NewMockAuthflowControllerSessionStore creates a new mock instance.
func NewMockAuthflowControllerSessionStore(ctrl *gomock.Controller) *MockAuthflowControllerSessionStore {
	mock := &MockAuthflowControllerSessionStore{ctrl: ctrl}
	mock.recorder = &MockAuthflowControllerSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthflowControllerSessionStore) EXPECT() *MockAuthflowControllerSessionStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthflowControllerSessionStore) Create(session *webapp.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuthflowControllerSessionStoreMockRecorder) Create(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthflowControllerSessionStore)(nil).Create), session)
}

// Delete mocks base method.
func (m *MockAuthflowControllerSessionStore) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthflowControllerSessionStoreMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthflowControllerSessionStore)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockAuthflowControllerSessionStore) Get(id string) (*webapp.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*webapp.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuthflowControllerSessionStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthflowControllerSessionStore)(nil).Get), id)
}

// Update mocks base method.
func (m *MockAuthflowControllerSessionStore) Update(session *webapp.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAuthflowControllerSessionStoreMockRecorder) Update(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthflowControllerSessionStore)(nil).Update), session)
}

// MockAuthflowControllerOAuthClientResolver is a mock of AuthflowControllerOAuthClientResolver interface.
type MockAuthflowControllerOAuthClientResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAuthflowControllerOAuthClientResolverMockRecorder
}

// MockAuthflowControllerOAuthClientResolverMockRecorder is the mock recorder for MockAuthflowControllerOAuthClientResolver.
type MockAuthflowControllerOAuthClientResolverMockRecorder struct {
	mock *MockAuthflowControllerOAuthClientResolver
}

// NewMockAuthflowControllerOAuthClientResolver creates a new mock instance.
func NewMockAuthflowControllerOAuthClientResolver(ctrl *gomock.Controller) *MockAuthflowControllerOAuthClientResolver {
	mock := &MockAuthflowControllerOAuthClientResolver{ctrl: ctrl}
	mock.recorder = &MockAuthflowControllerOAuthClientResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthflowControllerOAuthClientResolver) EXPECT() *MockAuthflowControllerOAuthClientResolverMockRecorder {
	return m.recorder
}

// ResolveClient mocks base method.
func (m *MockAuthflowControllerOAuthClientResolver) ResolveClient(clientID string) *config.OAuthClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveClient", clientID)
	ret0, _ := ret[0].(*config.OAuthClientConfig)
	return ret0
}

// ResolveClient indicates an expected call of ResolveClient.
func (mr *MockAuthflowControllerOAuthClientResolverMockRecorder) ResolveClient(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveClient", reflect.TypeOf((*MockAuthflowControllerOAuthClientResolver)(nil).ResolveClient), clientID)
}

// MockAuthflowControllerAuthflowHTTPClient is a mock of AuthflowControllerAuthflowHTTPClient interface.
type MockAuthflowControllerAuthflowHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthflowControllerAuthflowHTTPClientMockRecorder
}

// MockAuthflowControllerAuthflowHTTPClientMockRecorder is the mock recorder for MockAuthflowControllerAuthflowHTTPClient.
type MockAuthflowControllerAuthflowHTTPClientMockRecorder struct {
	mock *MockAuthflowControllerAuthflowHTTPClient
}

// NewMockAuthflowControllerAuthflowHTTPClient creates a new mock instance.
func NewMockAuthflowControllerAuthflowHTTPClient(ctrl *gomock.Controller) *MockAuthflowControllerAuthflowHTTPClient {
	mock := &MockAuthflowControllerAuthflowHTTPClient{ctrl: ctrl}
	mock.recorder = &MockAuthflowControllerAuthflowHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthflowControllerAuthflowHTTPClient) EXPECT() *MockAuthflowControllerAuthflowHTTPClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthflowControllerAuthflowHTTPClient) Create(flowReference authflowclient.FlowReference, urlQuery string) (*authflowclient.FlowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", flowReference, urlQuery)
	ret0, _ := ret[0].(*authflowclient.FlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthflowControllerAuthflowHTTPClientMockRecorder) Create(flowReference, urlQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthflowControllerAuthflowHTTPClient)(nil).Create), flowReference, urlQuery)
}

// Get mocks base method.
func (m *MockAuthflowControllerAuthflowHTTPClient) Get(stateToken string) (*authflowclient.FlowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", stateToken)
	ret0, _ := ret[0].(*authflowclient.FlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuthflowControllerAuthflowHTTPClientMockRecorder) Get(stateToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthflowControllerAuthflowHTTPClient)(nil).Get), stateToken)
}

// Input mocks base method.
func (m *MockAuthflowControllerAuthflowHTTPClient) Input(w http.ResponseWriter, r *http.Request, stateToken string, input map[string]interface{}) (*authflowclient.FlowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", w, r, stateToken, input)
	ret0, _ := ret[0].(*authflowclient.FlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Input indicates an expected call of Input.
func (mr *MockAuthflowControllerAuthflowHTTPClientMockRecorder) Input(w, r, stateToken, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockAuthflowControllerAuthflowHTTPClient)(nil).Input), w, r, stateToken, input)
}
