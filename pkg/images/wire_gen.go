// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package images

import (
	"github.com/authgear/authgear-server/pkg/images/deps"
	"github.com/authgear/authgear-server/pkg/images/handler"
	"github.com/authgear/authgear-server/pkg/lib/cloudstorage"
	deps2 "github.com/authgear/authgear-server/pkg/lib/deps"
	"github.com/authgear/authgear-server/pkg/lib/infra/middleware"
	"github.com/authgear/authgear-server/pkg/lib/presign"
	"github.com/authgear/authgear-server/pkg/util/clock"
	"github.com/authgear/authgear-server/pkg/util/httproute"
	"github.com/authgear/authgear-server/pkg/util/httputil"
	"net/http"
)

// Injectors from wire.go:

func newPanicMiddleware(p *deps.RootProvider) httproute.Middleware {
	factory := p.LoggerFactory
	panicMiddlewareLogger := middleware.NewPanicMiddlewareLogger(factory)
	panicMiddleware := &middleware.PanicMiddleware{
		Logger: panicMiddlewareLogger,
	}
	return panicMiddleware
}

func newSentryMiddleware(p *deps.RootProvider) httproute.Middleware {
	hub := p.SentryHub
	environmentConfig := &p.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	sentryMiddleware := &middleware.SentryMiddleware{
		SentryHub:  hub,
		TrustProxy: trustProxy,
	}
	return sentryMiddleware
}

func newCORSMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	rootProvider := appProvider.RootProvider
	factory := rootProvider.LoggerFactory
	corsMiddlewareLogger := middleware.NewCORSMiddlewareLogger(factory)
	corsMiddleware := &middleware.CORSMiddleware{
		Config: httpConfig,
		Logger: corsMiddlewareLogger,
	}
	return corsMiddleware
}

func newGetHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	objectStoreConfig := rootProvider.ObjectStoreConfig
	clock := _wireSystemClockValue
	storage := deps.NewCloudStorage(objectStoreConfig, clock)
	provider := &cloudstorage.Provider{
		Storage: storage,
	}
	factory := rootProvider.LoggerFactory
	getHandlerLogger := handler.NewGetHandlerLogger(factory)
	daemon := rootProvider.VipsDaemon
	getHandler := &handler.GetHandler{
		DirectorMaker: provider,
		Logger:        getHandlerLogger,
		VipsDaemon:    daemon,
	}
	return getHandler
}

var (
	_wireSystemClockValue = clock.NewSystemClock()
)

func newPostHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	factory := rootProvider.LoggerFactory
	postHandlerLogger := handler.NewPostHandlerLogger(factory)
	jsonResponseWriterLogger := httputil.NewJSONResponseWriterLogger(factory)
	jsonResponseWriter := &httputil.JSONResponseWriter{
		Logger: jsonResponseWriterLogger,
	}
	objectStoreConfig := rootProvider.ObjectStoreConfig
	clockClock := _wireSystemClockValue
	storage := deps.NewCloudStorage(objectStoreConfig, clockClock)
	provider := cloudstorage.Provider{
		Storage: storage,
	}
	config := appProvider.Config
	secretConfig := config.SecretConfig
	imagesKeyMaterials := deps2.ProvideImagesKeyMaterials(secretConfig)
	request := p.Request
	environmentConfig := &rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	httpHost := deps2.ProvideHTTPHost(request, trustProxy)
	presignProvider := &presign.Provider{
		Secret: imagesKeyMaterials,
		Clock:  clockClock,
		Host:   httpHost,
	}
	postHandler := &handler.PostHandler{
		Logger:               postHandlerLogger,
		JSON:                 jsonResponseWriter,
		CloudStorageProvider: provider,
		PresignProvider:      presignProvider,
	}
	return postHandler
}
