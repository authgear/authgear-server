// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package images

import (
	"github.com/authgear/authgear-server/pkg/images/deps"
	"github.com/authgear/authgear-server/pkg/images/handler"
	"github.com/authgear/authgear-server/pkg/lib/infra/middleware"
	"github.com/authgear/authgear-server/pkg/util/httproute"
	"net/http"
)

// Injectors from wire.go:

func newPanicMiddleware(p *deps.RequestProvider) httproute.Middleware {
	rootProvider := p.RootProvider
	factory := rootProvider.LoggerFactory
	panicMiddlewareLogger := middleware.NewPanicMiddlewareLogger(factory)
	panicMiddleware := &middleware.PanicMiddleware{
		Logger: panicMiddlewareLogger,
	}
	return panicMiddleware
}

func newSentryMiddleware(p *deps.RequestProvider) httproute.Middleware {
	rootProvider := p.RootProvider
	hub := rootProvider.SentryHub
	environmentConfig := &rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	sentryMiddleware := &middleware.SentryMiddleware{
		SentryHub:  hub,
		TrustProxy: trustProxy,
	}
	return sentryMiddleware
}

func newGetHandler(p *deps.RequestProvider) http.Handler {
	extractKey := _wireExtractKeyValue
	rootProvider := p.RootProvider
	objectStoreConfig := rootProvider.ObjectStoreConfig
	director := deps.NewDirector(extractKey, objectStoreConfig)
	factory := rootProvider.LoggerFactory
	getHandlerLogger := handler.NewGetHandlerLogger(factory)
	daemon := rootProvider.VipsDaemon
	getHandler := &handler.GetHandler{
		Director:   director,
		Logger:     getHandlerLogger,
		VipsDaemon: daemon,
	}
	return getHandler
}

var (
	_wireExtractKeyValue = handler.ExtractKey
)

func newPostHandler(p *deps.RequestProvider) http.Handler {
	rootProvider := p.RootProvider
	factory := rootProvider.LoggerFactory
	postHandlerLogger := handler.NewPostHandlerLogger(factory)
	postHandler := &handler.PostHandler{
		Logger: postHandlerLogger,
	}
	return postHandler
}
