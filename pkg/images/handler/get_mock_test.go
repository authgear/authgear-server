// Code generated by MockGen. DO NOT EDIT.
// Source: get.go

// Package handler is a generated GoMock package.
package handler

import (
	http "net/http"
	reflect "reflect"

	vipsutil "github.com/authgear/authgear-server/pkg/util/vipsutil"
	gomock "github.com/golang/mock/gomock"
)

// MockVipsDaemon is a mock of VipsDaemon interface.
type MockVipsDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockVipsDaemonMockRecorder
}

// MockVipsDaemonMockRecorder is the mock recorder for MockVipsDaemon.
type MockVipsDaemonMockRecorder struct {
	mock *MockVipsDaemon
}

// NewMockVipsDaemon creates a new mock instance.
func NewMockVipsDaemon(ctrl *gomock.Controller) *MockVipsDaemon {
	mock := &MockVipsDaemon{ctrl: ctrl}
	mock.recorder = &MockVipsDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVipsDaemon) EXPECT() *MockVipsDaemonMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockVipsDaemon) Process(i vipsutil.Input) (*vipsutil.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", i)
	ret0, _ := ret[0].(*vipsutil.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockVipsDaemonMockRecorder) Process(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockVipsDaemon)(nil).Process), i)
}

// MockDirectorMaker is a mock of DirectorMaker interface.
type MockDirectorMaker struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorMakerMockRecorder
}

// MockDirectorMakerMockRecorder is the mock recorder for MockDirectorMaker.
type MockDirectorMakerMockRecorder struct {
	mock *MockDirectorMaker
}

// NewMockDirectorMaker creates a new mock instance.
func NewMockDirectorMaker(ctrl *gomock.Controller) *MockDirectorMaker {
	mock := &MockDirectorMaker{ctrl: ctrl}
	mock.recorder = &MockDirectorMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectorMaker) EXPECT() *MockDirectorMakerMockRecorder {
	return m.recorder
}

// MakeDirector mocks base method.
func (m *MockDirectorMaker) MakeDirector(extractKey func(*http.Request) string) func(*http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDirector", extractKey)
	ret0, _ := ret[0].(func(*http.Request))
	return ret0
}

// MakeDirector indicates an expected call of MakeDirector.
func (mr *MockDirectorMakerMockRecorder) MakeDirector(extractKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirector", reflect.TypeOf((*MockDirectorMaker)(nil).MakeDirector), extractKey)
}
