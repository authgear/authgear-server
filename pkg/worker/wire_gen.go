// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package worker

import (
	"github.com/authgear/authgear-server/pkg/lib/deps"
	"github.com/authgear/authgear-server/pkg/lib/elasticsearch"
	"github.com/authgear/authgear-server/pkg/lib/hook"
	"github.com/authgear/authgear-server/pkg/lib/infra/db/searchdb"
	"github.com/authgear/authgear-server/pkg/lib/infra/mail"
	"github.com/authgear/authgear-server/pkg/lib/infra/sms"
	"github.com/authgear/authgear-server/pkg/lib/infra/task"
	"github.com/authgear/authgear-server/pkg/lib/infra/task/executor"
	"github.com/authgear/authgear-server/pkg/lib/infra/whatsapp"
	"github.com/authgear/authgear-server/pkg/lib/search/pgsearch"
	"github.com/authgear/authgear-server/pkg/util/clock"
	"github.com/authgear/authgear-server/pkg/worker/tasks"
)

// Injectors from wire.go:

func newInProcessExecutor(p *deps.RootProvider) *executor.InProcessExecutor {
	factory := p.LoggerFactory
	inProcessExecutorLogger := executor.NewInProcessExecutorLogger(factory)
	restoreTaskContext := deps.ProvideRestoreTaskContext(p)
	inProcessExecutor := &executor.InProcessExecutor{
		Logger:         inProcessExecutorLogger,
		RestoreContext: restoreTaskContext,
	}
	return inProcessExecutor
}

func newSendMessagesTask(p *deps.TaskProvider) task.Task {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	logger := mail.NewLogger(factory)
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	devMode := environmentConfig.DevMode
	appContext := appProvider.AppContext
	config := appContext.Config
	secretConfig := config.SecretConfig
	smtpServerCredentials := deps.ProvideSMTPServerCredentials(secretConfig)
	dialer := mail.NewGomailDialer(smtpServerCredentials)
	featureConfig := config.FeatureConfig
	testModeFeatureConfig := featureConfig.TestMode
	featureTestModeEmailSuppressed := deps.ProvideTestModeEmailSuppressed(testModeFeatureConfig)
	appConfig := config.AppConfig
	testModeConfig := appConfig.TestMode
	testModeEmailConfig := testModeConfig.Email
	sender := &mail.Sender{
		Logger:                         logger,
		DevMode:                        devMode,
		GomailDialer:                   dialer,
		FeatureTestModeEmailSuppressed: featureTestModeEmailSuppressed,
		TestModeEmailConfig:            testModeEmailConfig,
	}
	smsLogger := sms.NewLogger(factory)
	messagingConfig := appConfig.Messaging
	featureTestModeSMSSuppressed := deps.ProvideTestModeSMSSuppressed(testModeFeatureConfig)
	testModeSMSConfig := testModeConfig.SMS
	twilioCredentials := deps.ProvideTwilioCredentials(secretConfig)
	twilioClient := sms.NewTwilioClient(twilioCredentials)
	nexmoCredentials := deps.ProvideNexmoCredentials(secretConfig)
	nexmoClient := sms.NewNexmoClient(nexmoCredentials)
	customSMSProviderConfig := deps.ProvideCustomSMSProviderConfig(secretConfig)
	context := p.Context
	manager := appContext.Resources
	denoHook := hook.DenoHook{
		Context:         context,
		ResourceManager: manager,
	}
	denoEndpoint := environmentConfig.DenoEndpoint
	hookLogger := hook.NewLogger(factory)
	smsHookTimeout := sms.NewSMSHookTimeout(customSMSProviderConfig)
	hookDenoClient := sms.NewHookDenoClient(denoEndpoint, hookLogger, smsHookTimeout)
	smsDenoHook := sms.SMSDenoHook{
		DenoHook: denoHook,
		Client:   hookDenoClient,
	}
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	webHookImpl := &hook.WebHookImpl{
		Secret: webhookKeyMaterials,
	}
	hookHTTPClient := sms.NewHookHTTPClient(smsHookTimeout)
	smsWebHook := sms.SMSWebHook{
		WebHook: webHookImpl,
		Client:  hookHTTPClient,
	}
	customClient := sms.NewCustomClient(customSMSProviderConfig, smsDenoHook, smsWebHook)
	client := &sms.Client{
		Logger:                       smsLogger,
		DevMode:                      devMode,
		MessagingConfig:              messagingConfig,
		FeatureTestModeSMSSuppressed: featureTestModeSMSSuppressed,
		TestModeSMSConfig:            testModeSMSConfig,
		TwilioClient:                 twilioClient,
		NexmoClient:                  nexmoClient,
		CustomClient:                 customClient,
	}
	serviceLogger := whatsapp.NewServiceLogger(factory)
	featureTestModeWhatsappSuppressed := deps.ProvideTestModeWhatsappSuppressed(testModeFeatureConfig)
	testModeWhatsappConfig := testModeConfig.Whatsapp
	whatsappConfig := messagingConfig.Whatsapp
	whatsappOnPremisesCredentials := deps.ProvideWhatsappOnPremisesCredentials(secretConfig)
	handle := appProvider.Redis
	appID := appConfig.ID
	clock := _wireSystemClockValue
	tokenStore := &whatsapp.TokenStore{
		Redis: handle,
		AppID: appID,
		Clock: clock,
	}
	onPremisesClient := whatsapp.NewWhatsappOnPremisesClient(whatsappConfig, whatsappOnPremisesCredentials, tokenStore)
	service := &whatsapp.Service{
		Context:                           context,
		Logger:                            serviceLogger,
		DevMode:                           devMode,
		FeatureTestModeWhatsappSuppressed: featureTestModeWhatsappSuppressed,
		TestModeWhatsappConfig:            testModeWhatsappConfig,
		Config:                            whatsappConfig,
		OnPremisesClient:                  onPremisesClient,
		TokenStore:                        tokenStore,
	}
	sendMessagesLogger := tasks.NewSendMessagesLogger(factory)
	sendMessagesTask := &tasks.SendMessagesTask{
		EmailSender:    sender,
		SMSClient:      client,
		WhatsappSender: service,
		Logger:         sendMessagesLogger,
	}
	return sendMessagesTask
}

var (
	_wireSystemClockValue = clock.NewSystemClock()
)

func newReindexUserTask(p *deps.TaskProvider) task.Task {
	appProvider := p.AppProvider
	appContext := appProvider.AppContext
	config := appContext.Config
	secretConfig := config.SecretConfig
	elasticsearchCredentials := deps.ProvideElasticsearchCredentials(secretConfig)
	client := elasticsearch.NewClient(elasticsearchCredentials)
	appConfig := config.AppConfig
	appID := appConfig.ID
	handle := appProvider.SearchDatabase
	searchDatabaseCredentials := deps.ProvideSearchDatabaseCredentials(secretConfig)
	sqlBuilder := searchdb.NewSQLBuilder(searchDatabaseCredentials)
	context := p.Context
	sqlExecutor := searchdb.NewSQLExecutor(context, handle)
	store := pgsearch.NewStore(appID, handle, sqlBuilder, sqlExecutor)
	factory := appProvider.LoggerFactory
	reindexUserLogger := tasks.NewReindexUserLogger(factory)
	reindexUserTask := &tasks.ReindexUserTask{
		ElasticsearchClient: client,
		PGStore:             store,
		Logger:              reindexUserLogger,
	}
	return reindexUserTask
}
