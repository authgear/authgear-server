// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package authenticationflow is a generated GoMock package.
package authenticationflow

import (
	reflect "reflect"

	authenticationinfo "github.com/authgear/authgear-server/pkg/lib/authn/authenticationinfo"
	config "github.com/authgear/authgear-server/pkg/lib/config"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateFlow mocks base method.
func (m *MockStore) CreateFlow(flow *Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlow indicates an expected call of CreateFlow.
func (mr *MockStoreMockRecorder) CreateFlow(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockStore)(nil).CreateFlow), flow)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(session *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), session)
}

// DeleteFlow mocks base method.
func (m *MockStore) DeleteFlow(flow *Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlow", flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlow indicates an expected call of DeleteFlow.
func (mr *MockStoreMockRecorder) DeleteFlow(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlow", reflect.TypeOf((*MockStore)(nil).DeleteFlow), flow)
}

// DeleteSession mocks base method.
func (m *MockStore) DeleteSession(session *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStoreMockRecorder) DeleteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStore)(nil).DeleteSession), session)
}

// GetFlowByStateToken mocks base method.
func (m *MockStore) GetFlowByStateToken(stateToken string) (*Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowByStateToken", stateToken)
	ret0, _ := ret[0].(*Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowByStateToken indicates an expected call of GetFlowByStateToken.
func (mr *MockStoreMockRecorder) GetFlowByStateToken(stateToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowByStateToken", reflect.TypeOf((*MockStore)(nil).GetFlowByStateToken), stateToken)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(flowID string) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", flowID)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), flowID)
}

// UpdateSession mocks base method.
func (m *MockStore) UpdateSession(session *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockStoreMockRecorder) UpdateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockStore)(nil).UpdateSession), session)
}

// MockServiceDatabase is a mock of ServiceDatabase interface.
type MockServiceDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDatabaseMockRecorder
}

// MockServiceDatabaseMockRecorder is the mock recorder for MockServiceDatabase.
type MockServiceDatabaseMockRecorder struct {
	mock *MockServiceDatabase
}

// NewMockServiceDatabase creates a new mock instance.
func NewMockServiceDatabase(ctrl *gomock.Controller) *MockServiceDatabase {
	mock := &MockServiceDatabase{ctrl: ctrl}
	mock.recorder = &MockServiceDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDatabase) EXPECT() *MockServiceDatabaseMockRecorder {
	return m.recorder
}

// ReadOnly mocks base method.
func (m *MockServiceDatabase) ReadOnly(do func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnly", do)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOnly indicates an expected call of ReadOnly.
func (mr *MockServiceDatabaseMockRecorder) ReadOnly(do interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnly", reflect.TypeOf((*MockServiceDatabase)(nil).ReadOnly), do)
}

// WithTx mocks base method.
func (m *MockServiceDatabase) WithTx(do func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", do)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockServiceDatabaseMockRecorder) WithTx(do interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockServiceDatabase)(nil).WithTx), do)
}

// MockServiceUIInfoResolver is a mock of ServiceUIInfoResolver interface.
type MockServiceUIInfoResolver struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUIInfoResolverMockRecorder
}

// MockServiceUIInfoResolverMockRecorder is the mock recorder for MockServiceUIInfoResolver.
type MockServiceUIInfoResolverMockRecorder struct {
	mock *MockServiceUIInfoResolver
}

// NewMockServiceUIInfoResolver creates a new mock instance.
func NewMockServiceUIInfoResolver(ctrl *gomock.Controller) *MockServiceUIInfoResolver {
	mock := &MockServiceUIInfoResolver{ctrl: ctrl}
	mock.recorder = &MockServiceUIInfoResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUIInfoResolver) EXPECT() *MockServiceUIInfoResolverMockRecorder {
	return m.recorder
}

// SetAuthenticationInfoInQuery mocks base method.
func (m *MockServiceUIInfoResolver) SetAuthenticationInfoInQuery(redirectURI string, e *authenticationinfo.Entry) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthenticationInfoInQuery", redirectURI, e)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetAuthenticationInfoInQuery indicates an expected call of SetAuthenticationInfoInQuery.
func (mr *MockServiceUIInfoResolverMockRecorder) SetAuthenticationInfoInQuery(redirectURI, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthenticationInfoInQuery", reflect.TypeOf((*MockServiceUIInfoResolver)(nil).SetAuthenticationInfoInQuery), redirectURI, e)
}

// MockOAuthClientResolver is a mock of OAuthClientResolver interface.
type MockOAuthClientResolver struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthClientResolverMockRecorder
}

// MockOAuthClientResolverMockRecorder is the mock recorder for MockOAuthClientResolver.
type MockOAuthClientResolverMockRecorder struct {
	mock *MockOAuthClientResolver
}

// NewMockOAuthClientResolver creates a new mock instance.
func NewMockOAuthClientResolver(ctrl *gomock.Controller) *MockOAuthClientResolver {
	mock := &MockOAuthClientResolver{ctrl: ctrl}
	mock.recorder = &MockOAuthClientResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthClientResolver) EXPECT() *MockOAuthClientResolverMockRecorder {
	return m.recorder
}

// ResolveClient mocks base method.
func (m *MockOAuthClientResolver) ResolveClient(clientID string) *config.OAuthClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveClient", clientID)
	ret0, _ := ret[0].(*config.OAuthClientConfig)
	return ret0
}

// ResolveClient indicates an expected call of ResolveClient.
func (mr *MockOAuthClientResolverMockRecorder) ResolveClient(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveClient", reflect.TypeOf((*MockOAuthClientResolver)(nil).ResolveClient), clientID)
}
