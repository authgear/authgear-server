// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package authenticationflow is a generated GoMock package.
package authenticationflow

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	oauthrelyingparty "github.com/authgear/oauthrelyingparty/pkg/api/oauthrelyingparty"
	gomock "github.com/golang/mock/gomock"
	jwt "github.com/lestrrat-go/jwx/v2/jwt"

	event "github.com/authgear/authgear-server/pkg/api/event"
	model "github.com/authgear/authgear-server/pkg/api/model"
	accountmigration "github.com/authgear/authgear-server/pkg/lib/accountmigration"
	attrs "github.com/authgear/authgear-server/pkg/lib/authn/attrs"
	authenticationinfo "github.com/authgear/authgear-server/pkg/lib/authn/authenticationinfo"
	authenticator "github.com/authgear/authgear-server/pkg/lib/authn/authenticator"
	service "github.com/authgear/authgear-server/pkg/lib/authn/authenticator/service"
	challenge "github.com/authgear/authgear-server/pkg/lib/authn/challenge"
	identity "github.com/authgear/authgear-server/pkg/lib/authn/identity"
	anonymous "github.com/authgear/authgear-server/pkg/lib/authn/identity/anonymous"
	mfa "github.com/authgear/authgear-server/pkg/lib/authn/mfa"
	otp "github.com/authgear/authgear-server/pkg/lib/authn/otp"
	user "github.com/authgear/authgear-server/pkg/lib/authn/user"
	config "github.com/authgear/authgear-server/pkg/lib/config"
	facade "github.com/authgear/authgear-server/pkg/lib/facade"
	forgotpassword "github.com/authgear/authgear-server/pkg/lib/feature/forgotpassword"
	verification "github.com/authgear/authgear-server/pkg/lib/feature/verification"
	ldap "github.com/authgear/authgear-server/pkg/lib/ldap"
	oauth "github.com/authgear/authgear-server/pkg/lib/oauth"
	ratelimit "github.com/authgear/authgear-server/pkg/lib/ratelimit"
	session "github.com/authgear/authgear-server/pkg/lib/session"
	idpsession "github.com/authgear/authgear-server/pkg/lib/session/idpsession"
	accesscontrol "github.com/authgear/authgear-server/pkg/util/accesscontrol"
	httputil "github.com/authgear/authgear-server/pkg/util/httputil"
)

// MockIdentityService is a mock of IdentityService interface.
type MockIdentityService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServiceMockRecorder
}

// MockIdentityServiceMockRecorder is the mock recorder for MockIdentityService.
type MockIdentityServiceMockRecorder struct {
	mock *MockIdentityService
}

// NewMockIdentityService creates a new mock instance.
func NewMockIdentityService(ctrl *gomock.Controller) *MockIdentityService {
	mock := &MockIdentityService{ctrl: ctrl}
	mock.recorder = &MockIdentityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityService) EXPECT() *MockIdentityServiceMockRecorder {
	return m.recorder
}

// CheckDuplicatedByUniqueKey mocks base method.
func (m *MockIdentityService) CheckDuplicatedByUniqueKey(ctx context.Context, info *identity.Info) (*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicatedByUniqueKey", ctx, info)
	ret0, _ := ret[0].(*identity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicatedByUniqueKey indicates an expected call of CheckDuplicatedByUniqueKey.
func (mr *MockIdentityServiceMockRecorder) CheckDuplicatedByUniqueKey(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicatedByUniqueKey", reflect.TypeOf((*MockIdentityService)(nil).CheckDuplicatedByUniqueKey), ctx, info)
}

// Create mocks base method.
func (m *MockIdentityService) Create(ctx context.Context, is *identity.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, is)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIdentityServiceMockRecorder) Create(ctx, is interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIdentityService)(nil).Create), ctx, is)
}

// Delete mocks base method.
func (m *MockIdentityService) Delete(ctx context.Context, is *identity.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, is)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIdentityServiceMockRecorder) Delete(ctx, is interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIdentityService)(nil).Delete), ctx, is)
}

// Get mocks base method.
func (m *MockIdentityService) Get(ctx context.Context, id string) (*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*identity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIdentityServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIdentityService)(nil).Get), ctx, id)
}

// ListByClaim mocks base method.
func (m *MockIdentityService) ListByClaim(ctx context.Context, name, value string) ([]*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByClaim", ctx, name, value)
	ret0, _ := ret[0].([]*identity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByClaim indicates an expected call of ListByClaim.
func (mr *MockIdentityServiceMockRecorder) ListByClaim(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByClaim", reflect.TypeOf((*MockIdentityService)(nil).ListByClaim), ctx, name, value)
}

// ListByUser mocks base method.
func (m *MockIdentityService) ListByUser(ctx context.Context, userID string) ([]*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", ctx, userID)
	ret0, _ := ret[0].([]*identity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockIdentityServiceMockRecorder) ListByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockIdentityService)(nil).ListByUser), ctx, userID)
}

// New mocks base method.
func (m *MockIdentityService) New(ctx context.Context, userID string, spec *identity.Spec, options identity.NewIdentityOptions) (*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, userID, spec, options)
	ret0, _ := ret[0].(*identity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockIdentityServiceMockRecorder) New(ctx, userID, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockIdentityService)(nil).New), ctx, userID, spec, options)
}

// SearchBySpec mocks base method.
func (m *MockIdentityService) SearchBySpec(ctx context.Context, spec *identity.Spec) (*identity.Info, []*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBySpec", ctx, spec)
	ret0, _ := ret[0].(*identity.Info)
	ret1, _ := ret[1].([]*identity.Info)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchBySpec indicates an expected call of SearchBySpec.
func (mr *MockIdentityServiceMockRecorder) SearchBySpec(ctx, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBySpec", reflect.TypeOf((*MockIdentityService)(nil).SearchBySpec), ctx, spec)
}

// Update mocks base method.
func (m *MockIdentityService) Update(ctx context.Context, oldIs, newIs *identity.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, oldIs, newIs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIdentityServiceMockRecorder) Update(ctx, oldIs, newIs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIdentityService)(nil).Update), ctx, oldIs, newIs)
}

// UpdateWithSpec mocks base method.
func (m *MockIdentityService) UpdateWithSpec(ctx context.Context, is *identity.Info, spec *identity.Spec, options identity.NewIdentityOptions) (*identity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithSpec", ctx, is, spec, options)
	ret0, _ := ret[0].(*identity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithSpec indicates an expected call of UpdateWithSpec.
func (mr *MockIdentityServiceMockRecorder) UpdateWithSpec(ctx, is, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithSpec", reflect.TypeOf((*MockIdentityService)(nil).UpdateWithSpec), ctx, is, spec, options)
}

// MockAuthenticatorService is a mock of AuthenticatorService interface.
type MockAuthenticatorService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorServiceMockRecorder
}

// MockAuthenticatorServiceMockRecorder is the mock recorder for MockAuthenticatorService.
type MockAuthenticatorServiceMockRecorder struct {
	mock *MockAuthenticatorService
}

// NewMockAuthenticatorService creates a new mock instance.
func NewMockAuthenticatorService(ctrl *gomock.Controller) *MockAuthenticatorService {
	mock := &MockAuthenticatorService{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatorService) EXPECT() *MockAuthenticatorServiceMockRecorder {
	return m.recorder
}

// ClearLockoutAttempts mocks base method.
func (m *MockAuthenticatorService) ClearLockoutAttempts(ctx context.Context, userID string, usedMethods []config.AuthenticationLockoutMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLockoutAttempts", ctx, userID, usedMethods)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLockoutAttempts indicates an expected call of ClearLockoutAttempts.
func (mr *MockAuthenticatorServiceMockRecorder) ClearLockoutAttempts(ctx, userID, usedMethods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLockoutAttempts", reflect.TypeOf((*MockAuthenticatorService)(nil).ClearLockoutAttempts), ctx, userID, usedMethods)
}

// Create mocks base method.
func (m *MockAuthenticatorService) Create(ctx context.Context, authenticatorInfo *authenticator.Info, markVerified bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, authenticatorInfo, markVerified)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuthenticatorServiceMockRecorder) Create(ctx, authenticatorInfo, markVerified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthenticatorService)(nil).Create), ctx, authenticatorInfo, markVerified)
}

// Get mocks base method.
func (m *MockAuthenticatorService) Get(ctx context.Context, authenticatorID string) (*authenticator.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, authenticatorID)
	ret0, _ := ret[0].(*authenticator.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuthenticatorServiceMockRecorder) Get(ctx, authenticatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthenticatorService)(nil).Get), ctx, authenticatorID)
}

// List mocks base method.
func (m *MockAuthenticatorService) List(ctx context.Context, userID string, filters ...authenticator.Filter) ([]*authenticator.Info, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userID}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*authenticator.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuthenticatorServiceMockRecorder) List(ctx, userID interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userID}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuthenticatorService)(nil).List), varargs...)
}

// NewWithAuthenticatorID mocks base method.
func (m *MockAuthenticatorService) NewWithAuthenticatorID(ctx context.Context, authenticatorID string, spec *authenticator.Spec) (*authenticator.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWithAuthenticatorID", ctx, authenticatorID, spec)
	ret0, _ := ret[0].(*authenticator.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWithAuthenticatorID indicates an expected call of NewWithAuthenticatorID.
func (mr *MockAuthenticatorServiceMockRecorder) NewWithAuthenticatorID(ctx, authenticatorID, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithAuthenticatorID", reflect.TypeOf((*MockAuthenticatorService)(nil).NewWithAuthenticatorID), ctx, authenticatorID, spec)
}

// Update mocks base method.
func (m *MockAuthenticatorService) Update(ctx context.Context, authenticatorInfo *authenticator.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, authenticatorInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAuthenticatorServiceMockRecorder) Update(ctx, authenticatorInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthenticatorService)(nil).Update), ctx, authenticatorInfo)
}

// UpdatePassword mocks base method.
func (m *MockAuthenticatorService) UpdatePassword(ctx context.Context, ainfo *authenticator.Info, options *service.UpdatePasswordOptions) (bool, *authenticator.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, ainfo, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*authenticator.Info)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockAuthenticatorServiceMockRecorder) UpdatePassword(ctx, ainfo, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockAuthenticatorService)(nil).UpdatePassword), ctx, ainfo, options)
}

// VerifyOneWithSpec mocks base method.
func (m *MockAuthenticatorService) VerifyOneWithSpec(ctx context.Context, userID string, authenticatorType model.AuthenticatorType, infos []*authenticator.Info, spec *authenticator.Spec, options *facade.VerifyOptions) (*authenticator.Info, *service.VerifyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOneWithSpec", ctx, userID, authenticatorType, infos, spec, options)
	ret0, _ := ret[0].(*authenticator.Info)
	ret1, _ := ret[1].(*service.VerifyResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyOneWithSpec indicates an expected call of VerifyOneWithSpec.
func (mr *MockAuthenticatorServiceMockRecorder) VerifyOneWithSpec(ctx, userID, authenticatorType, infos, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOneWithSpec", reflect.TypeOf((*MockAuthenticatorService)(nil).VerifyOneWithSpec), ctx, userID, authenticatorType, infos, spec, options)
}

// VerifyWithSpec mocks base method.
func (m *MockAuthenticatorService) VerifyWithSpec(ctx context.Context, info *authenticator.Info, spec *authenticator.Spec, options *facade.VerifyOptions) (*service.VerifyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyWithSpec", ctx, info, spec, options)
	ret0, _ := ret[0].(*service.VerifyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyWithSpec indicates an expected call of VerifyWithSpec.
func (mr *MockAuthenticatorServiceMockRecorder) VerifyWithSpec(ctx, info, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyWithSpec", reflect.TypeOf((*MockAuthenticatorService)(nil).VerifyWithSpec), ctx, info, spec, options)
}

// MockOTPCodeService is a mock of OTPCodeService interface.
type MockOTPCodeService struct {
	ctrl     *gomock.Controller
	recorder *MockOTPCodeServiceMockRecorder
}

// MockOTPCodeServiceMockRecorder is the mock recorder for MockOTPCodeService.
type MockOTPCodeServiceMockRecorder struct {
	mock *MockOTPCodeService
}

// NewMockOTPCodeService creates a new mock instance.
func NewMockOTPCodeService(ctrl *gomock.Controller) *MockOTPCodeService {
	mock := &MockOTPCodeService{ctrl: ctrl}
	mock.recorder = &MockOTPCodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTPCodeService) EXPECT() *MockOTPCodeServiceMockRecorder {
	return m.recorder
}

// GenerateOTP mocks base method.
func (m *MockOTPCodeService) GenerateOTP(ctx context.Context, kind otp.Kind, target string, form otp.Form, opt *otp.GenerateOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTP", ctx, kind, target, form, opt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateOTP indicates an expected call of GenerateOTP.
func (mr *MockOTPCodeServiceMockRecorder) GenerateOTP(ctx, kind, target, form, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTP", reflect.TypeOf((*MockOTPCodeService)(nil).GenerateOTP), ctx, kind, target, form, opt)
}

// InspectState mocks base method.
func (m *MockOTPCodeService) InspectState(ctx context.Context, kind otp.Kind, target string) (*otp.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectState", ctx, kind, target)
	ret0, _ := ret[0].(*otp.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectState indicates an expected call of InspectState.
func (mr *MockOTPCodeServiceMockRecorder) InspectState(ctx, kind, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectState", reflect.TypeOf((*MockOTPCodeService)(nil).InspectState), ctx, kind, target)
}

// LookupCode mocks base method.
func (m *MockOTPCodeService) LookupCode(ctx context.Context, purpose otp.Purpose, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCode", ctx, purpose, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCode indicates an expected call of LookupCode.
func (mr *MockOTPCodeServiceMockRecorder) LookupCode(ctx, purpose, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCode", reflect.TypeOf((*MockOTPCodeService)(nil).LookupCode), ctx, purpose, code)
}

// SetSubmittedCode mocks base method.
func (m *MockOTPCodeService) SetSubmittedCode(ctx context.Context, kind otp.Kind, target, code string) (*otp.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubmittedCode", ctx, kind, target, code)
	ret0, _ := ret[0].(*otp.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSubmittedCode indicates an expected call of SetSubmittedCode.
func (mr *MockOTPCodeServiceMockRecorder) SetSubmittedCode(ctx, kind, target, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubmittedCode", reflect.TypeOf((*MockOTPCodeService)(nil).SetSubmittedCode), ctx, kind, target, code)
}

// VerifyOTP mocks base method.
func (m *MockOTPCodeService) VerifyOTP(ctx context.Context, kind otp.Kind, target, otp string, opts *otp.VerifyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", ctx, kind, target, otp, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockOTPCodeServiceMockRecorder) VerifyOTP(ctx, kind, target, otp, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockOTPCodeService)(nil).VerifyOTP), ctx, kind, target, otp, opts)
}

// MockOTPSender is a mock of OTPSender interface.
type MockOTPSender struct {
	ctrl     *gomock.Controller
	recorder *MockOTPSenderMockRecorder
}

// MockOTPSenderMockRecorder is the mock recorder for MockOTPSender.
type MockOTPSenderMockRecorder struct {
	mock *MockOTPSender
}

// NewMockOTPSender creates a new mock instance.
func NewMockOTPSender(ctrl *gomock.Controller) *MockOTPSender {
	mock := &MockOTPSender{ctrl: ctrl}
	mock.recorder = &MockOTPSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTPSender) EXPECT() *MockOTPSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockOTPSender) Send(ctx context.Context, opts otp.SendOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOTPSenderMockRecorder) Send(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOTPSender)(nil).Send), ctx, opts)
}

// MockAnonymousIdentityService is a mock of AnonymousIdentityService interface.
type MockAnonymousIdentityService struct {
	ctrl     *gomock.Controller
	recorder *MockAnonymousIdentityServiceMockRecorder
}

// MockAnonymousIdentityServiceMockRecorder is the mock recorder for MockAnonymousIdentityService.
type MockAnonymousIdentityServiceMockRecorder struct {
	mock *MockAnonymousIdentityService
}

// NewMockAnonymousIdentityService creates a new mock instance.
func NewMockAnonymousIdentityService(ctrl *gomock.Controller) *MockAnonymousIdentityService {
	mock := &MockAnonymousIdentityService{ctrl: ctrl}
	mock.recorder = &MockAnonymousIdentityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnonymousIdentityService) EXPECT() *MockAnonymousIdentityServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAnonymousIdentityService) Get(ctx context.Context, userID, id string) (*identity.Anonymous, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, id)
	ret0, _ := ret[0].(*identity.Anonymous)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAnonymousIdentityServiceMockRecorder) Get(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAnonymousIdentityService)(nil).Get), ctx, userID, id)
}

// GetByKeyID mocks base method.
func (m *MockAnonymousIdentityService) GetByKeyID(ctx context.Context, keyID string) (*identity.Anonymous, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyID", ctx, keyID)
	ret0, _ := ret[0].(*identity.Anonymous)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyID indicates an expected call of GetByKeyID.
func (mr *MockAnonymousIdentityServiceMockRecorder) GetByKeyID(ctx, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyID", reflect.TypeOf((*MockAnonymousIdentityService)(nil).GetByKeyID), ctx, keyID)
}

// ParseRequest mocks base method.
func (m *MockAnonymousIdentityService) ParseRequest(requestJWT string, identity *identity.Anonymous) (*anonymous.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRequest", requestJWT, identity)
	ret0, _ := ret[0].(*anonymous.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRequest indicates an expected call of ParseRequest.
func (mr *MockAnonymousIdentityServiceMockRecorder) ParseRequest(requestJWT, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequest", reflect.TypeOf((*MockAnonymousIdentityService)(nil).ParseRequest), requestJWT, identity)
}

// ParseRequestUnverified mocks base method.
func (m *MockAnonymousIdentityService) ParseRequestUnverified(requestJWT string) (*anonymous.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRequestUnverified", requestJWT)
	ret0, _ := ret[0].(*anonymous.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRequestUnverified indicates an expected call of ParseRequestUnverified.
func (mr *MockAnonymousIdentityServiceMockRecorder) ParseRequestUnverified(requestJWT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequestUnverified", reflect.TypeOf((*MockAnonymousIdentityService)(nil).ParseRequestUnverified), requestJWT)
}

// MockAnonymousUserPromotionCodeStore is a mock of AnonymousUserPromotionCodeStore interface.
type MockAnonymousUserPromotionCodeStore struct {
	ctrl     *gomock.Controller
	recorder *MockAnonymousUserPromotionCodeStoreMockRecorder
}

// MockAnonymousUserPromotionCodeStoreMockRecorder is the mock recorder for MockAnonymousUserPromotionCodeStore.
type MockAnonymousUserPromotionCodeStoreMockRecorder struct {
	mock *MockAnonymousUserPromotionCodeStore
}

// NewMockAnonymousUserPromotionCodeStore creates a new mock instance.
func NewMockAnonymousUserPromotionCodeStore(ctrl *gomock.Controller) *MockAnonymousUserPromotionCodeStore {
	mock := &MockAnonymousUserPromotionCodeStore{ctrl: ctrl}
	mock.recorder = &MockAnonymousUserPromotionCodeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnonymousUserPromotionCodeStore) EXPECT() *MockAnonymousUserPromotionCodeStoreMockRecorder {
	return m.recorder
}

// DeletePromotionCode mocks base method.
func (m *MockAnonymousUserPromotionCodeStore) DeletePromotionCode(ctx context.Context, code *anonymous.PromotionCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromotionCode", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePromotionCode indicates an expected call of DeletePromotionCode.
func (mr *MockAnonymousUserPromotionCodeStoreMockRecorder) DeletePromotionCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromotionCode", reflect.TypeOf((*MockAnonymousUserPromotionCodeStore)(nil).DeletePromotionCode), ctx, code)
}

// GetPromotionCode mocks base method.
func (m *MockAnonymousUserPromotionCodeStore) GetPromotionCode(ctx context.Context, codeHash string) (*anonymous.PromotionCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionCode", ctx, codeHash)
	ret0, _ := ret[0].(*anonymous.PromotionCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionCode indicates an expected call of GetPromotionCode.
func (mr *MockAnonymousUserPromotionCodeStoreMockRecorder) GetPromotionCode(ctx, codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionCode", reflect.TypeOf((*MockAnonymousUserPromotionCodeStore)(nil).GetPromotionCode), ctx, codeHash)
}

// MockVerificationService is a mock of VerificationService interface.
type MockVerificationService struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationServiceMockRecorder
}

// MockVerificationServiceMockRecorder is the mock recorder for MockVerificationService.
type MockVerificationServiceMockRecorder struct {
	mock *MockVerificationService
}

// NewMockVerificationService creates a new mock instance.
func NewMockVerificationService(ctrl *gomock.Controller) *MockVerificationService {
	mock := &MockVerificationService{ctrl: ctrl}
	mock.recorder = &MockVerificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationService) EXPECT() *MockVerificationServiceMockRecorder {
	return m.recorder
}

// GetClaimStatus mocks base method.
func (m *MockVerificationService) GetClaimStatus(ctx context.Context, userID string, claimName model.ClaimName, claimValue string) (*verification.ClaimStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimStatus", ctx, userID, claimName, claimValue)
	ret0, _ := ret[0].(*verification.ClaimStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimStatus indicates an expected call of GetClaimStatus.
func (mr *MockVerificationServiceMockRecorder) GetClaimStatus(ctx, userID, claimName, claimValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimStatus", reflect.TypeOf((*MockVerificationService)(nil).GetClaimStatus), ctx, userID, claimName, claimValue)
}

// GetIdentityVerificationStatus mocks base method.
func (m *MockVerificationService) GetIdentityVerificationStatus(ctx context.Context, i *identity.Info) ([]verification.ClaimStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityVerificationStatus", ctx, i)
	ret0, _ := ret[0].([]verification.ClaimStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityVerificationStatus indicates an expected call of GetIdentityVerificationStatus.
func (mr *MockVerificationServiceMockRecorder) GetIdentityVerificationStatus(ctx, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityVerificationStatus", reflect.TypeOf((*MockVerificationService)(nil).GetIdentityVerificationStatus), ctx, i)
}

// MarkClaimVerified mocks base method.
func (m *MockVerificationService) MarkClaimVerified(ctx context.Context, claim *verification.Claim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkClaimVerified", ctx, claim)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkClaimVerified indicates an expected call of MarkClaimVerified.
func (mr *MockVerificationServiceMockRecorder) MarkClaimVerified(ctx, claim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkClaimVerified", reflect.TypeOf((*MockVerificationService)(nil).MarkClaimVerified), ctx, claim)
}

// NewVerifiedClaim mocks base method.
func (m *MockVerificationService) NewVerifiedClaim(ctx context.Context, userID, claimName, claimValue string) *verification.Claim {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVerifiedClaim", ctx, userID, claimName, claimValue)
	ret0, _ := ret[0].(*verification.Claim)
	return ret0
}

// NewVerifiedClaim indicates an expected call of NewVerifiedClaim.
func (mr *MockVerificationServiceMockRecorder) NewVerifiedClaim(ctx, userID, claimName, claimValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVerifiedClaim", reflect.TypeOf((*MockVerificationService)(nil).NewVerifiedClaim), ctx, userID, claimName, claimValue)
}

// MockForgotPasswordService is a mock of ForgotPasswordService interface.
type MockForgotPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockForgotPasswordServiceMockRecorder
}

// MockForgotPasswordServiceMockRecorder is the mock recorder for MockForgotPasswordService.
type MockForgotPasswordServiceMockRecorder struct {
	mock *MockForgotPasswordService
}

// NewMockForgotPasswordService creates a new mock instance.
func NewMockForgotPasswordService(ctrl *gomock.Controller) *MockForgotPasswordService {
	mock := &MockForgotPasswordService{ctrl: ctrl}
	mock.recorder = &MockForgotPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForgotPasswordService) EXPECT() *MockForgotPasswordServiceMockRecorder {
	return m.recorder
}

// CodeLength mocks base method.
func (m *MockForgotPasswordService) CodeLength(target string, channel forgotpassword.CodeChannel, kind forgotpassword.CodeKind) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeLength", target, channel, kind)
	ret0, _ := ret[0].(int)
	return ret0
}

// CodeLength indicates an expected call of CodeLength.
func (mr *MockForgotPasswordServiceMockRecorder) CodeLength(target, channel, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeLength", reflect.TypeOf((*MockForgotPasswordService)(nil).CodeLength), target, channel, kind)
}

// InspectState mocks base method.
func (m *MockForgotPasswordService) InspectState(ctx context.Context, target string, channel forgotpassword.CodeChannel, kind forgotpassword.CodeKind) (*otp.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectState", ctx, target, channel, kind)
	ret0, _ := ret[0].(*otp.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectState indicates an expected call of InspectState.
func (mr *MockForgotPasswordServiceMockRecorder) InspectState(ctx, target, channel, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectState", reflect.TypeOf((*MockForgotPasswordService)(nil).InspectState), ctx, target, channel, kind)
}

// IsRateLimitError mocks base method.
func (m *MockForgotPasswordService) IsRateLimitError(err error, target string, channel forgotpassword.CodeChannel, kind forgotpassword.CodeKind) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRateLimitError", err, target, channel, kind)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRateLimitError indicates an expected call of IsRateLimitError.
func (mr *MockForgotPasswordServiceMockRecorder) IsRateLimitError(err, target, channel, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRateLimitError", reflect.TypeOf((*MockForgotPasswordService)(nil).IsRateLimitError), err, target, channel, kind)
}

// SendCode mocks base method.
func (m *MockForgotPasswordService) SendCode(ctx context.Context, loginID string, options *forgotpassword.CodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", ctx, loginID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode.
func (mr *MockForgotPasswordServiceMockRecorder) SendCode(ctx, loginID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockForgotPasswordService)(nil).SendCode), ctx, loginID, options)
}

// MockResetPasswordService is a mock of ResetPasswordService interface.
type MockResetPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockResetPasswordServiceMockRecorder
}

// MockResetPasswordServiceMockRecorder is the mock recorder for MockResetPasswordService.
type MockResetPasswordServiceMockRecorder struct {
	mock *MockResetPasswordService
}

// NewMockResetPasswordService creates a new mock instance.
func NewMockResetPasswordService(ctrl *gomock.Controller) *MockResetPasswordService {
	mock := &MockResetPasswordService{ctrl: ctrl}
	mock.recorder = &MockResetPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetPasswordService) EXPECT() *MockResetPasswordServiceMockRecorder {
	return m.recorder
}

// ResetPasswordByEndUser mocks base method.
func (m *MockResetPasswordService) ResetPasswordByEndUser(ctx context.Context, code, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordByEndUser", ctx, code, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordByEndUser indicates an expected call of ResetPasswordByEndUser.
func (mr *MockResetPasswordServiceMockRecorder) ResetPasswordByEndUser(ctx, code, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordByEndUser", reflect.TypeOf((*MockResetPasswordService)(nil).ResetPasswordByEndUser), ctx, code, newPassword)
}

// ResetPasswordWithTarget mocks base method.
func (m *MockResetPasswordService) ResetPasswordWithTarget(ctx context.Context, target, code, newPassword string, channel forgotpassword.CodeChannel, kind forgotpassword.CodeKind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordWithTarget", ctx, target, code, newPassword, channel, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordWithTarget indicates an expected call of ResetPasswordWithTarget.
func (mr *MockResetPasswordServiceMockRecorder) ResetPasswordWithTarget(ctx, target, code, newPassword, channel, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordWithTarget", reflect.TypeOf((*MockResetPasswordService)(nil).ResetPasswordWithTarget), ctx, target, code, newPassword, channel, kind)
}

// VerifyCode mocks base method.
func (m *MockResetPasswordService) VerifyCode(ctx context.Context, code string) (*otp.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCode", ctx, code)
	ret0, _ := ret[0].(*otp.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCode indicates an expected call of VerifyCode.
func (mr *MockResetPasswordServiceMockRecorder) VerifyCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockResetPasswordService)(nil).VerifyCode), ctx, code)
}

// VerifyCodeWithTarget mocks base method.
func (m *MockResetPasswordService) VerifyCodeWithTarget(ctx context.Context, target, code string, channel forgotpassword.CodeChannel, kind forgotpassword.CodeKind) (*otp.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCodeWithTarget", ctx, target, code, channel, kind)
	ret0, _ := ret[0].(*otp.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCodeWithTarget indicates an expected call of VerifyCodeWithTarget.
func (mr *MockResetPasswordServiceMockRecorder) VerifyCodeWithTarget(ctx, target, code, channel, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCodeWithTarget", reflect.TypeOf((*MockResetPasswordService)(nil).VerifyCodeWithTarget), ctx, target, code, channel, kind)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiter) Allow(ctx context.Context, spec ratelimit.BucketSpec) (*ratelimit.FailedReservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", ctx, spec)
	ret0, _ := ret[0].(*ratelimit.FailedReservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterMockRecorder) Allow(ctx, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiter)(nil).Allow), ctx, spec)
}

// Cancel mocks base method.
func (m *MockRateLimiter) Cancel(ctx context.Context, r *ratelimit.Reservation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel", ctx, r)
}

// Cancel indicates an expected call of Cancel.
func (mr *MockRateLimiterMockRecorder) Cancel(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockRateLimiter)(nil).Cancel), ctx, r)
}

// Reserve mocks base method.
func (m *MockRateLimiter) Reserve(ctx context.Context, spec ratelimit.BucketSpec) (*ratelimit.Reservation, *ratelimit.FailedReservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", ctx, spec)
	ret0, _ := ret[0].(*ratelimit.Reservation)
	ret1, _ := ret[1].(*ratelimit.FailedReservation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reserve indicates an expected call of Reserve.
func (mr *MockRateLimiterMockRecorder) Reserve(ctx, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockRateLimiter)(nil).Reserve), ctx, spec)
}

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// DispatchEventImmediately mocks base method.
func (m *MockEventService) DispatchEventImmediately(ctx context.Context, payload event.NonBlockingPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEventImmediately", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEventImmediately indicates an expected call of DispatchEventImmediately.
func (mr *MockEventServiceMockRecorder) DispatchEventImmediately(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEventImmediately", reflect.TypeOf((*MockEventService)(nil).DispatchEventImmediately), ctx, payload)
}

// DispatchEventOnCommit mocks base method.
func (m *MockEventService) DispatchEventOnCommit(ctx context.Context, payload event.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEventOnCommit", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEventOnCommit indicates an expected call of DispatchEventOnCommit.
func (mr *MockEventServiceMockRecorder) DispatchEventOnCommit(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEventOnCommit", reflect.TypeOf((*MockEventService)(nil).DispatchEventOnCommit), ctx, payload)
}

// DispatchEventWithoutTx mocks base method.
func (m *MockEventService) DispatchEventWithoutTx(ctx context.Context, e *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEventWithoutTx", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEventWithoutTx indicates an expected call of DispatchEventWithoutTx.
func (mr *MockEventServiceMockRecorder) DispatchEventWithoutTx(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEventWithoutTx", reflect.TypeOf((*MockEventService)(nil).DispatchEventWithoutTx), ctx, e)
}

// PrepareBlockingEventWithTx mocks base method.
func (m *MockEventService) PrepareBlockingEventWithTx(ctx context.Context, payload event.BlockingPayload) (*event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareBlockingEventWithTx", ctx, payload)
	ret0, _ := ret[0].(*event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareBlockingEventWithTx indicates an expected call of PrepareBlockingEventWithTx.
func (mr *MockEventServiceMockRecorder) PrepareBlockingEventWithTx(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareBlockingEventWithTx", reflect.TypeOf((*MockEventService)(nil).PrepareBlockingEventWithTx), ctx, payload)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AfterCreate mocks base method.
func (m *MockUserService) AfterCreate(ctx context.Context, user *user.User, identities []*identity.Info, authenticators []*authenticator.Info, isAdminAPI bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterCreate", ctx, user, identities, authenticators, isAdminAPI)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterCreate indicates an expected call of AfterCreate.
func (mr *MockUserServiceMockRecorder) AfterCreate(ctx, user, identities, authenticators, isAdminAPI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterCreate", reflect.TypeOf((*MockUserService)(nil).AfterCreate), ctx, user, identities, authenticators, isAdminAPI)
}

// Create mocks base method.
func (m *MockUserService) Create(ctx context.Context, userID string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), ctx, userID)
}

// Get mocks base method.
func (m *MockUserService) Get(ctx context.Context, id string, role accesscontrol.Role) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, role)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServiceMockRecorder) Get(ctx, id, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserService)(nil).Get), ctx, id, role)
}

// GetRaw mocks base method.
func (m *MockUserService) GetRaw(ctx context.Context, id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockUserServiceMockRecorder) GetRaw(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockUserService)(nil).GetRaw), ctx, id)
}

// UpdateLoginTime mocks base method.
func (m *MockUserService) UpdateLoginTime(ctx context.Context, userID string, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginTime", ctx, userID, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoginTime indicates an expected call of UpdateLoginTime.
func (mr *MockUserServiceMockRecorder) UpdateLoginTime(ctx, userID, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginTime", reflect.TypeOf((*MockUserService)(nil).UpdateLoginTime), ctx, userID, t)
}

// UpdateMFAEnrollment mocks base method.
func (m *MockUserService) UpdateMFAEnrollment(ctx context.Context, userID string, t *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMFAEnrollment", ctx, userID, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMFAEnrollment indicates an expected call of UpdateMFAEnrollment.
func (mr *MockUserServiceMockRecorder) UpdateMFAEnrollment(ctx, userID, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMFAEnrollment", reflect.TypeOf((*MockUserService)(nil).UpdateMFAEnrollment), ctx, userID, t)
}

// MockIDPSessionService is a mock of IDPSessionService interface.
type MockIDPSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockIDPSessionServiceMockRecorder
}

// MockIDPSessionServiceMockRecorder is the mock recorder for MockIDPSessionService.
type MockIDPSessionServiceMockRecorder struct {
	mock *MockIDPSessionService
}

// NewMockIDPSessionService creates a new mock instance.
func NewMockIDPSessionService(ctrl *gomock.Controller) *MockIDPSessionService {
	mock := &MockIDPSessionService{ctrl: ctrl}
	mock.recorder = &MockIDPSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDPSessionService) EXPECT() *MockIDPSessionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDPSessionService) Create(ctx context.Context, s *idpsession.IDPSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIDPSessionServiceMockRecorder) Create(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDPSessionService)(nil).Create), ctx, s)
}

// MakeSession mocks base method.
func (m *MockIDPSessionService) MakeSession(arg0 *session.Attrs) (*idpsession.IDPSession, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSession", arg0)
	ret0, _ := ret[0].(*idpsession.IDPSession)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// MakeSession indicates an expected call of MakeSession.
func (mr *MockIDPSessionServiceMockRecorder) MakeSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSession", reflect.TypeOf((*MockIDPSessionService)(nil).MakeSession), arg0)
}

// Reauthenticate mocks base method.
func (m *MockIDPSessionService) Reauthenticate(ctx context.Context, idpSessionID string, amr []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reauthenticate", ctx, idpSessionID, amr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reauthenticate indicates an expected call of Reauthenticate.
func (mr *MockIDPSessionServiceMockRecorder) Reauthenticate(ctx, idpSessionID, amr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reauthenticate", reflect.TypeOf((*MockIDPSessionService)(nil).Reauthenticate), ctx, idpSessionID, amr)
}

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// RevokeWithoutEvent mocks base method.
func (m *MockSessionService) RevokeWithoutEvent(ctx context.Context, s session.SessionBase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeWithoutEvent", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeWithoutEvent indicates an expected call of RevokeWithoutEvent.
func (mr *MockSessionServiceMockRecorder) RevokeWithoutEvent(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeWithoutEvent", reflect.TypeOf((*MockSessionService)(nil).RevokeWithoutEvent), ctx, s)
}

// MockStdAttrsService is a mock of StdAttrsService interface.
type MockStdAttrsService struct {
	ctrl     *gomock.Controller
	recorder *MockStdAttrsServiceMockRecorder
}

// MockStdAttrsServiceMockRecorder is the mock recorder for MockStdAttrsService.
type MockStdAttrsServiceMockRecorder struct {
	mock *MockStdAttrsService
}

// NewMockStdAttrsService creates a new mock instance.
func NewMockStdAttrsService(ctrl *gomock.Controller) *MockStdAttrsService {
	mock := &MockStdAttrsService{ctrl: ctrl}
	mock.recorder = &MockStdAttrsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStdAttrsService) EXPECT() *MockStdAttrsServiceMockRecorder {
	return m.recorder
}

// PopulateStandardAttributes mocks base method.
func (m *MockStdAttrsService) PopulateStandardAttributes(ctx context.Context, userID string, iden *identity.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateStandardAttributes", ctx, userID, iden)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateStandardAttributes indicates an expected call of PopulateStandardAttributes.
func (mr *MockStdAttrsServiceMockRecorder) PopulateStandardAttributes(ctx, userID, iden interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateStandardAttributes", reflect.TypeOf((*MockStdAttrsService)(nil).PopulateStandardAttributes), ctx, userID, iden)
}

// UpdateStandardAttributesWithList mocks base method.
func (m *MockStdAttrsService) UpdateStandardAttributesWithList(ctx context.Context, role accesscontrol.Role, userID string, attrs attrs.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStandardAttributesWithList", ctx, role, userID, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStandardAttributesWithList indicates an expected call of UpdateStandardAttributesWithList.
func (mr *MockStdAttrsServiceMockRecorder) UpdateStandardAttributesWithList(ctx, role, userID, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStandardAttributesWithList", reflect.TypeOf((*MockStdAttrsService)(nil).UpdateStandardAttributesWithList), ctx, role, userID, attrs)
}

// MockCustomAttrsService is a mock of CustomAttrsService interface.
type MockCustomAttrsService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomAttrsServiceMockRecorder
}

// MockCustomAttrsServiceMockRecorder is the mock recorder for MockCustomAttrsService.
type MockCustomAttrsServiceMockRecorder struct {
	mock *MockCustomAttrsService
}

// NewMockCustomAttrsService creates a new mock instance.
func NewMockCustomAttrsService(ctrl *gomock.Controller) *MockCustomAttrsService {
	mock := &MockCustomAttrsService{ctrl: ctrl}
	mock.recorder = &MockCustomAttrsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomAttrsService) EXPECT() *MockCustomAttrsServiceMockRecorder {
	return m.recorder
}

// UpdateCustomAttributesWithList mocks base method.
func (m *MockCustomAttrsService) UpdateCustomAttributesWithList(ctx context.Context, role accesscontrol.Role, userID string, attrs attrs.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomAttributesWithList", ctx, role, userID, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomAttributesWithList indicates an expected call of UpdateCustomAttributesWithList.
func (mr *MockCustomAttrsServiceMockRecorder) UpdateCustomAttributesWithList(ctx, role, userID, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomAttributesWithList", reflect.TypeOf((*MockCustomAttrsService)(nil).UpdateCustomAttributesWithList), ctx, role, userID, attrs)
}

// MockAuthenticationInfoService is a mock of AuthenticationInfoService interface.
type MockAuthenticationInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationInfoServiceMockRecorder
}

// MockAuthenticationInfoServiceMockRecorder is the mock recorder for MockAuthenticationInfoService.
type MockAuthenticationInfoServiceMockRecorder struct {
	mock *MockAuthenticationInfoService
}

// NewMockAuthenticationInfoService creates a new mock instance.
func NewMockAuthenticationInfoService(ctrl *gomock.Controller) *MockAuthenticationInfoService {
	mock := &MockAuthenticationInfoService{ctrl: ctrl}
	mock.recorder = &MockAuthenticationInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationInfoService) EXPECT() *MockAuthenticationInfoServiceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockAuthenticationInfoService) Save(ctx context.Context, entry *authenticationinfo.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAuthenticationInfoServiceMockRecorder) Save(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAuthenticationInfoService)(nil).Save), ctx, entry)
}

// MockCookieManager is a mock of CookieManager interface.
type MockCookieManager struct {
	ctrl     *gomock.Controller
	recorder *MockCookieManagerMockRecorder
}

// MockCookieManagerMockRecorder is the mock recorder for MockCookieManager.
type MockCookieManagerMockRecorder struct {
	mock *MockCookieManager
}

// NewMockCookieManager creates a new mock instance.
func NewMockCookieManager(ctrl *gomock.Controller) *MockCookieManager {
	mock := &MockCookieManager{ctrl: ctrl}
	mock.recorder = &MockCookieManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieManager) EXPECT() *MockCookieManagerMockRecorder {
	return m.recorder
}

// ClearCookie mocks base method.
func (m *MockCookieManager) ClearCookie(def *httputil.CookieDef) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCookie", def)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// ClearCookie indicates an expected call of ClearCookie.
func (mr *MockCookieManagerMockRecorder) ClearCookie(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCookie", reflect.TypeOf((*MockCookieManager)(nil).ClearCookie), def)
}

// GetCookie mocks base method.
func (m *MockCookieManager) GetCookie(r *http.Request, def *httputil.CookieDef) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie", r, def)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockCookieManagerMockRecorder) GetCookie(r, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockCookieManager)(nil).GetCookie), r, def)
}

// ValueCookie mocks base method.
func (m *MockCookieManager) ValueCookie(def *httputil.CookieDef, value string) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueCookie", def, value)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// ValueCookie indicates an expected call of ValueCookie.
func (mr *MockCookieManagerMockRecorder) ValueCookie(def, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueCookie", reflect.TypeOf((*MockCookieManager)(nil).ValueCookie), def, value)
}

// MockAccountMigrationService is a mock of AccountMigrationService interface.
type MockAccountMigrationService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMigrationServiceMockRecorder
}

// MockAccountMigrationServiceMockRecorder is the mock recorder for MockAccountMigrationService.
type MockAccountMigrationServiceMockRecorder struct {
	mock *MockAccountMigrationService
}

// NewMockAccountMigrationService creates a new mock instance.
func NewMockAccountMigrationService(ctrl *gomock.Controller) *MockAccountMigrationService {
	mock := &MockAccountMigrationService{ctrl: ctrl}
	mock.recorder = &MockAccountMigrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountMigrationService) EXPECT() *MockAccountMigrationServiceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockAccountMigrationService) Run(ctx context.Context, migrationTokenString string) (*accountmigration.HookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, migrationTokenString)
	ret0, _ := ret[0].(*accountmigration.HookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockAccountMigrationServiceMockRecorder) Run(ctx, migrationTokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAccountMigrationService)(nil).Run), ctx, migrationTokenString)
}

// MockBotProtectionService is a mock of BotProtectionService interface.
type MockBotProtectionService struct {
	ctrl     *gomock.Controller
	recorder *MockBotProtectionServiceMockRecorder
}

// MockBotProtectionServiceMockRecorder is the mock recorder for MockBotProtectionService.
type MockBotProtectionServiceMockRecorder struct {
	mock *MockBotProtectionService
}

// NewMockBotProtectionService creates a new mock instance.
func NewMockBotProtectionService(ctrl *gomock.Controller) *MockBotProtectionService {
	mock := &MockBotProtectionService{ctrl: ctrl}
	mock.recorder = &MockBotProtectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotProtectionService) EXPECT() *MockBotProtectionServiceMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockBotProtectionService) Verify(ctx context.Context, response string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockBotProtectionServiceMockRecorder) Verify(ctx, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockBotProtectionService)(nil).Verify), ctx, response)
}

// MockCaptchaService is a mock of CaptchaService interface.
type MockCaptchaService struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaServiceMockRecorder
}

// MockCaptchaServiceMockRecorder is the mock recorder for MockCaptchaService.
type MockCaptchaServiceMockRecorder struct {
	mock *MockCaptchaService
}

// NewMockCaptchaService creates a new mock instance.
func NewMockCaptchaService(ctrl *gomock.Controller) *MockCaptchaService {
	mock := &MockCaptchaService{ctrl: ctrl}
	mock.recorder = &MockCaptchaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptchaService) EXPECT() *MockCaptchaServiceMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockCaptchaService) VerifyToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockCaptchaServiceMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockCaptchaService)(nil).VerifyToken), ctx, token)
}

// MockChallengeService is a mock of ChallengeService interface.
type MockChallengeService struct {
	ctrl     *gomock.Controller
	recorder *MockChallengeServiceMockRecorder
}

// MockChallengeServiceMockRecorder is the mock recorder for MockChallengeService.
type MockChallengeServiceMockRecorder struct {
	mock *MockChallengeService
}

// NewMockChallengeService creates a new mock instance.
func NewMockChallengeService(ctrl *gomock.Controller) *MockChallengeService {
	mock := &MockChallengeService{ctrl: ctrl}
	mock.recorder = &MockChallengeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengeService) EXPECT() *MockChallengeServiceMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockChallengeService) Consume(ctx context.Context, token string) (*challenge.Purpose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, token)
	ret0, _ := ret[0].(*challenge.Purpose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockChallengeServiceMockRecorder) Consume(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockChallengeService)(nil).Consume), ctx, token)
}

// Get mocks base method.
func (m *MockChallengeService) Get(ctx context.Context, token string) (*challenge.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(*challenge.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChallengeServiceMockRecorder) Get(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChallengeService)(nil).Get), ctx, token)
}

// MockMFAService is a mock of MFAService interface.
type MockMFAService struct {
	ctrl     *gomock.Controller
	recorder *MockMFAServiceMockRecorder
}

// MockMFAServiceMockRecorder is the mock recorder for MockMFAService.
type MockMFAServiceMockRecorder struct {
	mock *MockMFAService
}

// NewMockMFAService creates a new mock instance.
func NewMockMFAService(ctrl *gomock.Controller) *MockMFAService {
	mock := &MockMFAService{ctrl: ctrl}
	mock.recorder = &MockMFAServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMFAService) EXPECT() *MockMFAServiceMockRecorder {
	return m.recorder
}

// ConsumeRecoveryCode mocks base method.
func (m *MockMFAService) ConsumeRecoveryCode(ctx context.Context, c *mfa.RecoveryCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRecoveryCode", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRecoveryCode indicates an expected call of ConsumeRecoveryCode.
func (mr *MockMFAServiceMockRecorder) ConsumeRecoveryCode(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRecoveryCode", reflect.TypeOf((*MockMFAService)(nil).ConsumeRecoveryCode), ctx, c)
}

// CreateDeviceToken mocks base method.
func (m *MockMFAService) CreateDeviceToken(ctx context.Context, userID, token string) (*mfa.DeviceToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceToken", ctx, userID, token)
	ret0, _ := ret[0].(*mfa.DeviceToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceToken indicates an expected call of CreateDeviceToken.
func (mr *MockMFAServiceMockRecorder) CreateDeviceToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceToken", reflect.TypeOf((*MockMFAService)(nil).CreateDeviceToken), ctx, userID, token)
}

// GenerateDeviceToken mocks base method.
func (m *MockMFAService) GenerateDeviceToken(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDeviceToken", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateDeviceToken indicates an expected call of GenerateDeviceToken.
func (mr *MockMFAServiceMockRecorder) GenerateDeviceToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDeviceToken", reflect.TypeOf((*MockMFAService)(nil).GenerateDeviceToken), ctx)
}

// GenerateRecoveryCodes mocks base method.
func (m *MockMFAService) GenerateRecoveryCodes(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRecoveryCodes", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GenerateRecoveryCodes indicates an expected call of GenerateRecoveryCodes.
func (mr *MockMFAServiceMockRecorder) GenerateRecoveryCodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRecoveryCodes", reflect.TypeOf((*MockMFAService)(nil).GenerateRecoveryCodes), ctx)
}

// ListRecoveryCodes mocks base method.
func (m *MockMFAService) ListRecoveryCodes(ctx context.Context, userID string) ([]*mfa.RecoveryCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryCodes", ctx, userID)
	ret0, _ := ret[0].([]*mfa.RecoveryCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryCodes indicates an expected call of ListRecoveryCodes.
func (mr *MockMFAServiceMockRecorder) ListRecoveryCodes(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryCodes", reflect.TypeOf((*MockMFAService)(nil).ListRecoveryCodes), ctx, userID)
}

// ReplaceRecoveryCodes mocks base method.
func (m *MockMFAService) ReplaceRecoveryCodes(ctx context.Context, userID string, codes []string) ([]*mfa.RecoveryCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceRecoveryCodes", ctx, userID, codes)
	ret0, _ := ret[0].([]*mfa.RecoveryCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceRecoveryCodes indicates an expected call of ReplaceRecoveryCodes.
func (mr *MockMFAServiceMockRecorder) ReplaceRecoveryCodes(ctx, userID, codes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceRecoveryCodes", reflect.TypeOf((*MockMFAService)(nil).ReplaceRecoveryCodes), ctx, userID, codes)
}

// VerifyDeviceToken mocks base method.
func (m *MockMFAService) VerifyDeviceToken(ctx context.Context, userID, deviceToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDeviceToken", ctx, userID, deviceToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDeviceToken indicates an expected call of VerifyDeviceToken.
func (mr *MockMFAServiceMockRecorder) VerifyDeviceToken(ctx, userID, deviceToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDeviceToken", reflect.TypeOf((*MockMFAService)(nil).VerifyDeviceToken), ctx, userID, deviceToken)
}

// VerifyRecoveryCode mocks base method.
func (m *MockMFAService) VerifyRecoveryCode(ctx context.Context, userID, code string) (*mfa.RecoveryCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRecoveryCode", ctx, userID, code)
	ret0, _ := ret[0].(*mfa.RecoveryCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRecoveryCode indicates an expected call of VerifyRecoveryCode.
func (mr *MockMFAServiceMockRecorder) VerifyRecoveryCode(ctx, userID, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRecoveryCode", reflect.TypeOf((*MockMFAService)(nil).VerifyRecoveryCode), ctx, userID, code)
}

// MockOfflineGrantStore is a mock of OfflineGrantStore interface.
type MockOfflineGrantStore struct {
	ctrl     *gomock.Controller
	recorder *MockOfflineGrantStoreMockRecorder
}

// MockOfflineGrantStoreMockRecorder is the mock recorder for MockOfflineGrantStore.
type MockOfflineGrantStoreMockRecorder struct {
	mock *MockOfflineGrantStore
}

// NewMockOfflineGrantStore creates a new mock instance.
func NewMockOfflineGrantStore(ctrl *gomock.Controller) *MockOfflineGrantStore {
	mock := &MockOfflineGrantStore{ctrl: ctrl}
	mock.recorder = &MockOfflineGrantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfflineGrantStore) EXPECT() *MockOfflineGrantStoreMockRecorder {
	return m.recorder
}

// ListClientOfflineGrants mocks base method.
func (m *MockOfflineGrantStore) ListClientOfflineGrants(ctx context.Context, clientID, userID string) ([]*oauth.OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientOfflineGrants", ctx, clientID, userID)
	ret0, _ := ret[0].([]*oauth.OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientOfflineGrants indicates an expected call of ListClientOfflineGrants.
func (mr *MockOfflineGrantStoreMockRecorder) ListClientOfflineGrants(ctx, clientID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientOfflineGrants", reflect.TypeOf((*MockOfflineGrantStore)(nil).ListClientOfflineGrants), ctx, clientID, userID)
}

// MockOAuthProviderFactory is a mock of OAuthProviderFactory interface.
type MockOAuthProviderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderFactoryMockRecorder
}

// MockOAuthProviderFactoryMockRecorder is the mock recorder for MockOAuthProviderFactory.
type MockOAuthProviderFactoryMockRecorder struct {
	mock *MockOAuthProviderFactory
}

// NewMockOAuthProviderFactory creates a new mock instance.
func NewMockOAuthProviderFactory(ctrl *gomock.Controller) *MockOAuthProviderFactory {
	mock := &MockOAuthProviderFactory{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProviderFactory) EXPECT() *MockOAuthProviderFactoryMockRecorder {
	return m.recorder
}

// GetAuthorizationURL mocks base method.
func (m *MockOAuthProviderFactory) GetAuthorizationURL(ctx context.Context, alias string, options oauthrelyingparty.GetAuthorizationURLOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationURL", ctx, alias, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationURL indicates an expected call of GetAuthorizationURL.
func (mr *MockOAuthProviderFactoryMockRecorder) GetAuthorizationURL(ctx, alias, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationURL", reflect.TypeOf((*MockOAuthProviderFactory)(nil).GetAuthorizationURL), ctx, alias, options)
}

// GetProviderConfig mocks base method.
func (m *MockOAuthProviderFactory) GetProviderConfig(alias string) (oauthrelyingparty.ProviderConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderConfig", alias)
	ret0, _ := ret[0].(oauthrelyingparty.ProviderConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderConfig indicates an expected call of GetProviderConfig.
func (mr *MockOAuthProviderFactoryMockRecorder) GetProviderConfig(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderConfig", reflect.TypeOf((*MockOAuthProviderFactory)(nil).GetProviderConfig), alias)
}

// GetUserProfile mocks base method.
func (m *MockOAuthProviderFactory) GetUserProfile(ctx context.Context, alias string, options oauthrelyingparty.GetUserProfileOptions) (oauthrelyingparty.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, alias, options)
	ret0, _ := ret[0].(oauthrelyingparty.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockOAuthProviderFactoryMockRecorder) GetUserProfile(ctx, alias, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockOAuthProviderFactory)(nil).GetUserProfile), ctx, alias, options)
}

// MockPasskeyRequestOptionsService is a mock of PasskeyRequestOptionsService interface.
type MockPasskeyRequestOptionsService struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeyRequestOptionsServiceMockRecorder
}

// MockPasskeyRequestOptionsServiceMockRecorder is the mock recorder for MockPasskeyRequestOptionsService.
type MockPasskeyRequestOptionsServiceMockRecorder struct {
	mock *MockPasskeyRequestOptionsService
}

// NewMockPasskeyRequestOptionsService creates a new mock instance.
func NewMockPasskeyRequestOptionsService(ctrl *gomock.Controller) *MockPasskeyRequestOptionsService {
	mock := &MockPasskeyRequestOptionsService{ctrl: ctrl}
	mock.recorder = &MockPasskeyRequestOptionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeyRequestOptionsService) EXPECT() *MockPasskeyRequestOptionsServiceMockRecorder {
	return m.recorder
}

// MakeModalRequestOptions mocks base method.
func (m *MockPasskeyRequestOptionsService) MakeModalRequestOptions(ctx context.Context) (*model.WebAuthnRequestOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeModalRequestOptions", ctx)
	ret0, _ := ret[0].(*model.WebAuthnRequestOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeModalRequestOptions indicates an expected call of MakeModalRequestOptions.
func (mr *MockPasskeyRequestOptionsServiceMockRecorder) MakeModalRequestOptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeModalRequestOptions", reflect.TypeOf((*MockPasskeyRequestOptionsService)(nil).MakeModalRequestOptions), ctx)
}

// MakeModalRequestOptionsWithUser mocks base method.
func (m *MockPasskeyRequestOptionsService) MakeModalRequestOptionsWithUser(ctx context.Context, userID string) (*model.WebAuthnRequestOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeModalRequestOptionsWithUser", ctx, userID)
	ret0, _ := ret[0].(*model.WebAuthnRequestOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeModalRequestOptionsWithUser indicates an expected call of MakeModalRequestOptionsWithUser.
func (mr *MockPasskeyRequestOptionsServiceMockRecorder) MakeModalRequestOptionsWithUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeModalRequestOptionsWithUser", reflect.TypeOf((*MockPasskeyRequestOptionsService)(nil).MakeModalRequestOptionsWithUser), ctx, userID)
}

// MockPasskeyCreationOptionsService is a mock of PasskeyCreationOptionsService interface.
type MockPasskeyCreationOptionsService struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeyCreationOptionsServiceMockRecorder
}

// MockPasskeyCreationOptionsServiceMockRecorder is the mock recorder for MockPasskeyCreationOptionsService.
type MockPasskeyCreationOptionsServiceMockRecorder struct {
	mock *MockPasskeyCreationOptionsService
}

// NewMockPasskeyCreationOptionsService creates a new mock instance.
func NewMockPasskeyCreationOptionsService(ctrl *gomock.Controller) *MockPasskeyCreationOptionsService {
	mock := &MockPasskeyCreationOptionsService{ctrl: ctrl}
	mock.recorder = &MockPasskeyCreationOptionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeyCreationOptionsService) EXPECT() *MockPasskeyCreationOptionsServiceMockRecorder {
	return m.recorder
}

// MakeCreationOptions mocks base method.
func (m *MockPasskeyCreationOptionsService) MakeCreationOptions(ctx context.Context, userID string) (*model.WebAuthnCreationOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeCreationOptions", ctx, userID)
	ret0, _ := ret[0].(*model.WebAuthnCreationOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeCreationOptions indicates an expected call of MakeCreationOptions.
func (mr *MockPasskeyCreationOptionsServiceMockRecorder) MakeCreationOptions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeCreationOptions", reflect.TypeOf((*MockPasskeyCreationOptionsService)(nil).MakeCreationOptions), ctx, userID)
}

// MockPasskeyService is a mock of PasskeyService interface.
type MockPasskeyService struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeyServiceMockRecorder
}

// MockPasskeyServiceMockRecorder is the mock recorder for MockPasskeyService.
type MockPasskeyServiceMockRecorder struct {
	mock *MockPasskeyService
}

// NewMockPasskeyService creates a new mock instance.
func NewMockPasskeyService(ctrl *gomock.Controller) *MockPasskeyService {
	mock := &MockPasskeyService{ctrl: ctrl}
	mock.recorder = &MockPasskeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeyService) EXPECT() *MockPasskeyServiceMockRecorder {
	return m.recorder
}

// ConsumeAssertionResponse mocks base method.
func (m *MockPasskeyService) ConsumeAssertionResponse(ctx context.Context, assertionResponse []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeAssertionResponse", ctx, assertionResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeAssertionResponse indicates an expected call of ConsumeAssertionResponse.
func (mr *MockPasskeyServiceMockRecorder) ConsumeAssertionResponse(ctx, assertionResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeAssertionResponse", reflect.TypeOf((*MockPasskeyService)(nil).ConsumeAssertionResponse), ctx, assertionResponse)
}

// ConsumeAttestationResponse mocks base method.
func (m *MockPasskeyService) ConsumeAttestationResponse(ctx context.Context, attestationResponse []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeAttestationResponse", ctx, attestationResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeAttestationResponse indicates an expected call of ConsumeAttestationResponse.
func (mr *MockPasskeyServiceMockRecorder) ConsumeAttestationResponse(ctx, attestationResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeAttestationResponse", reflect.TypeOf((*MockPasskeyService)(nil).ConsumeAttestationResponse), ctx, attestationResponse)
}

// MockIDTokenService is a mock of IDTokenService interface.
type MockIDTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockIDTokenServiceMockRecorder
}

// MockIDTokenServiceMockRecorder is the mock recorder for MockIDTokenService.
type MockIDTokenServiceMockRecorder struct {
	mock *MockIDTokenService
}

// NewMockIDTokenService creates a new mock instance.
func NewMockIDTokenService(ctrl *gomock.Controller) *MockIDTokenService {
	mock := &MockIDTokenService{ctrl: ctrl}
	mock.recorder = &MockIDTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDTokenService) EXPECT() *MockIDTokenServiceMockRecorder {
	return m.recorder
}

// VerifyIDToken mocks base method.
func (m *MockIDTokenService) VerifyIDToken(idToken string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", idToken)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockIDTokenServiceMockRecorder) VerifyIDToken(idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockIDTokenService)(nil).VerifyIDToken), idToken)
}

// MockLoginIDService is a mock of LoginIDService interface.
type MockLoginIDService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginIDServiceMockRecorder
}

// MockLoginIDServiceMockRecorder is the mock recorder for MockLoginIDService.
type MockLoginIDServiceMockRecorder struct {
	mock *MockLoginIDService
}

// NewMockLoginIDService creates a new mock instance.
func NewMockLoginIDService(ctrl *gomock.Controller) *MockLoginIDService {
	mock := &MockLoginIDService{ctrl: ctrl}
	mock.recorder = &MockLoginIDServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginIDService) EXPECT() *MockLoginIDServiceMockRecorder {
	return m.recorder
}

// CheckAndNormalize mocks base method.
func (m *MockLoginIDService) CheckAndNormalize(ctx context.Context, spec identity.LoginIDSpec) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndNormalize", ctx, spec)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckAndNormalize indicates an expected call of CheckAndNormalize.
func (mr *MockLoginIDServiceMockRecorder) CheckAndNormalize(ctx, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndNormalize", reflect.TypeOf((*MockLoginIDService)(nil).CheckAndNormalize), ctx, spec)
}

// MockLDAPService is a mock of LDAPService interface.
type MockLDAPService struct {
	ctrl     *gomock.Controller
	recorder *MockLDAPServiceMockRecorder
}

// MockLDAPServiceMockRecorder is the mock recorder for MockLDAPService.
type MockLDAPServiceMockRecorder struct {
	mock *MockLDAPService
}

// NewMockLDAPService creates a new mock instance.
func NewMockLDAPService(ctrl *gomock.Controller) *MockLDAPService {
	mock := &MockLDAPService{ctrl: ctrl}
	mock.recorder = &MockLDAPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLDAPService) EXPECT() *MockLDAPServiceMockRecorder {
	return m.recorder
}

// MakeSpecFromEntry mocks base method.
func (m *MockLDAPService) MakeSpecFromEntry(ctx context.Context, serverConfig *config.LDAPServerConfig, loginUsername string, entry *ldap.Entry) (*identity.Spec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSpecFromEntry", ctx, serverConfig, loginUsername, entry)
	ret0, _ := ret[0].(*identity.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeSpecFromEntry indicates an expected call of MakeSpecFromEntry.
func (mr *MockLDAPServiceMockRecorder) MakeSpecFromEntry(ctx, serverConfig, loginUsername, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSpecFromEntry", reflect.TypeOf((*MockLDAPService)(nil).MakeSpecFromEntry), ctx, serverConfig, loginUsername, entry)
}

// MockLDAPClientFactory is a mock of LDAPClientFactory interface.
type MockLDAPClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLDAPClientFactoryMockRecorder
}

// MockLDAPClientFactoryMockRecorder is the mock recorder for MockLDAPClientFactory.
type MockLDAPClientFactoryMockRecorder struct {
	mock *MockLDAPClientFactory
}

// NewMockLDAPClientFactory creates a new mock instance.
func NewMockLDAPClientFactory(ctrl *gomock.Controller) *MockLDAPClientFactory {
	mock := &MockLDAPClientFactory{ctrl: ctrl}
	mock.recorder = &MockLDAPClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLDAPClientFactory) EXPECT() *MockLDAPClientFactoryMockRecorder {
	return m.recorder
}

// MakeClient mocks base method.
func (m *MockLDAPClientFactory) MakeClient(serverConfig *config.LDAPServerConfig) *ldap.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeClient", serverConfig)
	ret0, _ := ret[0].(*ldap.Client)
	return ret0
}

// MakeClient indicates an expected call of MakeClient.
func (mr *MockLDAPClientFactoryMockRecorder) MakeClient(serverConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeClient", reflect.TypeOf((*MockLDAPClientFactory)(nil).MakeClient), serverConfig)
}

// MockUserFacade is a mock of UserFacade interface.
type MockUserFacade struct {
	ctrl     *gomock.Controller
	recorder *MockUserFacadeMockRecorder
}

// MockUserFacadeMockRecorder is the mock recorder for MockUserFacade.
type MockUserFacadeMockRecorder struct {
	mock *MockUserFacade
}

// NewMockUserFacade creates a new mock instance.
func NewMockUserFacade(ctrl *gomock.Controller) *MockUserFacade {
	mock := &MockUserFacade{ctrl: ctrl}
	mock.recorder = &MockUserFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFacade) EXPECT() *MockUserFacadeMockRecorder {
	return m.recorder
}

// GetUserIDsByLoginHint mocks base method.
func (m *MockUserFacade) GetUserIDsByLoginHint(ctx context.Context, hint *oauth.LoginHint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDsByLoginHint", ctx, hint)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDsByLoginHint indicates an expected call of GetUserIDsByLoginHint.
func (mr *MockUserFacadeMockRecorder) GetUserIDsByLoginHint(ctx, hint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDsByLoginHint", reflect.TypeOf((*MockUserFacade)(nil).GetUserIDsByLoginHint), ctx, hint)
}
