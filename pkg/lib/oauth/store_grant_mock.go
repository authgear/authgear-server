// Code generated by MockGen. DO NOT EDIT.
// Source: store_grant.go

// Package oauth is a generated GoMock package.
package oauth

import (
	reflect "reflect"
	time "time"

	access "github.com/authgear/authgear-server/pkg/lib/session/access"
	idpsession "github.com/authgear/authgear-server/pkg/lib/session/idpsession"
	gomock "github.com/golang/mock/gomock"
)

// MockCodeGrantStore is a mock of CodeGrantStore interface.
type MockCodeGrantStore struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGrantStoreMockRecorder
}

// MockCodeGrantStoreMockRecorder is the mock recorder for MockCodeGrantStore.
type MockCodeGrantStoreMockRecorder struct {
	mock *MockCodeGrantStore
}

// NewMockCodeGrantStore creates a new mock instance.
func NewMockCodeGrantStore(ctrl *gomock.Controller) *MockCodeGrantStore {
	mock := &MockCodeGrantStore{ctrl: ctrl}
	mock.recorder = &MockCodeGrantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeGrantStore) EXPECT() *MockCodeGrantStoreMockRecorder {
	return m.recorder
}

// CreateCodeGrant mocks base method.
func (m *MockCodeGrantStore) CreateCodeGrant(arg0 *CodeGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodeGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCodeGrant indicates an expected call of CreateCodeGrant.
func (mr *MockCodeGrantStoreMockRecorder) CreateCodeGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodeGrant", reflect.TypeOf((*MockCodeGrantStore)(nil).CreateCodeGrant), arg0)
}

// DeleteCodeGrant mocks base method.
func (m *MockCodeGrantStore) DeleteCodeGrant(arg0 *CodeGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodeGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCodeGrant indicates an expected call of DeleteCodeGrant.
func (mr *MockCodeGrantStoreMockRecorder) DeleteCodeGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodeGrant", reflect.TypeOf((*MockCodeGrantStore)(nil).DeleteCodeGrant), arg0)
}

// GetCodeGrant mocks base method.
func (m *MockCodeGrantStore) GetCodeGrant(codeHash string) (*CodeGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeGrant", codeHash)
	ret0, _ := ret[0].(*CodeGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeGrant indicates an expected call of GetCodeGrant.
func (mr *MockCodeGrantStoreMockRecorder) GetCodeGrant(codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeGrant", reflect.TypeOf((*MockCodeGrantStore)(nil).GetCodeGrant), codeHash)
}

// MockSettingsActionGrantStore is a mock of SettingsActionGrantStore interface.
type MockSettingsActionGrantStore struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsActionGrantStoreMockRecorder
}

// MockSettingsActionGrantStoreMockRecorder is the mock recorder for MockSettingsActionGrantStore.
type MockSettingsActionGrantStoreMockRecorder struct {
	mock *MockSettingsActionGrantStore
}

// NewMockSettingsActionGrantStore creates a new mock instance.
func NewMockSettingsActionGrantStore(ctrl *gomock.Controller) *MockSettingsActionGrantStore {
	mock := &MockSettingsActionGrantStore{ctrl: ctrl}
	mock.recorder = &MockSettingsActionGrantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsActionGrantStore) EXPECT() *MockSettingsActionGrantStoreMockRecorder {
	return m.recorder
}

// CreateSettingsActionGrant mocks base method.
func (m *MockSettingsActionGrantStore) CreateSettingsActionGrant(arg0 *SettingsActionGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSettingsActionGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSettingsActionGrant indicates an expected call of CreateSettingsActionGrant.
func (mr *MockSettingsActionGrantStoreMockRecorder) CreateSettingsActionGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSettingsActionGrant", reflect.TypeOf((*MockSettingsActionGrantStore)(nil).CreateSettingsActionGrant), arg0)
}

// DeleteSettingsActionGrant mocks base method.
func (m *MockSettingsActionGrantStore) DeleteSettingsActionGrant(arg0 *SettingsActionGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSettingsActionGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSettingsActionGrant indicates an expected call of DeleteSettingsActionGrant.
func (mr *MockSettingsActionGrantStoreMockRecorder) DeleteSettingsActionGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSettingsActionGrant", reflect.TypeOf((*MockSettingsActionGrantStore)(nil).DeleteSettingsActionGrant), arg0)
}

// GetSettingsActionGrant mocks base method.
func (m *MockSettingsActionGrantStore) GetSettingsActionGrant(codeHash string) (*SettingsActionGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsActionGrant", codeHash)
	ret0, _ := ret[0].(*SettingsActionGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsActionGrant indicates an expected call of GetSettingsActionGrant.
func (mr *MockSettingsActionGrantStoreMockRecorder) GetSettingsActionGrant(codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsActionGrant", reflect.TypeOf((*MockSettingsActionGrantStore)(nil).GetSettingsActionGrant), codeHash)
}

// MockOfflineGrantStore is a mock of OfflineGrantStore interface.
type MockOfflineGrantStore struct {
	ctrl     *gomock.Controller
	recorder *MockOfflineGrantStoreMockRecorder
}

// MockOfflineGrantStoreMockRecorder is the mock recorder for MockOfflineGrantStore.
type MockOfflineGrantStoreMockRecorder struct {
	mock *MockOfflineGrantStore
}

// NewMockOfflineGrantStore creates a new mock instance.
func NewMockOfflineGrantStore(ctrl *gomock.Controller) *MockOfflineGrantStore {
	mock := &MockOfflineGrantStore{ctrl: ctrl}
	mock.recorder = &MockOfflineGrantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfflineGrantStore) EXPECT() *MockOfflineGrantStoreMockRecorder {
	return m.recorder
}

// AccessOfflineGrantAndUpdateDeviceInfo mocks base method.
func (m *MockOfflineGrantStore) AccessOfflineGrantAndUpdateDeviceInfo(id string, accessEvent access.Event, deviceInfo map[string]interface{}, expireAt time.Time) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessOfflineGrantAndUpdateDeviceInfo", id, accessEvent, deviceInfo, expireAt)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessOfflineGrantAndUpdateDeviceInfo indicates an expected call of AccessOfflineGrantAndUpdateDeviceInfo.
func (mr *MockOfflineGrantStoreMockRecorder) AccessOfflineGrantAndUpdateDeviceInfo(id, accessEvent, deviceInfo, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessOfflineGrantAndUpdateDeviceInfo", reflect.TypeOf((*MockOfflineGrantStore)(nil).AccessOfflineGrantAndUpdateDeviceInfo), id, accessEvent, deviceInfo, expireAt)
}

// AccessWithID mocks base method.
func (m *MockOfflineGrantStore) AccessWithID(id string, accessEvent access.Event, expireAt time.Time) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessWithID", id, accessEvent, expireAt)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessWithID indicates an expected call of AccessWithID.
func (mr *MockOfflineGrantStoreMockRecorder) AccessWithID(id, accessEvent, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessWithID", reflect.TypeOf((*MockOfflineGrantStore)(nil).AccessWithID), id, accessEvent, expireAt)
}

// AddOfflineGrantRefreshToken mocks base method.
func (m *MockOfflineGrantStore) AddOfflineGrantRefreshToken(grantID string, expireAt time.Time, tokenHash, clientID string, scopes []string, authorizationID string) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfflineGrantRefreshToken", grantID, expireAt, tokenHash, clientID, scopes, authorizationID)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOfflineGrantRefreshToken indicates an expected call of AddOfflineGrantRefreshToken.
func (mr *MockOfflineGrantStoreMockRecorder) AddOfflineGrantRefreshToken(grantID, expireAt, tokenHash, clientID, scopes, authorizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfflineGrantRefreshToken", reflect.TypeOf((*MockOfflineGrantStore)(nil).AddOfflineGrantRefreshToken), grantID, expireAt, tokenHash, clientID, scopes, authorizationID)
}

// CreateOfflineGrant mocks base method.
func (m *MockOfflineGrantStore) CreateOfflineGrant(offlineGrant *OfflineGrant, expireAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfflineGrant", offlineGrant, expireAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOfflineGrant indicates an expected call of CreateOfflineGrant.
func (mr *MockOfflineGrantStoreMockRecorder) CreateOfflineGrant(offlineGrant, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfflineGrant", reflect.TypeOf((*MockOfflineGrantStore)(nil).CreateOfflineGrant), offlineGrant, expireAt)
}

// DeleteOfflineGrant mocks base method.
func (m *MockOfflineGrantStore) DeleteOfflineGrant(arg0 *OfflineGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfflineGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfflineGrant indicates an expected call of DeleteOfflineGrant.
func (mr *MockOfflineGrantStoreMockRecorder) DeleteOfflineGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfflineGrant", reflect.TypeOf((*MockOfflineGrantStore)(nil).DeleteOfflineGrant), arg0)
}

// GetOfflineGrant mocks base method.
func (m *MockOfflineGrantStore) GetOfflineGrant(id string) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfflineGrant", id)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfflineGrant indicates an expected call of GetOfflineGrant.
func (mr *MockOfflineGrantStoreMockRecorder) GetOfflineGrant(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfflineGrant", reflect.TypeOf((*MockOfflineGrantStore)(nil).GetOfflineGrant), id)
}

// ListClientOfflineGrants mocks base method.
func (m *MockOfflineGrantStore) ListClientOfflineGrants(clientID, userID string) ([]*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientOfflineGrants", clientID, userID)
	ret0, _ := ret[0].([]*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientOfflineGrants indicates an expected call of ListClientOfflineGrants.
func (mr *MockOfflineGrantStoreMockRecorder) ListClientOfflineGrants(clientID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientOfflineGrants", reflect.TypeOf((*MockOfflineGrantStore)(nil).ListClientOfflineGrants), clientID, userID)
}

// ListOfflineGrants mocks base method.
func (m *MockOfflineGrantStore) ListOfflineGrants(userID string) ([]*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfflineGrants", userID)
	ret0, _ := ret[0].([]*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfflineGrants indicates an expected call of ListOfflineGrants.
func (mr *MockOfflineGrantStoreMockRecorder) ListOfflineGrants(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfflineGrants", reflect.TypeOf((*MockOfflineGrantStore)(nil).ListOfflineGrants), userID)
}

// RemoveOfflineGrantRefreshTokens mocks base method.
func (m *MockOfflineGrantStore) RemoveOfflineGrantRefreshTokens(grantID string, tokenHashes []string, expireAt time.Time) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOfflineGrantRefreshTokens", grantID, tokenHashes, expireAt)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOfflineGrantRefreshTokens indicates an expected call of RemoveOfflineGrantRefreshTokens.
func (mr *MockOfflineGrantStoreMockRecorder) RemoveOfflineGrantRefreshTokens(grantID, tokenHashes, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOfflineGrantRefreshTokens", reflect.TypeOf((*MockOfflineGrantStore)(nil).RemoveOfflineGrantRefreshTokens), grantID, tokenHashes, expireAt)
}

// UpdateOfflineGrantApp2AppDeviceKey mocks base method.
func (m *MockOfflineGrantStore) UpdateOfflineGrantApp2AppDeviceKey(id, newKey string, expireAt time.Time) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfflineGrantApp2AppDeviceKey", id, newKey, expireAt)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfflineGrantApp2AppDeviceKey indicates an expected call of UpdateOfflineGrantApp2AppDeviceKey.
func (mr *MockOfflineGrantStoreMockRecorder) UpdateOfflineGrantApp2AppDeviceKey(id, newKey, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfflineGrantApp2AppDeviceKey", reflect.TypeOf((*MockOfflineGrantStore)(nil).UpdateOfflineGrantApp2AppDeviceKey), id, newKey, expireAt)
}

// UpdateOfflineGrantAuthenticatedAt mocks base method.
func (m *MockOfflineGrantStore) UpdateOfflineGrantAuthenticatedAt(id string, authenticatedAt, expireAt time.Time) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfflineGrantAuthenticatedAt", id, authenticatedAt, expireAt)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfflineGrantAuthenticatedAt indicates an expected call of UpdateOfflineGrantAuthenticatedAt.
func (mr *MockOfflineGrantStoreMockRecorder) UpdateOfflineGrantAuthenticatedAt(id, authenticatedAt, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfflineGrantAuthenticatedAt", reflect.TypeOf((*MockOfflineGrantStore)(nil).UpdateOfflineGrantAuthenticatedAt), id, authenticatedAt, expireAt)
}

// UpdateOfflineGrantDeviceSecretHash mocks base method.
func (m *MockOfflineGrantStore) UpdateOfflineGrantDeviceSecretHash(grantID, newDeviceSecretHash string, expireAt time.Time) (*OfflineGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfflineGrantDeviceSecretHash", grantID, newDeviceSecretHash, expireAt)
	ret0, _ := ret[0].(*OfflineGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfflineGrantDeviceSecretHash indicates an expected call of UpdateOfflineGrantDeviceSecretHash.
func (mr *MockOfflineGrantStoreMockRecorder) UpdateOfflineGrantDeviceSecretHash(grantID, newDeviceSecretHash, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfflineGrantDeviceSecretHash", reflect.TypeOf((*MockOfflineGrantStore)(nil).UpdateOfflineGrantDeviceSecretHash), grantID, newDeviceSecretHash, expireAt)
}

// MockIDPSessionProvider is a mock of IDPSessionProvider interface.
type MockIDPSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIDPSessionProviderMockRecorder
}

// MockIDPSessionProviderMockRecorder is the mock recorder for MockIDPSessionProvider.
type MockIDPSessionProviderMockRecorder struct {
	mock *MockIDPSessionProvider
}

// NewMockIDPSessionProvider creates a new mock instance.
func NewMockIDPSessionProvider(ctrl *gomock.Controller) *MockIDPSessionProvider {
	mock := &MockIDPSessionProvider{ctrl: ctrl}
	mock.recorder = &MockIDPSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDPSessionProvider) EXPECT() *MockIDPSessionProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIDPSessionProvider) Get(id string) (*idpsession.IDPSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*idpsession.IDPSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIDPSessionProviderMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDPSessionProvider)(nil).Get), id)
}

// MockAccessGrantStore is a mock of AccessGrantStore interface.
type MockAccessGrantStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccessGrantStoreMockRecorder
}

// MockAccessGrantStoreMockRecorder is the mock recorder for MockAccessGrantStore.
type MockAccessGrantStoreMockRecorder struct {
	mock *MockAccessGrantStore
}

// NewMockAccessGrantStore creates a new mock instance.
func NewMockAccessGrantStore(ctrl *gomock.Controller) *MockAccessGrantStore {
	mock := &MockAccessGrantStore{ctrl: ctrl}
	mock.recorder = &MockAccessGrantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessGrantStore) EXPECT() *MockAccessGrantStoreMockRecorder {
	return m.recorder
}

// CreateAccessGrant mocks base method.
func (m *MockAccessGrantStore) CreateAccessGrant(arg0 *AccessGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessGrant indicates an expected call of CreateAccessGrant.
func (mr *MockAccessGrantStoreMockRecorder) CreateAccessGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrant", reflect.TypeOf((*MockAccessGrantStore)(nil).CreateAccessGrant), arg0)
}

// DeleteAccessGrant mocks base method.
func (m *MockAccessGrantStore) DeleteAccessGrant(arg0 *AccessGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessGrant indicates an expected call of DeleteAccessGrant.
func (mr *MockAccessGrantStoreMockRecorder) DeleteAccessGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrant", reflect.TypeOf((*MockAccessGrantStore)(nil).DeleteAccessGrant), arg0)
}

// GetAccessGrant mocks base method.
func (m *MockAccessGrantStore) GetAccessGrant(tokenHash string) (*AccessGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrant", tokenHash)
	ret0, _ := ret[0].(*AccessGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrant indicates an expected call of GetAccessGrant.
func (mr *MockAccessGrantStoreMockRecorder) GetAccessGrant(tokenHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrant", reflect.TypeOf((*MockAccessGrantStore)(nil).GetAccessGrant), tokenHash)
}

// MockAppSessionStore is a mock of AppSessionStore interface.
type MockAppSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppSessionStoreMockRecorder
}

// MockAppSessionStoreMockRecorder is the mock recorder for MockAppSessionStore.
type MockAppSessionStoreMockRecorder struct {
	mock *MockAppSessionStore
}

// NewMockAppSessionStore creates a new mock instance.
func NewMockAppSessionStore(ctrl *gomock.Controller) *MockAppSessionStore {
	mock := &MockAppSessionStore{ctrl: ctrl}
	mock.recorder = &MockAppSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppSessionStore) EXPECT() *MockAppSessionStoreMockRecorder {
	return m.recorder
}

// CreateAppSession mocks base method.
func (m *MockAppSessionStore) CreateAppSession(arg0 *AppSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppSession indicates an expected call of CreateAppSession.
func (mr *MockAppSessionStoreMockRecorder) CreateAppSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppSession", reflect.TypeOf((*MockAppSessionStore)(nil).CreateAppSession), arg0)
}

// DeleteAppSession mocks base method.
func (m *MockAppSessionStore) DeleteAppSession(arg0 *AppSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppSession indicates an expected call of DeleteAppSession.
func (mr *MockAppSessionStoreMockRecorder) DeleteAppSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppSession", reflect.TypeOf((*MockAppSessionStore)(nil).DeleteAppSession), arg0)
}

// GetAppSession mocks base method.
func (m *MockAppSessionStore) GetAppSession(tokenHash string) (*AppSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSession", tokenHash)
	ret0, _ := ret[0].(*AppSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSession indicates an expected call of GetAppSession.
func (mr *MockAppSessionStoreMockRecorder) GetAppSession(tokenHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSession", reflect.TypeOf((*MockAppSessionStore)(nil).GetAppSession), tokenHash)
}

// MockAppSessionTokenStore is a mock of AppSessionTokenStore interface.
type MockAppSessionTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppSessionTokenStoreMockRecorder
}

// MockAppSessionTokenStoreMockRecorder is the mock recorder for MockAppSessionTokenStore.
type MockAppSessionTokenStoreMockRecorder struct {
	mock *MockAppSessionTokenStore
}

// NewMockAppSessionTokenStore creates a new mock instance.
func NewMockAppSessionTokenStore(ctrl *gomock.Controller) *MockAppSessionTokenStore {
	mock := &MockAppSessionTokenStore{ctrl: ctrl}
	mock.recorder = &MockAppSessionTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppSessionTokenStore) EXPECT() *MockAppSessionTokenStoreMockRecorder {
	return m.recorder
}

// CreateAppSessionToken mocks base method.
func (m *MockAppSessionTokenStore) CreateAppSessionToken(arg0 *AppSessionToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppSessionToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppSessionToken indicates an expected call of CreateAppSessionToken.
func (mr *MockAppSessionTokenStoreMockRecorder) CreateAppSessionToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppSessionToken", reflect.TypeOf((*MockAppSessionTokenStore)(nil).CreateAppSessionToken), arg0)
}

// DeleteAppSessionToken mocks base method.
func (m *MockAppSessionTokenStore) DeleteAppSessionToken(arg0 *AppSessionToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppSessionToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppSessionToken indicates an expected call of DeleteAppSessionToken.
func (mr *MockAppSessionTokenStoreMockRecorder) DeleteAppSessionToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppSessionToken", reflect.TypeOf((*MockAppSessionTokenStore)(nil).DeleteAppSessionToken), arg0)
}

// GetAppSessionToken mocks base method.
func (m *MockAppSessionTokenStore) GetAppSessionToken(tokenHash string) (*AppSessionToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSessionToken", tokenHash)
	ret0, _ := ret[0].(*AppSessionToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSessionToken indicates an expected call of GetAppSessionToken.
func (mr *MockAppSessionTokenStoreMockRecorder) GetAppSessionToken(tokenHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSessionToken", reflect.TypeOf((*MockAppSessionTokenStore)(nil).GetAppSessionToken), tokenHash)
}

// MockAppInitiatedSSOToWebTokenStore is a mock of AppInitiatedSSOToWebTokenStore interface.
type MockAppInitiatedSSOToWebTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppInitiatedSSOToWebTokenStoreMockRecorder
}

// MockAppInitiatedSSOToWebTokenStoreMockRecorder is the mock recorder for MockAppInitiatedSSOToWebTokenStore.
type MockAppInitiatedSSOToWebTokenStoreMockRecorder struct {
	mock *MockAppInitiatedSSOToWebTokenStore
}

// NewMockAppInitiatedSSOToWebTokenStore creates a new mock instance.
func NewMockAppInitiatedSSOToWebTokenStore(ctrl *gomock.Controller) *MockAppInitiatedSSOToWebTokenStore {
	mock := &MockAppInitiatedSSOToWebTokenStore{ctrl: ctrl}
	mock.recorder = &MockAppInitiatedSSOToWebTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInitiatedSSOToWebTokenStore) EXPECT() *MockAppInitiatedSSOToWebTokenStoreMockRecorder {
	return m.recorder
}

// CreateAppInitiatedSSOToWebToken mocks base method.
func (m *MockAppInitiatedSSOToWebTokenStore) CreateAppInitiatedSSOToWebToken(arg0 *AppInitiatedSSOToWebToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInitiatedSSOToWebToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppInitiatedSSOToWebToken indicates an expected call of CreateAppInitiatedSSOToWebToken.
func (mr *MockAppInitiatedSSOToWebTokenStoreMockRecorder) CreateAppInitiatedSSOToWebToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInitiatedSSOToWebToken", reflect.TypeOf((*MockAppInitiatedSSOToWebTokenStore)(nil).CreateAppInitiatedSSOToWebToken), arg0)
}

// GetAppInitiatedSSOToWebToken mocks base method.
func (m *MockAppInitiatedSSOToWebTokenStore) GetAppInitiatedSSOToWebToken(tokenHash string) (*AppInitiatedSSOToWebToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInitiatedSSOToWebToken", tokenHash)
	ret0, _ := ret[0].(*AppInitiatedSSOToWebToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppInitiatedSSOToWebToken indicates an expected call of GetAppInitiatedSSOToWebToken.
func (mr *MockAppInitiatedSSOToWebTokenStoreMockRecorder) GetAppInitiatedSSOToWebToken(tokenHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInitiatedSSOToWebToken", reflect.TypeOf((*MockAppInitiatedSSOToWebTokenStore)(nil).GetAppInitiatedSSOToWebToken), tokenHash)
}
