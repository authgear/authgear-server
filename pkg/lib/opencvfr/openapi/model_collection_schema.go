/*
OpenCV Face Recognition

 OpenCV Face Recognition allows you to either **manually** (through our [Developer Portal](https://developer.opencv.fr) UI) or **programmatically** (through our SDKs or REST API) detect, recognize, and verify faces in images. It is based on state-of-the-art (SOTA) algorithms and uses deep learning face recognition models. The API is designed to be easy to use and integrate into your applications. It is available as this hosted service or you can deploy it yourself on your own servers.  There are four ways that you can use the product: - Using the [Face Recognition Developer Portal](https://developer.opencv.fr) User Interface to manage your **Developer** teams, **Persons** who are registered for the search API to recognize, and **Collections** - groups of persons. - Using the [Python Face Recognition SDK](https://docs.opencv.fr/python) to integrate the API into your Python applications. - Using the [C++ Face Recognition SDK](https://docs.opencv.fr/cpp) to integrate the API into your C++ applications. - Using the REST API (below) to integrate the API functionality into your applications in other languages.  To use the REST API described below, you will need to create an account and obtain an API key. You can do this by signing up for a free account at [Face Recognition Developer Portal](https://developer.opencv.fr).  Once you have signed up, you will see an **API Developer Key** in the Dashboard. This is the key that you will use to authenticate your requests to the API. You can also create additional Developers (each with their own key) for your applications.  To use the API, you will need to send the API key in the `X-API-Key` header of each request. For example, using `curl`: ``` curl -X GET \"https://<region>.opencv.fr/persons\" -H \"accept: application/json\" -H \"X-API-Key: <your API key>\" ```  `<region>` is the data storage region that you selected when you created your account. It can be `us`, `eu`, or `sg`.  To help you try out the functionality quickly, the below live docs include a **Try it out** button for each endpoint. This will allow you to send a request to the API and see the response. Before you can use this, you will need to grab your API key from the Dashboard and enter it into the field that shows up when you click the green **Authorize** button (below this line on the right).

API version: 2024.07.05.1135
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); EDIT AT YOUR OWN RISK

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CollectionSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionSchema{}

// CollectionSchema struct for CollectionSchema
type CollectionSchema struct {
	Id           string  `json:"id"`
	Name         string  `json:"name"`
	Count        int32   `json:"count"`
	Description  string  `json:"description"`
	CreateDate   APITime `json:"create_date"`
	ModifiedDate APITime `json:"modified_date"`
}

type _CollectionSchema CollectionSchema

// NewCollectionSchema instantiates a new CollectionSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionSchema(id string, name string, count int32, description string, createDate time.Time, modifiedDate time.Time) *CollectionSchema {
	this := CollectionSchema{}
	this.Id = id
	this.Name = name
	this.Count = count
	this.Description = description
	this.CreateDate = APITime(createDate)
	this.ModifiedDate = APITime(modifiedDate)
	return &this
}

// NewCollectionSchemaWithDefaults instantiates a new CollectionSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionSchemaWithDefaults() *CollectionSchema {
	this := CollectionSchema{}
	return &this
}

// GetId returns the Id field value
func (o *CollectionSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CollectionSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CollectionSchema) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CollectionSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CollectionSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CollectionSchema) SetName(v string) {
	o.Name = v
}

// GetCount returns the Count field value
func (o *CollectionSchema) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CollectionSchema) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *CollectionSchema) SetCount(v int32) {
	o.Count = v
}

// GetCreateDate returns the CreateDate field value
func (o *CollectionSchema) GetCreateDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreateDate.ToTime()
}

// GetCreateDateOk returns a tuple with the CreateDate field value
// and a boolean to check if the value has been set.
func (o *CollectionSchema) GetCreateDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	t := o.CreateDate.ToTime()
	return &t, true
}

// SetCreateDate sets field value
func (o *CollectionSchema) SetCreateDate(v time.Time) {
	o.CreateDate = APITime(v)
}

// GetModifiedDate returns the ModifiedDate field value
func (o *CollectionSchema) GetModifiedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedDate.ToTime()
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value
// and a boolean to check if the value has been set.
func (o *CollectionSchema) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	t := o.ModifiedDate.ToTime()
	return &t, true
}

// SetModifiedDate sets field value
func (o *CollectionSchema) SetModifiedDate(v time.Time) {
	o.ModifiedDate = APITime(v)
}

func (o CollectionSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["count"] = o.Count
	toSerialize["description"] = o.Description
	toSerialize["create_date"] = o.CreateDate
	toSerialize["modified_date"] = o.ModifiedDate
	return toSerialize, nil
}

func (o *CollectionSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"count",
		"create_date",
		"modified_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCollectionSchema := _CollectionSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCollectionSchema)

	if err != nil {
		return err
	}

	*o = CollectionSchema(varCollectionSchema)

	return err
}

type NullableCollectionSchema struct {
	value *CollectionSchema
	isSet bool
}

func (v NullableCollectionSchema) Get() *CollectionSchema {
	return v.value
}

func (v *NullableCollectionSchema) Set(val *CollectionSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionSchema(val *CollectionSchema) *NullableCollectionSchema {
	return &NullableCollectionSchema{value: val, isSet: true}
}

func (v NullableCollectionSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
