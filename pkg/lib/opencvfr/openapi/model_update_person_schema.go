/*
OpenCV Face Recognition

 OpenCV Face Recognition allows you to either **manually** (through our [Developer Portal](https://developer.opencv.fr) UI) or **programmatically** (through our SDKs or REST API) detect, recognize, and verify faces in images. It is based on state-of-the-art (SOTA) algorithms and uses deep learning face recognition models. The API is designed to be easy to use and integrate into your applications. It is available as this hosted service or you can deploy it yourself on your own servers.  There are four ways that you can use the product: - Using the [Face Recognition Developer Portal](https://developer.opencv.fr) User Interface to manage your **Developer** teams, **Persons** who are registered for the search API to recognize, and **Collections** - groups of persons. - Using the [Python Face Recognition SDK](https://docs.opencv.fr/python) to integrate the API into your Python applications. - Using the [C++ Face Recognition SDK](https://docs.opencv.fr/cpp) to integrate the API into your C++ applications. - Using the REST API (below) to integrate the API functionality into your applications in other languages.  To use the REST API described below, you will need to create an account and obtain an API key. You can do this by signing up for a free account at [Face Recognition Developer Portal](https://developer.opencv.fr).  Once you have signed up, you will see an **API Developer Key** in the Dashboard. This is the key that you will use to authenticate your requests to the API. You can also create additional Developers (each with their own key) for your applications.  To use the API, you will need to send the API key in the `X-API-Key` header of each request. For example, using `curl`: ``` curl -X GET \"https://<region>.opencv.fr/persons\" -H \"accept: application/json\" -H \"X-API-Key: <your API key>\" ```  `<region>` is the data storage region that you selected when you created your account. It can be `us`, `eu`, or `sg`.  To help you try out the functionality quickly, the below live docs include a **Try it out** button for each endpoint. This will allow you to send a request to the API and see the response. Before you can use this, you will need to grab your API key from the Dashboard and enter it into the field that shows up when you click the green **Authorize** button (below this line on the right). 

API version: 2024.07.05.1135
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdatePersonSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePersonSchema{}

// UpdatePersonSchema struct for UpdatePersonSchema
type UpdatePersonSchema struct {
	Id string `json:"id"`
	Name NullableString `json:"name,omitempty"`
	Images []string `json:"images,omitempty"`
	Gender NullableGenderEnum `json:"gender,omitempty"`
	DateOfBirth NullableString `json:"date_of_birth,omitempty"`
	Nationality NullableString `json:"nationality,omitempty"`
	Collections []string `json:"collections,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
}

type _UpdatePersonSchema UpdatePersonSchema

// NewUpdatePersonSchema instantiates a new UpdatePersonSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePersonSchema(id string) *UpdatePersonSchema {
	this := UpdatePersonSchema{}
	this.Id = id
	return &this
}

// NewUpdatePersonSchemaWithDefaults instantiates a new UpdatePersonSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePersonSchemaWithDefaults() *UpdatePersonSchema {
	this := UpdatePersonSchema{}
	return &this
}

// GetId returns the Id field value
func (o *UpdatePersonSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdatePersonSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdatePersonSchema) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdatePersonSchema) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdatePersonSchema) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdatePersonSchema) UnsetName() {
	o.Name.Unset()
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetImages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *UpdatePersonSchema) SetImages(v []string) {
	o.Images = v
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetGender() GenderEnum {
	if o == nil || IsNil(o.Gender.Get()) {
		var ret GenderEnum
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetGenderOk() (*GenderEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableGenderEnum and assigns it to the Gender field.
func (o *UpdatePersonSchema) SetGender(v GenderEnum) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *UpdatePersonSchema) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *UpdatePersonSchema) UnsetGender() {
	o.Gender.Unset()
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth.Get()) {
		var ret string
		return ret
	}
	return *o.DateOfBirth.Get()
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateOfBirth.Get(), o.DateOfBirth.IsSet()
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth.IsSet() {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given NullableString and assigns it to the DateOfBirth field.
func (o *UpdatePersonSchema) SetDateOfBirth(v string) {
	o.DateOfBirth.Set(&v)
}
// SetDateOfBirthNil sets the value for DateOfBirth to be an explicit nil
func (o *UpdatePersonSchema) SetDateOfBirthNil() {
	o.DateOfBirth.Set(nil)
}

// UnsetDateOfBirth ensures that no value is present for DateOfBirth, not even an explicit nil
func (o *UpdatePersonSchema) UnsetDateOfBirth() {
	o.DateOfBirth.Unset()
}

// GetNationality returns the Nationality field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetNationality() string {
	if o == nil || IsNil(o.Nationality.Get()) {
		var ret string
		return ret
	}
	return *o.Nationality.Get()
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetNationalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nationality.Get(), o.Nationality.IsSet()
}

// HasNationality returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasNationality() bool {
	if o != nil && o.Nationality.IsSet() {
		return true
	}

	return false
}

// SetNationality gets a reference to the given NullableString and assigns it to the Nationality field.
func (o *UpdatePersonSchema) SetNationality(v string) {
	o.Nationality.Set(&v)
}
// SetNationalityNil sets the value for Nationality to be an explicit nil
func (o *UpdatePersonSchema) SetNationalityNil() {
	o.Nationality.Set(nil)
}

// UnsetNationality ensures that no value is present for Nationality, not even an explicit nil
func (o *UpdatePersonSchema) UnsetNationality() {
	o.Nationality.Unset()
}

// GetCollections returns the Collections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetCollections() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetCollectionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Collections) {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasCollections() bool {
	if o != nil && !IsNil(o.Collections) {
		return true
	}

	return false
}

// SetCollections gets a reference to the given []string and assigns it to the Collections field.
func (o *UpdatePersonSchema) SetCollections(v []string) {
	o.Collections = v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePersonSchema) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePersonSchema) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *UpdatePersonSchema) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *UpdatePersonSchema) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *UpdatePersonSchema) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *UpdatePersonSchema) UnsetNotes() {
	o.Notes.Unset()
}

func (o UpdatePersonSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePersonSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	if o.DateOfBirth.IsSet() {
		toSerialize["date_of_birth"] = o.DateOfBirth.Get()
	}
	if o.Nationality.IsSet() {
		toSerialize["nationality"] = o.Nationality.Get()
	}
	if o.Collections != nil {
		toSerialize["collections"] = o.Collections
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	return toSerialize, nil
}

func (o *UpdatePersonSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePersonSchema := _UpdatePersonSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatePersonSchema)

	if err != nil {
		return err
	}

	*o = UpdatePersonSchema(varUpdatePersonSchema)

	return err
}

type NullableUpdatePersonSchema struct {
	value *UpdatePersonSchema
	isSet bool
}

func (v NullableUpdatePersonSchema) Get() *UpdatePersonSchema {
	return v.value
}

func (v *NullableUpdatePersonSchema) Set(val *UpdatePersonSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePersonSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePersonSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePersonSchema(val *UpdatePersonSchema) *NullableUpdatePersonSchema {
	return &NullableUpdatePersonSchema{value: val, isSet: true}
}

func (v NullableUpdatePersonSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePersonSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


