/*
OpenCV Face Recognition

 OpenCV Face Recognition allows you to either **manually** (through our [Developer Portal](https://developer.opencv.fr) UI) or **programmatically** (through our SDKs or REST API) detect, recognize, and verify faces in images. It is based on state-of-the-art (SOTA) algorithms and uses deep learning face recognition models. The API is designed to be easy to use and integrate into your applications. It is available as this hosted service or you can deploy it yourself on your own servers.  There are four ways that you can use the product: - Using the [Face Recognition Developer Portal](https://developer.opencv.fr) User Interface to manage your **Developer** teams, **Persons** who are registered for the search API to recognize, and **Collections** - groups of persons. - Using the [Python Face Recognition SDK](https://docs.opencv.fr/python) to integrate the API into your Python applications. - Using the [C++ Face Recognition SDK](https://docs.opencv.fr/cpp) to integrate the API into your C++ applications. - Using the REST API (below) to integrate the API functionality into your applications in other languages.  To use the REST API described below, you will need to create an account and obtain an API key. You can do this by signing up for a free account at [Face Recognition Developer Portal](https://developer.opencv.fr).  Once you have signed up, you will see an **API Developer Key** in the Dashboard. This is the key that you will use to authenticate your requests to the API. You can also create additional Developers (each with their own key) for your applications.  To use the API, you will need to send the API key in the `X-API-Key` header of each request. For example, using `curl`: ``` curl -X GET \"https://<region>.opencv.fr/persons\" -H \"accept: application/json\" -H \"X-API-Key: <your API key>\" ```  `<region>` is the data storage region that you selected when you created your account. It can be `us`, `eu`, or `sg`.  To help you try out the functionality quickly, the below live docs include a **Try it out** button for each endpoint. This will allow you to send a request to the API and see the response. Before you can use this, you will need to grab your API key from the Dashboard and enter it into the field that shows up when you click the green **Authorize** button (below this line on the right).

API version: 2024.07.05.1135
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderEnum the model 'OrderEnum'
type OrderEnum string

// List of OrderEnum
const (
	ASC  OrderEnum = "ASC"
	DESC OrderEnum = "DESC"
)

// All allowed values of OrderEnum enum
var AllowedOrderEnumEnumValues = []OrderEnum{
	"ASC",
	"DESC",
}

func (v *OrderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderEnum(value)
	for _, existing := range AllowedOrderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderEnum", value)
}

// NewOrderEnumFromValue returns a pointer to a valid OrderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderEnumFromValue(v string) (*OrderEnum, error) {
	ev := OrderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderEnum: valid values are %v", v, AllowedOrderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderEnum) IsValid() bool {
	for _, existing := range AllowedOrderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderEnum value
func (v OrderEnum) Ptr() *OrderEnum {
	return &v
}

type NullableOrderEnum struct {
	value *OrderEnum
	isSet bool
}

func (v NullableOrderEnum) Get() *OrderEnum {
	return v.value
}

func (v *NullableOrderEnum) Set(val *OrderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderEnum(val *OrderEnum) *NullableOrderEnum {
	return &NullableOrderEnum{value: val, isSet: true}
}

func (v NullableOrderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
