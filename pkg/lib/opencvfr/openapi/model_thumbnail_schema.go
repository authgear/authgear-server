/*
OpenCV Face Recognition

 OpenCV Face Recognition allows you to either **manually** (through our [Developer Portal](https://developer.opencv.fr) UI) or **programmatically** (through our SDKs or REST API) detect, recognize, and verify faces in images. It is based on state-of-the-art (SOTA) algorithms and uses deep learning face recognition models. The API is designed to be easy to use and integrate into your applications. It is available as this hosted service or you can deploy it yourself on your own servers.  There are four ways that you can use the product: - Using the [Face Recognition Developer Portal](https://developer.opencv.fr) User Interface to manage your **Developer** teams, **Persons** who are registered for the search API to recognize, and **Collections** - groups of persons. - Using the [Python Face Recognition SDK](https://docs.opencv.fr/python) to integrate the API into your Python applications. - Using the [C++ Face Recognition SDK](https://docs.opencv.fr/cpp) to integrate the API into your C++ applications. - Using the REST API (below) to integrate the API functionality into your applications in other languages.  To use the REST API described below, you will need to create an account and obtain an API key. You can do this by signing up for a free account at [Face Recognition Developer Portal](https://developer.opencv.fr).  Once you have signed up, you will see an **API Developer Key** in the Dashboard. This is the key that you will use to authenticate your requests to the API. You can also create additional Developers (each with their own key) for your applications.  To use the API, you will need to send the API key in the `X-API-Key` header of each request. For example, using `curl`: ``` curl -X GET \"https://<region>.opencv.fr/persons\" -H \"accept: application/json\" -H \"X-API-Key: <your API key>\" ```  `<region>` is the data storage region that you selected when you created your account. It can be `us`, `eu`, or `sg`.  To help you try out the functionality quickly, the below live docs include a **Try it out** button for each endpoint. This will allow you to send a request to the API and see the response. Before you can use this, you will need to grab your API key from the Dashboard and enter it into the field that shows up when you click the green **Authorize** button (below this line on the right).

API version: 2024.07.05.1135
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); EDIT AT YOUR OWN RISK

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ThumbnailSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThumbnailSchema{}

// ThumbnailSchema struct for ThumbnailSchema
type ThumbnailSchema struct {
	Id        string  `json:"id"`
	Thumbnail *string `json:"thumbnail,omitempty"`
}

type _ThumbnailSchema ThumbnailSchema

// NewThumbnailSchema instantiates a new ThumbnailSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnailSchema(id string) *ThumbnailSchema {
	this := ThumbnailSchema{}
	this.Id = id
	return &this
}

// NewThumbnailSchemaWithDefaults instantiates a new ThumbnailSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailSchemaWithDefaults() *ThumbnailSchema {
	this := ThumbnailSchema{}
	return &this
}

// GetId returns the Id field value
func (o *ThumbnailSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ThumbnailSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ThumbnailSchema) SetId(v string) {
	o.Id = v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *ThumbnailSchema) GetThumbnail() string {
	if o == nil || IsNil(o.Thumbnail) {
		var ret string
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailSchema) GetThumbnailOk() (*string, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *ThumbnailSchema) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given string and assigns it to the Thumbnail field.
func (o *ThumbnailSchema) SetThumbnail(v string) {
	o.Thumbnail = &v
}

func (o ThumbnailSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThumbnailSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	return toSerialize, nil
}

func (o *ThumbnailSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varThumbnailSchema := _ThumbnailSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varThumbnailSchema)

	if err != nil {
		return err
	}

	*o = ThumbnailSchema(varThumbnailSchema)

	return err
}

type NullableThumbnailSchema struct {
	value *ThumbnailSchema
	isSet bool
}

func (v NullableThumbnailSchema) Get() *ThumbnailSchema {
	return v.value
}

func (v *NullableThumbnailSchema) Set(val *ThumbnailSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailSchema(val *ThumbnailSchema) *NullableThumbnailSchema {
	return &NullableThumbnailSchema{value: val, isSet: true}
}

func (v NullableThumbnailSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
