/*
OpenCV Face Recognition

 OpenCV Face Recognition allows you to either **manually** (through our [Developer Portal](https://developer.opencv.fr) UI) or **programmatically** (through our SDKs or REST API) detect, recognize, and verify faces in images. It is based on state-of-the-art (SOTA) algorithms and uses deep learning face recognition models. The API is designed to be easy to use and integrate into your applications. It is available as this hosted service or you can deploy it yourself on your own servers.  There are four ways that you can use the product: - Using the [Face Recognition Developer Portal](https://developer.opencv.fr) User Interface to manage your **Developer** teams, **Persons** who are registered for the search API to recognize, and **Collections** - groups of persons. - Using the [Python Face Recognition SDK](https://docs.opencv.fr/python) to integrate the API into your Python applications. - Using the [C++ Face Recognition SDK](https://docs.opencv.fr/cpp) to integrate the API into your C++ applications. - Using the REST API (below) to integrate the API functionality into your applications in other languages.  To use the REST API described below, you will need to create an account and obtain an API key. You can do this by signing up for a free account at [Face Recognition Developer Portal](https://developer.opencv.fr).  Once you have signed up, you will see an **API Developer Key** in the Dashboard. This is the key that you will use to authenticate your requests to the API. You can also create additional Developers (each with their own key) for your applications.  To use the API, you will need to send the API key in the `X-API-Key` header of each request. For example, using `curl`: ``` curl -X GET \"https://<region>.opencv.fr/persons\" -H \"accept: application/json\" -H \"X-API-Key: <your API key>\" ```  `<region>` is the data storage region that you selected when you created your account. It can be `us`, `eu`, or `sg`.  To help you try out the functionality quickly, the below live docs include a **Try it out** button for each endpoint. This will allow you to send a request to the API and see the response. Before you can use this, you will need to grab your API key from the Dashboard and enter it into the field that shows up when you click the green **Authorize** button (below this line on the right). 

API version: 2024.07.05.1135
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchPersonSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchPersonSchema{}

// SearchPersonSchema struct for SearchPersonSchema
type SearchPersonSchema struct {
	CollectionId NullableString `json:"collection_id,omitempty"`
	Images []string `json:"images"`
	MaxResults NullableInt32 `json:"max_results,omitempty"`
	MinScore NullableFloat32 `json:"min_score,omitempty"`
	SearchMode NullableSearchModeEnum `json:"verification_mode,omitempty"`
}

type _SearchPersonSchema SearchPersonSchema

// NewSearchPersonSchema instantiates a new SearchPersonSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPersonSchema(images []string) *SearchPersonSchema {
	this := SearchPersonSchema{}
	this.Images = images
	this.MinScore = *NewNullableFloat32(PtrFloat32(DefaultMinScore))
	return &this
}

// NewSearchPersonSchemaWithDefaults instantiates a new SearchPersonSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPersonSchemaWithDefaults() *SearchPersonSchema {
	this := SearchPersonSchema{}
	this.MinScore = *NewNullableFloat32(PtrFloat32(DefaultMinScore))
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchPersonSchema) GetCollectionId() string {
	if o == nil || IsNil(o.CollectionId.Get()) {
		var ret string
		return ret
	}
	return *o.CollectionId.Get()
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchPersonSchema) GetCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectionId.Get(), o.CollectionId.IsSet()
}

// HasCollectionId returns a boolean if a field has been set.
func (o *SearchPersonSchema) HasCollectionId() bool {
	if o != nil && o.CollectionId.IsSet() {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given NullableString and assigns it to the CollectionId field.
func (o *SearchPersonSchema) SetCollectionId(v string) {
	o.CollectionId.Set(&v)
}
// SetCollectionIdNil sets the value for CollectionId to be an explicit nil
func (o *SearchPersonSchema) SetCollectionIdNil() {
	o.CollectionId.Set(nil)
}

// UnsetCollectionId ensures that no value is present for CollectionId, not even an explicit nil
func (o *SearchPersonSchema) UnsetCollectionId() {
	o.CollectionId.Unset()
}

// GetImages returns the Images field value
func (o *SearchPersonSchema) GetImages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
func (o *SearchPersonSchema) GetImagesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Images, true
}

// SetImages sets field value
func (o *SearchPersonSchema) SetImages(v []string) {
	o.Images = v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchPersonSchema) GetMaxResults() int32 {
	if o == nil || IsNil(o.MaxResults.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxResults.Get()
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchPersonSchema) GetMaxResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxResults.Get(), o.MaxResults.IsSet()
}

// HasMaxResults returns a boolean if a field has been set.
func (o *SearchPersonSchema) HasMaxResults() bool {
	if o != nil && o.MaxResults.IsSet() {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given NullableInt32 and assigns it to the MaxResults field.
func (o *SearchPersonSchema) SetMaxResults(v int32) {
	o.MaxResults.Set(&v)
}
// SetMaxResultsNil sets the value for MaxResults to be an explicit nil
func (o *SearchPersonSchema) SetMaxResultsNil() {
	o.MaxResults.Set(nil)
}

// UnsetMaxResults ensures that no value is present for MaxResults, not even an explicit nil
func (o *SearchPersonSchema) UnsetMaxResults() {
	o.MaxResults.Unset()
}

// GetMinScore returns the MinScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchPersonSchema) GetMinScore() float32 {
	if o == nil || IsNil(o.MinScore.Get()) {
		var ret float32
		return ret
	}
	return *o.MinScore.Get()
}

// GetMinScoreOk returns a tuple with the MinScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchPersonSchema) GetMinScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinScore.Get(), o.MinScore.IsSet()
}

// HasMinScore returns a boolean if a field has been set.
func (o *SearchPersonSchema) HasMinScore() bool {
	if o != nil && o.MinScore.IsSet() {
		return true
	}

	return false
}

// SetMinScore gets a reference to the given NullableMinScore and assigns it to the MinScore field.
func (o *SearchPersonSchema) SetMinScore(v float32) {
	o.MinScore.Set(&v)
}
// SetMinScoreNil sets the value for MinScore to be an explicit nil
func (o *SearchPersonSchema) SetMinScoreNil() {
	o.MinScore.Set(nil)
}

// UnsetMinScore ensures that no value is present for MinScore, not even an explicit nil
func (o *SearchPersonSchema) UnsetMinScore() {
	o.MinScore.Unset()
}

// GetSearchMode returns the SearchMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchPersonSchema) GetSearchMode() SearchModeEnum {
	if o == nil || IsNil(o.SearchMode.Get()) {
		var ret SearchModeEnum
		return ret
	}
	return *o.SearchMode.Get()
}

// GetSearchModeOk returns a tuple with the SearchMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchPersonSchema) GetSearchModeOk() (*SearchModeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchMode.Get(), o.SearchMode.IsSet()
}

// HasSearchMode returns a boolean if a field has been set.
func (o *SearchPersonSchema) HasSearchMode() bool {
	if o != nil && o.SearchMode.IsSet() {
		return true
	}

	return false
}

// SetSearchMode gets a reference to the given NullableAnyOf and assigns it to the SearchMode field.
func (o *SearchPersonSchema) SetSearchMode(v SearchModeEnum) {
	o.SearchMode.Set(&v)
}
// SetSearchModeNil sets the value for SearchMode to be an explicit nil
func (o *SearchPersonSchema) SetSearchModeNil() {
	o.SearchMode.Set(nil)
}

// UnsetSearchMode ensures that no value is present for SearchMode, not even an explicit nil
func (o *SearchPersonSchema) UnsetSearchMode() {
	o.SearchMode.Unset()
}

func (o SearchPersonSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchPersonSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CollectionId.IsSet() {
		toSerialize["collection_id"] = o.CollectionId.Get()
	}
	toSerialize["images"] = o.Images
	if o.MaxResults.IsSet() {
		toSerialize["max_results"] = o.MaxResults.Get()
	}
	if o.MinScore.IsSet() {
		toSerialize["min_score"] = o.MinScore.Get()
	}
	if o.SearchMode.IsSet() {
		toSerialize["search_mode"] = o.SearchMode.Get()
	}
	return toSerialize, nil
}

func (o *SearchPersonSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"images",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchPersonSchema := _SearchPersonSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchPersonSchema)

	if err != nil {
		return err
	}

	*o = SearchPersonSchema(varSearchPersonSchema)

	return err
}

type NullableSearchPersonSchema struct {
	value *SearchPersonSchema
	isSet bool
}

func (v NullableSearchPersonSchema) Get() *SearchPersonSchema {
	return v.value
}

func (v *NullableSearchPersonSchema) Set(val *SearchPersonSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPersonSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPersonSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPersonSchema(val *SearchPersonSchema) *NullableSearchPersonSchema {
	return &NullableSearchPersonSchema{value: val, isSet: true}
}

func (v NullableSearchPersonSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPersonSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


