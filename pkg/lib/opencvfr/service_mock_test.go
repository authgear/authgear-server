// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package opencvfr_test is a generated GoMock package.
package opencvfr_test

import (
	reflect "reflect"

	openapi "github.com/authgear/authgear-server/pkg/lib/opencvfr/openapi"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonService is a mock of PersonService interface.
type MockPersonService struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceMockRecorder
}

// MockPersonServiceMockRecorder is the mock recorder for MockPersonService.
type MockPersonServiceMockRecorder struct {
	mock *MockPersonService
}

// NewMockPersonService creates a new mock instance.
func NewMockPersonService(ctrl *gomock.Controller) *MockPersonService {
	mock := &MockPersonService{ctrl: ctrl}
	mock.recorder = &MockPersonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonService) EXPECT() *MockPersonServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersonService) Create(reqBody *openapi.CreatePersonSchema) (*openapi.PersonSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reqBody)
	ret0, _ := ret[0].(*openapi.PersonSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersonServiceMockRecorder) Create(reqBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonService)(nil).Create), reqBody)
}

// Delete mocks base method.
func (m *MockPersonService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersonService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockPersonService) Get(id string) (*openapi.PersonSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*openapi.PersonSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersonServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonService)(nil).Get), id)
}

// Update mocks base method.
func (m *MockPersonService) Update(reqBody *openapi.UpdatePersonSchema) (*openapi.PersonSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", reqBody)
	ret0, _ := ret[0].(*openapi.PersonSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersonServiceMockRecorder) Update(reqBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonService)(nil).Update), reqBody)
}
