name: required
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
secret_config:
  secrets: []

---
name: required/webhook
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
  <root>: web-hook signing key materials (secret 'webhook') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  hook:
    blocking_handlers:
    - event: user.pre_create
      url: "https://hook.example/pre_signup"
secret_config:
  secrets: []

---
name: required/oauth-client
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth SSO provider client credentials (secret 'sso.oauth.client') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    oauth:
      providers:
      - alias: google
        type: google
        client_id: google_client_id
secret_config:
  secrets: []

---
name: oauth/missing-oauth-client-item
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth SSO provider client credentials for 'google' is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    oauth:
      providers:
      - alias: google
        type: google
        client_id: google_client_id
secret_config:
  secrets:
    - key: sso.oauth.client
      data:
        items:
        - alias: google_typo
          client_secret: google_client_secret

---
name: oauth/missing-oauth-client-allowed-for-inactive-provider
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    oauth:
      providers:
      - alias: google
        type: google
        client_id: google_client_id
        disabled: true
secret_config:
  secrets:
    - key: sso.oauth.client
      data:
        items:
        - alias: google
          client_secret: ""

---
name: oauth/missing-oauth-client-secret
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  /secrets/0/data/items/1: required
    map[actual:[alias] expected:[alias client_secret] missing:[client_secret]]
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    oauth:
      providers:
      - alias: google
        type: google
        client_id: google_client_id
secret_config:
  secrets:
    - key: sso.oauth.client
      data:
        items:
        - alias: google_typo
          client_secret: google_client_secret
        - alias: google
          client_secret: ""

---
name: oauth/valid
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    oauth:
      providers:
      - alias: google
        type: google
        client_id: google_client_id
secret_config:
  secrets:
    - key: sso.oauth.client
      data:
        items:
        - alias: google
          client_secret: google_client_secret
---
name: required/oauth-client-secrets
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth client credentials (secret 'oauth.client_secrets') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  oauth:
    clients:
      - name: Test Client
        client_id: test-client
        client_name: Test Client
        x_application_type: third_party_app
        redirect_uris:
          - "http://example.com/oauth-redirect"
secret_config:
  secrets: []
---
name: oauth-client-secrets/missing-item
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth client credentials for 'third-party' is required
  <root>: OAuth client credentials for 'confidential' is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  oauth:
    clients:
      - name: Third-party
        client_id: third-party
        client_name: Third-party
        x_application_type: third_party_app
        redirect_uris:
          - "http://example.com/oauth-redirect"
      - name: Confidential
        client_id: confidential
        client_name: Confidential
        x_application_type: confidential
        redirect_uris:
          - "http://example.com/oauth-redirect"
      - name: Native APP
        client_id: native_app
        x_application_type: native
        redirect_uris:
          - "myapp://example.com/oauth-redirect"
secret_config:
  secrets:
    - key: oauth.client_secrets
      data:
        items:
        - client_id: typo
          keys:
          - created_at: 1136171045
            k: c2VjcmV0MQ
            kid: 9dc0e72c-bf34-4ab3-a616-393093bdae0b
            kty: oct
---
name: oauth-client-secrets/client-secrets-part-valid
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  oauth:
    clients:
      - name: Third-party
        client_id: third-party
        client_name: Third-party
        x_application_type: third_party_app
        redirect_uris:
          - "http://example.com/oauth-redirect"
      - name: Confidential
        client_id: confidential
        client_name: Confidential
        x_application_type: confidential
        redirect_uris:
          - "http://example.com/oauth-redirect"
      - name: Native APP
        client_id: native_app
        x_application_type: native
        redirect_uris:
          - "myapp://example.com/oauth-redirect"
secret_config:
  secrets:
    - key: oauth.client_secrets
      data:
        items:
        - client_id: third-party
          keys:
          - created_at: 1136171045
            k: c2VjcmV0MQ
            kid: 9dc0e72c-bf34-4ab3-a616-393093bdae0b
            kty: oct
        - client_id: confidential
          keys:
          - created_at: 1136171045
            k: c2VjcmV0MQ
            kid: 9dc0e72c-bf34-4ab3-a616-393093bdae0b
            kty: oct
---
name: required/bot-protection
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
  <root>: bot protection key materials (secret 'bot_protection.provider') is required
  <root>: bot protection provider credentials (secret 'bot_protection.provider') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  bot_protection:
    enabled: true
    provider:
      type: cloudflare
      site_key: blahblahblah
secret_config:
  secrets: []
---
name: bot-protection-secrets/valid-cloudflare
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  bot_protection:
    enabled: true
    provider:
      type: cloudflare
      site_key: asdkjhfjaksdhjkfsdhadsk
secret_config:
  secrets:
    - key: bot_protection.provider
      data:
        type: cloudflare
        secret_key: very_secret
---
name: bot-protection-secrets/valid-recaptchav2
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  bot_protection:
    enabled: true
    provider:
      type: recaptchav2
      site_key: asdkjhfjaksdhjkfsdhadsk
secret_config:
  secrets:
    - key: bot_protection.provider
      data:
        type: recaptchav2
        secret_key: very_secret
---
name: bot-protection-secrets/mismatching-secret
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
  <root>: bot protection provider credentials for 'recaptchav2' is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  bot_protection:
    enabled: true
    provider:
      type: recaptchav2
      site_key: blahblahblah
secret_config:
  secrets:
    - key: bot_protection.provider
      data:
        type: cloudflare # mismatch with above
        secret_key: very_secret
---
name: captcha-secrets/valid-legacy-cloudflare
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  captcha:
    provider: cloudflare
secret_config:
  secrets:
    - key: captcha.cloudflare
      data:
        secret: some secret
---
name: ldap-secrets/valid
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    ldap:
      servers:
        - name: default
          url: "ldap://localhost:389"
          base_dn: "dc=localhost"
          search_filter_template: |
            {{if eq .Username "test@test.com"}}
                (mail={{.Username}})
            {{else}}
                (uid={{.Username}})
            {{end}}
          user_id_attribute_name: "uid"
secret_config:
  secrets:
    - key: ldap
      data:
        items:
        - name: default
          dn: "cn=admin,dc=localhost"
          password: "password"
---
name: ldap-secrets/mismatching-name
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
  <root>: LDAP server user credentials for 'default' is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    ldap:
      servers:
        - name: default
          url: "ldap://localhost:389"
          base_dn: "dc=localhost"
          search_filter_template: |
            {{if eq .Username "test@test.com"}}
                (mail={{.Username}})
            {{else}}
                (uid={{.Username}})
            {{end}}
          user_id_attribute_name: "uid"
secret_config:
  secrets:
    - key: ldap
      data:
        items:
        - name: wrong
          dn: "cn=admin,dc=localhost"
          password: "password"
---
name: ldap-secrets/valid-search-filter
error: |-
  invalid secrets:
  <root>: database credentials (secret 'db') is required
  <root>: redis credentials (secret 'redis') is required
  <root>: admin API auth key materials (secret 'admin-api.auth') is required
  <root>: OAuth key materials (secret 'oauth') is required
  <root>: CSRF key materials (secret 'csrf') is required
app_config:
  id: app
  http:
    public_origin: "http://test"
  identity:
    ldap:
      servers:
        - name: default
          url: "ldap://localhost:389"
          base_dn: "dc=localhost"
          search_filter_template: (mail={{.Username}})
          user_id_attribute_name: "uid"
secret_config:
  secrets:
    - key: ldap
      data:
        items:
        - name: default
          dn: "cn=admin,dc=localhost"
          password: "password"
