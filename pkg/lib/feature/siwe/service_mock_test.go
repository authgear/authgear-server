// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package siwe is a generated GoMock package.
package siwe

import (
	reflect "reflect"

	ratelimit "github.com/authgear/authgear-server/pkg/lib/ratelimit"
	gomock "github.com/golang/mock/gomock"
)

// MockNonceStore is a mock of NonceStore interface.
type MockNonceStore struct {
	ctrl     *gomock.Controller
	recorder *MockNonceStoreMockRecorder
}

// MockNonceStoreMockRecorder is the mock recorder for MockNonceStore.
type MockNonceStoreMockRecorder struct {
	mock *MockNonceStore
}

// NewMockNonceStore creates a new mock instance.
func NewMockNonceStore(ctrl *gomock.Controller) *MockNonceStore {
	mock := &MockNonceStore{ctrl: ctrl}
	mock.recorder = &MockNonceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceStore) EXPECT() *MockNonceStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNonceStore) Create(nonce *Nonce) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNonceStoreMockRecorder) Create(nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNonceStore)(nil).Create), nonce)
}

// Delete mocks base method.
func (m *MockNonceStore) Delete(nonce *Nonce) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNonceStoreMockRecorder) Delete(nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNonceStore)(nil).Delete), nonce)
}

// Get mocks base method.
func (m *MockNonceStore) Get(nonce *Nonce) (*Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", nonce)
	ret0, _ := ret[0].(*Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNonceStoreMockRecorder) Get(nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNonceStore)(nil).Get), nonce)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiter) Allow(spec ratelimit.BucketSpec) (*ratelimit.FailedReservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", spec)
	ret0, _ := ret[0].(*ratelimit.FailedReservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterMockRecorder) Allow(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiter)(nil).Allow), spec)
}

// Cancel mocks base method.
func (m *MockRateLimiter) Cancel(r *ratelimit.Reservation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel", r)
}

// Cancel indicates an expected call of Cancel.
func (mr *MockRateLimiterMockRecorder) Cancel(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockRateLimiter)(nil).Cancel), r)
}

// Reserve mocks base method.
func (m *MockRateLimiter) Reserve(spec ratelimit.BucketSpec) (*ratelimit.Reservation, *ratelimit.FailedReservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", spec)
	ret0, _ := ret[0].(*ratelimit.Reservation)
	ret1, _ := ret[1].(*ratelimit.FailedReservation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reserve indicates an expected call of Reserve.
func (mr *MockRateLimiterMockRecorder) Reserve(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockRateLimiter)(nil).Reserve), spec)
}
