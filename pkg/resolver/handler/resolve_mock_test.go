// Code generated by MockGen. DO NOT EDIT.
// Source: resolve.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	userinfo "github.com/authgear/authgear-server/pkg/lib/userinfo"
	accesscontrol "github.com/authgear/authgear-server/pkg/util/accesscontrol"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ReadOnly mocks base method.
func (m *MockDatabase) ReadOnly(ctx context.Context, do func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnly", ctx, do)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOnly indicates an expected call of ReadOnly.
func (mr *MockDatabaseMockRecorder) ReadOnly(ctx, do interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnly", reflect.TypeOf((*MockDatabase)(nil).ReadOnly), ctx, do)
}

// MockUserInfoService is a mock of UserInfoService interface.
type MockUserInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoServiceMockRecorder
}

// MockUserInfoServiceMockRecorder is the mock recorder for MockUserInfoService.
type MockUserInfoServiceMockRecorder struct {
	mock *MockUserInfoService
}

// NewMockUserInfoService creates a new mock instance.
func NewMockUserInfoService(ctrl *gomock.Controller) *MockUserInfoService {
	mock := &MockUserInfoService{ctrl: ctrl}
	mock.recorder = &MockUserInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoService) EXPECT() *MockUserInfoServiceMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockUserInfoService) GetUserInfo(ctx context.Context, userID string, role accesscontrol.Role) (*userinfo.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID, role)
	ret0, _ := ret[0].(*userinfo.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserInfoServiceMockRecorder) GetUserInfo(ctx, userID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserInfoService)(nil).GetUserInfo), ctx, userID, role)
}
