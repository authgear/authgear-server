daemon off;
# We do not run as root.
# Nginx gives this warning.
#   the "user" directive makes sense only if the master process runs with super-user privileges
#user authgear;
pid /var/run/nginx/nginx.pid;

worker_processes auto;
worker_shutdown_timeout 240s;

# /var/log/nginx/error.log should be symlink to /dev/stderr
# level notice is quite noisy as it outputs logs when nginx restart the workers.
error_log /var/log/nginx/error.log warn;

include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/rootfs/etc/nginx/template/nginx.tmpl#L289
    # It is a constant.
    types_hash_max_size             2048;

    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/internal/ingress/controller/nginx.go#L496-L533
    # We use the following static configuration that should be enough for our use case here.
    server_names_hash_max_size      8192;
    server_names_hash_bucket_size   128;

    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/internal/ingress/controller/config/config.go#L802
    # It is a constant.
    map_hash_bucket_size            64;

    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/internal/ingress/controller/config/config.go#L808
    # It is a constant.
    proxy_headers_hash_max_size     512;
    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/internal/ingress/controller/config/config.go#L809
    # It is a constant.
    proxy_headers_hash_bucket_size  64;

    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/internal/ingress/controller/config/config.go#L831
    # It is a constant.
    variables_hash_bucket_size      256;
    # https://github.com/kubernetes/ingress-nginx/blob/controller-v1.12.1/internal/ingress/controller/config/config.go#L832
    # IT is a constant.
    variables_hash_max_size         2048;

    # https://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens
    # Omit the version in the Server header.
    # In paid version, this can be set to an empty string to suppress the header.
    server_tokens off;

    # Generated by https://ssl-config.mozilla.org/#server=nginx&version=1.24&config=intermediate&openssl=3.4.0&hsts=false&ocsp=false&guideline=5.7
    # If the server block contains any ssl_ directive, certbot WILL NOT inject its recommended ssl_ config directives.
    # Since we include a fake certificate with ssl_certificate and ssl_certificate_key, we have to include
    # our ssl_ directives in the http block.
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ecdh_curve X25519:prime256v1:secp384r1;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_dhparam /etc/nginx/dhparam;

    # Configure access log.
    log_format thelogformat '$remote_addr - $remote_user [$time_iso8601] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_length $request_time '
                        '$upstream_addr $upstream_response_length $upstream_response_time $upstream_status';
    # /var/log/nginx/access.log should be symlink to /dev/stdout
    access_log /var/log/nginx/access.log thelogformat;
    log_subrequest on;

    # Observed in nginx-ingress controller.
    reset_timedout_connection on;
    client_body_temp_path /tmp/nginx/client-body;
    proxy_temp_path /tmp/nginx/proxy-temp;

    # Enable gzip.
    gzip on;
    gzip_http_version 1.1;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 48;
    gzip_types application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-javascript application/x-web-app-manifest+json application/xhtml+xml application/xml application/xml+rss font/opentype font/otf font/ttf font/x-woff image/svg+xml image/vnd.microsoft.icon image/x-icon text/css text/javascript text/plain text/x-component text/xml;

    # Proxy websocket.
    # The location block must be configured like in the example.
    # See https://www.f5.com/company/blog/nginx/websocket-nginx
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        server_name __AUTHGEAR_HTTP_HOST_PORTAL__;
        # The nginx in ubuntu noble is 1.24.x.
        # http2 was introduced in 1.25.1.
        # https://nginx.org/en/docs/http/ngx_http_v2_module.html#http2
        #http2 on;

        set $expected_scheme __AUTHGEAR_HTTP_EXPECTED_SCHEME_PORTAL__;

        listen 80;
        listen [::]:80;
        listen 443 ssl;
        listen [::]:443 ssl;
        ssl_certificate /etc/nginx/fake_certficate.crt;
        ssl_certificate_key /etc/nginx/fake_certficate.key;

        if ($scheme != $expected_scheme) {
            return 301 $expected_scheme://$host$request_uri;
        }

        location / {
            proxy_pass http://localhost:3003;
            include /etc/nginx/snippets/authgear_location.conf;
        }
    }

    server {
        server_name accounts.projects.authgear;

        listen 80;
        listen [::]:80;

        location / {
            proxy_pass http://localhost:3000;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_api/admin {
            proxy_pass http://localhost:3002;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_resolver {
            proxy_pass http://localhost:3001;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_images {
            client_max_body_size 10M;
            proxy_pass http://localhost:3004;
            include /etc/nginx/snippets/authgear_location.conf;
        }
    }

    server {
        server_name __AUTHGEAR_HTTP_HOST_ACCOUNTS__;
        # The nginx in ubuntu noble is 1.24.x.
        # http2 was introduced in 1.25.1.
        # https://nginx.org/en/docs/http/ngx_http_v2_module.html#http2
        #http2 on;

        set $expected_scheme __AUTHGEAR_HTTP_EXPECTED_SCHEME_ACCOUNTS__;

        listen 80;
        listen [::]:80;
        listen 443 ssl;
        listen [::]:443 ssl;
        ssl_certificate /etc/nginx/fake_certficate.crt;
        ssl_certificate_key /etc/nginx/fake_certficate.key;

        if ($scheme != $expected_scheme) {
            return 301 $expected_scheme://$host$request_uri;
        }

        location / {
            proxy_pass http://localhost:3000;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_api/admin {
            proxy_pass http://localhost:3002;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_resolver {
            proxy_pass http://localhost:3001;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_images {
            client_max_body_size 10M;
            proxy_pass http://localhost:3004;
            include /etc/nginx/snippets/authgear_location.conf;
        }
    }

    server {
        server_name __AUTHGEAR_HTTP_HOST_PROJECT__;
        # The nginx in ubuntu noble is 1.24.x.
        # http2 was introduced in 1.25.1.
        # https://nginx.org/en/docs/http/ngx_http_v2_module.html#http2
        #http2 on;

        set $expected_scheme __AUTHGEAR_HTTP_EXPECTED_SCHEME_PROJECT__;

        listen 80;
        listen [::]:80;
        listen 443 ssl;
        listen [::]:443 ssl;
        ssl_certificate /etc/nginx/fake_certficate.crt;
        ssl_certificate_key /etc/nginx/fake_certficate.key;

        if ($scheme != $expected_scheme) {
            return 301 $expected_scheme://$host$request_uri;
        }

        location / {
            proxy_pass http://localhost:3000;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_api/admin {
            proxy_pass http://localhost:3002;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_resolver {
            proxy_pass http://localhost:3001;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_images {
            client_max_body_size 10M;
            proxy_pass http://localhost:3004;
            include /etc/nginx/snippets/authgear_location.conf;
        }
    }

    server {
        server_name project.projects.authgear;

        listen 80;
        listen [::]:80;

        location / {
            proxy_pass http://localhost:3000;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_api/admin {
            proxy_pass http://localhost:3002;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_resolver {
            proxy_pass http://localhost:3001;
            include /etc/nginx/snippets/authgear_location.conf;
        }

        location /_images {
            client_max_body_size 10M;
            proxy_pass http://localhost:3004;
            include /etc/nginx/snippets/authgear_location.conf;
        }
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 404 "The Host header does not match any server. Make sure the Host header matches one of: __AUTHGEAR_HTTP_HOST_PORTAL__ __AUTHGEAR_HTTP_HOST_ACCOUNTS__ __AUTHGEAR_HTTP_HOST_PROJECT__";
    }
}
