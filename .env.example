DEV_MODE=true
LOG_LEVEL=debug
TRUST_PROXY=true
AUTHGEAR_APP_ID=accounts
AUTHGEAR_CLIENT_ID=portal
AUTHGEAR_ENDPOINT=http://accounts.portal.localhost:3100
AUTHGEAR_WEB_SDK_SESSION_TYPE=refresh_token

# Use a pool size of 2 to make potential deadlock visible.
# 1 connection is dedicated for LISTEN config source change.
# 1 connection is for serving HTTP request.
DATABASE_CONFIG_MAX_OPEN_CONN=2
DATABASE_CONFIG_MAX_IDLE_CONN=2
DATABASE_CONFIG_USE_PREPARED_STATEMENTS=true

DATABASE_SCHEMA=public
DATABASE_URL=postgres://postgres:postgres@localhost:5432/app?sslmode=disable

SEARCH_DATABASE_SCHEMA=public
SEARCH_DATABASE_URL=postgres://postgres:postgres@localhost:5432/search?sslmode=disable

AUDIT_DATABASE_SCHEMA=public
AUDIT_DATABASE_URL=postgres://postgres:postgres@localhost:5432/audit?sslmode=disable

REDIS_URL=redis://localhost/0

ANALYTIC_REDIS_URL=redis://localhost/1
ANALYTIC_ENABLED=true
ANALYTIC_EPOCH=2021-03-25

ELASTICSEARCH_URL=http://localhost:9200

AUTH_UI_WINDOW_MESSAGE_ALLOWED_ORIGINS=http://portal.localhost:8000

CORS_ALLOWED_ORIGINS=portal.localhost:8000

ALLOWED_FRAME_ANCESTORS=http://portal.localhost:8000

APP_HOST_SUFFIX=.localhost:3100
APP_HOST_SUFFIXES=

NFT_INDEXER_API_ENDPOINT=http://127.0.0.1:8080
DENO_ENDPOINT=http://127.0.0.1:8090

# Enable local fs config source
CONFIG_SOURCE_TYPE=local_fs
CONFIG_SOURCE_DIRECTORY=./var

# Enable database config source
#CONFIG_SOURCE_TYPE=database
#APP_CUSTOM_RESOURCE_DIRECTORY./var
#CUSTOM_RESOURCE_DIRECTORY=./var

# This is for portal to create k8s ingress when creating domains
#DOMAIN_IMPLEMENTATION=kubernetes
#KUBERNETES_KUBECONFIG=./hack/kube-apiserver/.kubeconfig
#KUBERNETES_APP_NAMESPACE=authgear
#APP_KUBERNETES_INGRESS_TEMPLATE_FILE=./hack/ingress.tpl.yaml

#SMTP_HOST=
#SMTP_PORT=
#SMTP_USERNAME=
#SMTP_PASSWORD=

#MAIL_SENDER=
#MAIL_REPLY_TO=

#STRIPE_SECRET_KEY=

# Google Tag Manager container id for portal
#GTM_CONTAINER_ID=

# Portal frontend Sentry
#PORTAL_FRONTEND_SENTRY_DSN=

SEARCH_ENABLED=true
WEB3_ENABLED=true
AUDIT_LOG_ENABLED=true
APP_DEFAULT_PLAN=free

OSANO_SCRIPT_SRC=

SAML_IDP_ENTITY_ID_TEMPLATE=urn:{{.app_id}}.localhost

# Portal feature flags
PORTAL_FEATURES_SHOW_CUSTOM_SMS_GATEWAY=true

# Images server configs, uncomment accordingly depending on storage type

#IMAGES_OBJECT_STORE_TYPE=AWS_S3
#IMAGES_OBJECT_STORE_AWS_S3_BUCKET_NAME=
#IMAGES_OBJECT_STORE_AWS_S3_REGION=
#IMAGES_OBJECT_STORE_AWS_S3_ACCESS_KEY_ID=
#IMAGES_OBJECT_STORE_AWS_S3_SECRET_ACCESS_KEY=

#IMAGES_OBJECT_STORE_TYPE=GCP_GCS
#IMAGES_OBJECT_STORE_GCP_GCS_BUCKET_NAME=
#IMAGES_OBJECT_STORE_GCP_GCS_SERVICE_ACCOUNT=
#IMAGES_OBJECT_STORE_GCP_GCS_CREDENTIALS_JSON_PATH=

#IMAGES_OBJECT_STORE_TYPE=AZURE_BLOB_STORAGE
#IMAGES_OBJECT_STORE_AZURE_BLOB_STORAGE_STORAGE_ACCOUNT=
#IMAGES_OBJECT_STORE_AZURE_BLOB_STORAGE_CONTAINER=
#IMAGES_OBJECT_STORE_AZURE_BLOB_STORAGE_SERVICE_URL=
#IMAGES_OBJECT_STORE_AZURE_BLOB_STORAGE_ACCESS_KEY=

IMAGES_OBJECT_STORE_TYPE=MINIO
IMAGES_OBJECT_STORE_MINIO_ENDPOINT=http://localhost:9000
IMAGES_OBJECT_STORE_MINIO_BUCKET_NAME=images
IMAGES_OBJECT_STORE_MINIO_ACCESS_KEY_ID=minio
IMAGES_OBJECT_STORE_MINIO_SECRET_ACCESS_KEY=secretpassword


# User export server configs, uncomment accordingly depending on storage type

#USEREXPORT_OBJECT_STORE_TYPE=AWS_S3
#USEREXPORT_OBJECT_STORE_AWS_S3_BUCKET_NAME=
#USEREXPORT_OBJECT_STORE_AWS_S3_REGION=
#USEREXPORT_OBJECT_STORE_AWS_S3_ACCESS_KEY_ID=
#USEREXPORT_OBJECT_STORE_AWS_S3_SECRET_ACCESS_KEY=

#USEREXPORT_OBJECT_STORE_TYPE=GCP_GCS
#USEREXPORT_OBJECT_STORE_GCP_GCS_BUCKET_NAME=
#USEREXPORT_OBJECT_STORE_GCP_GCS_SERVICE_ACCOUNT=
#USEREXPORT_OBJECT_STORE_GCP_GCS_CREDENTIALS_JSON_PATH=

#USEREXPORT_OBJECT_STORE_TYPE=AZURE_BLOB_STORAGE
#USEREXPORT_OBJECT_STORE_AZURE_BLOB_STORAGE_STORAGE_ACCOUNT=
#USEREXPORT_OBJECT_STORE_AZURE_BLOB_STORAGE_CONTAINER=
#USEREXPORT_OBJECT_STORE_AZURE_BLOB_STORAGE_SERVICE_URL=
#USEREXPORT_OBJECT_STORE_AZURE_BLOB_STORAGE_ACCESS_KEY=

USEREXPORT_OBJECT_STORE_TYPE=MINIO
USEREXPORT_OBJECT_STORE_MINIO_ENDPOINT=http://localhost:9000
USEREXPORT_OBJECT_STORE_MINIO_BUCKET_NAME=userexport
USEREXPORT_OBJECT_STORE_MINIO_ACCESS_KEY_ID=minio
USEREXPORT_OBJECT_STORE_MINIO_SECRET_ACCESS_KEY=secretpassword


UI_IMPLEMENTATION=
UI_SETTINGS_IMPLEMENTATION=

#SMS_GATEWAY_TWILIO_ACCOUNT_SID=
#SMS_GATEWAY_TWILIO_AUTH_TOKEN=
#SMS_GATEWAY_TWILIO_MESSAGING_SERVICE_SID=
#
#SMS_GATEWAY_NEXMO_API_KEY=
#SMS_GATEWAY_NEXMO_API_SECRET=
#
#SMS_GATEWAY_CUSTOM_URL=
#SMS_GATEWAY_CUSTOM_TIMEOUT=5
#
#SMS_GATEWAY_DEFAULT_USE_CONFIG_FROM=
#SMS_GATEWAY_DEFAULT_PROVIDER=

#RATE_LIMITS_SMS=
#RATE_LIMITS_SMS_PER_IP=
#RATE_LIMITS_SMS_PER_TARGET=
#RATE_LIMITS_EMAIL=
#RATE_LIMITS_EMAIL_PER_IP=
#RATE_LIMITS_EMAIL_PER_TARGET=
#RATE_LIMITS_TASK_USER_IMPORT=
#RATE_LIMITS_TASK_USER_EXPORT=
#RATE_LIMITS_TASK_USER_REINDEX=

# The default value of OTEL_METRICS_EXPORTER is otlp
# See https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#exporter-selection
# However, we intentionally deviate from the spec.
# If OTEL_METRICS_EXPORTER is unset, or set to an empty string, or set to "none"
# Then metrics export is disabled.
# This behavior ensures upgrading Authgear to a version that supports otel WILL NOT start sending
# metrics data to OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.
# To opt-in metrics, OTEL_METRICS_EXPORTER must be explicitly set to "otlp".
OTEL_METRICS_EXPORTER=otlp

# The default value of OTEL_EXPORTER_OTLP_METRICS_ENDPOINT is https://localhost:4318/v1/metrics
# See https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp
# Note that it is different from the environment variable spec, which says the default is http://localhost:4318/v1/metrics
# See https://opentelemetry.io/docs/languages/sdk-configuration/otlp-exporter/#otel_exporter_otlp_metrics_endpoint
# If you ever need to send metrics directly to Prometheus, then you need to set it to something like
# http://localhost:9090/api/v1/otlp/v1/metrics
# See https://prometheus.io/docs/guides/opentelemetry/#send-opentelemetry-metrics-to-the-prometheus-server
OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:4318/v1/metrics

# The default value of OTEL_METRIC_EXPORT_INTERVAL is 60000.
# See https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#periodic-exporting-metricreader
# During development, you want to set it to much shorter.
OTEL_METRIC_EXPORT_INTERVAL=5000

# Use OTEL_SERVICE_NAME to specify service.name
OTEL_SERVICE_NAME=authgear
