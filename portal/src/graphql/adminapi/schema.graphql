""""""
input AnonymizeUserInput {
  """Target user ID."""
  userID: ID!
}

""""""
type AnonymizeUserPayload {
  """"""
  anonymizedUserID: ID!
}

"""Audit log"""
type AuditLog implements Node {
  """"""
  activityType: AuditLogActivityType!

  """"""
  clientID: String

  """"""
  createdAt: DateTime!

  """"""
  data: AuditLogData

  """The ID of an object"""
  id: ID!

  """"""
  ipAddress: String

  """"""
  user: User

  """"""
  userAgent: String
}

""""""
enum AuditLogActivityType {
  """"""
  AUTHENTICATION_IDENTITY_ANONYMOUS_FAILED

  """"""
  AUTHENTICATION_IDENTITY_BIOMETRIC_FAILED

  """"""
  AUTHENTICATION_IDENTITY_LOGIN_ID_FAILED

  """"""
  AUTHENTICATION_PRIMARY_OOB_OTP_EMAIL_FAILED

  """"""
  AUTHENTICATION_PRIMARY_OOB_OTP_SMS_FAILED

  """"""
  AUTHENTICATION_PRIMARY_PASSWORD_FAILED

  """"""
  AUTHENTICATION_SECONDARY_OOB_OTP_EMAIL_FAILED

  """"""
  AUTHENTICATION_SECONDARY_OOB_OTP_SMS_FAILED

  """"""
  AUTHENTICATION_SECONDARY_PASSWORD_FAILED

  """"""
  AUTHENTICATION_SECONDARY_RECOVERY_CODE_FAILED

  """"""
  AUTHENTICATION_SECONDARY_TOTP_FAILED

  """"""
  EMAIL_SENT

  """"""
  IDENTITY_BIOMETRIC_DISABLED

  """"""
  IDENTITY_BIOMETRIC_ENABLED

  """"""
  IDENTITY_EMAIL_ADDED

  """"""
  IDENTITY_EMAIL_REMOVED

  """"""
  IDENTITY_EMAIL_UPDATED

  """"""
  IDENTITY_OAUTH_CONNECTED

  """"""
  IDENTITY_OAUTH_DISCONNECTED

  """"""
  IDENTITY_PHONE_ADDED

  """"""
  IDENTITY_PHONE_REMOVED

  """"""
  IDENTITY_PHONE_UPDATED

  """"""
  IDENTITY_USERNAME_ADDED

  """"""
  IDENTITY_USERNAME_REMOVED

  """"""
  IDENTITY_USERNAME_UPDATED

  """"""
  SMS_SENT

  """"""
  USER_ANONYMIZATION_SCHEDULED

  """"""
  USER_ANONYMIZATION_UNSCHEDULED

  """"""
  USER_ANONYMIZED

  """"""
  USER_ANONYMOUS_PROMOTED

  """"""
  USER_AUTHENTICATED

  """"""
  USER_CREATED

  """"""
  USER_DELETED

  """"""
  USER_DELETION_SCHEDULED

  """"""
  USER_DELETION_UNSCHEDULED

  """"""
  USER_DISABLED

  """"""
  USER_PROFILE_UPDATED

  """"""
  USER_REENABLED

  """"""
  USER_SESSION_TERMINATED

  """"""
  USER_SIGNED_OUT

  """"""
  WHATSAPP_OTP_VERIFIED
}

"""A connection to a list of items."""
type AuditLogConnection {
  """Information to aid in pagination."""
  edges: [AuditLogEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""The `AuditLogData` scalar type represents the data of the audit log"""
scalar AuditLogData

"""An edge in a connection"""
type AuditLogEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AuditLog
}

""""""
type Authenticator implements Entity & Node {
  """"""
  claims(names: [String!]): AuthenticatorClaims!

  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of an object"""
  id: ID!

  """"""
  isDefault: Boolean!

  """"""
  kind: AuthenticatorKind!

  """"""
  type: AuthenticatorType!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""
The `AuthenticatorClaims` scalar type represents a set of claims belonging to an authenticator
"""
scalar AuthenticatorClaims

"""A connection to a list of items."""
type AuthenticatorConnection {
  """Information to aid in pagination."""
  edges: [AuthenticatorEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type AuthenticatorEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Authenticator
}

""""""
enum AuthenticatorKind {
  """"""
  PRIMARY

  """"""
  SECONDARY
}

""""""
enum AuthenticatorType {
  """"""
  OOB_OTP_EMAIL

  """"""
  OOB_OTP_SMS

  """"""
  PASSKEY

  """"""
  PASSWORD

  """"""
  TOTP
}

""""""
type Authorization implements Entity & Node {
  """"""
  clientID: String!

  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of an object"""
  id: ID!

  """"""
  scopes: [String!]!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AuthorizationConnection {
  """Information to aid in pagination."""
  edges: [AuthorizationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type AuthorizationEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Authorization
}

""""""
type Claim {
  """"""
  name: String!

  """"""
  value: String!
}

""""""
input CreateIdentityInput {
  """Definition of the new identity."""
  definition: IdentityDefinition!

  """Password for the user if required."""
  password: String

  """Target user ID."""
  userID: ID!
}

""""""
type CreateIdentityPayload {
  """"""
  identity: Identity!

  """"""
  user: User!
}

""""""
input CreateSessionInput {
  """Target client ID."""
  clientID: String!

  """Target user ID."""
  userID: ID!
}

""""""
type CreateSessionPayload {
  """"""
  accessToken: String!

  """"""
  refreshToken: String!
}

""""""
input CreateUserInput {
  """Definition of the identity of new user."""
  definition: IdentityDefinition!

  """Password for the user if required."""
  password: String
}

""""""
type CreateUserPayload {
  """"""
  user: User!
}

"""
The `DateTime` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar DateTime

""""""
input DeleteAuthenticatorInput {
  """Target authenticator ID."""
  authenticatorID: ID!
}

""""""
type DeleteAuthenticatorPayload {
  """"""
  user: User!
}

""""""
input DeleteAuthorizationInput {
  """Target authorization ID."""
  authorizationID: ID!
}

""""""
type DeleteAuthorizationPayload {
  """"""
  user: User!
}

""""""
input DeleteIdentityInput {
  """Target identity ID."""
  identityID: ID!
}

""""""
type DeleteIdentityPayload {
  """"""
  user: User!
}

""""""
input DeleteUserInput {
  """Target user ID."""
  userID: ID!
}

""""""
type DeleteUserPayload {
  """"""
  deletedUserID: ID!
}

""""""
interface Entity {
  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of entity"""
  id: ID!

  """The update time of entity"""
  updatedAt: DateTime!
}

""""""
input GenerateOOBOTPCodeInput {
  """Target user's email or phone number."""
  target: String!
}

""""""
type GenerateOOBOTPCodePayload {
  """"""
  code: String!
}

""""""
type Identity implements Entity & Node {
  """"""
  claims(names: [String!]): IdentityClaims!

  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of an object"""
  id: ID!

  """"""
  type: IdentityType!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""
The `IdentityClaims` scalar type represents a set of claims belonging to an identity
"""
scalar IdentityClaims

"""A connection to a list of items."""
type IdentityConnection {
  """Information to aid in pagination."""
  edges: [IdentityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""
Definition of an identity. This is a union object, exactly one of the available fields must be present.
"""
input IdentityDefinition {
  """Login ID identity definition."""
  loginID: IdentityDefinitionLoginID
}

""""""
input IdentityDefinitionLoginID {
  """The login ID key."""
  key: String!

  """The login ID."""
  value: String!
}

"""An edge in a connection"""
type IdentityEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Identity
}

""""""
enum IdentityType {
  """"""
  ANONYMOUS

  """"""
  BIOMETRIC

  """"""
  LOGIN_ID

  """"""
  OAUTH

  """"""
  PASSKEY

  """"""
  SIWE
}

""""""
type Mutation {
  """Anonymize specified user"""
  anonymizeUser(input: AnonymizeUserInput!): AnonymizeUserPayload!

  """Create new identity for user"""
  createIdentity(input: CreateIdentityInput!): CreateIdentityPayload!

  """Create a session of a given user"""
  createSession(input: CreateSessionInput!): CreateSessionPayload!

  """Create new user"""
  createUser(input: CreateUserInput!): CreateUserPayload!

  """Delete authenticator of user"""
  deleteAuthenticator(input: DeleteAuthenticatorInput!): DeleteAuthenticatorPayload!

  """Delete authorization"""
  deleteAuthorization(input: DeleteAuthorizationInput!): DeleteAuthorizationPayload!

  """Delete identity of user"""
  deleteIdentity(input: DeleteIdentityInput!): DeleteIdentityPayload!

  """Delete specified user"""
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!

  """Generate OOB OTP code for user"""
  generateOOBOTPCode(input: GenerateOOBOTPCodeInput!): GenerateOOBOTPCodePayload!

  """Reset password of user"""
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!

  """Revoke all sessions of user"""
  revokeAllSessions(input: RevokeAllSessionsInput!): RevokeAllSessionsPayload!

  """Revoke session of user"""
  revokeSession(input: RevokeSessionInput!): RevokeSessionPayload!

  """Schedule account anonymization"""
  scheduleAccountAnonymization(input: ScheduleAccountAnonymizationInput!): ScheduleAccountAnonymizationPayload!

  """Schedule account deletion"""
  scheduleAccountDeletion(input: ScheduleAccountDeletionInput!): ScheduleAccountDeletionPayload!

  """Set disabled status of user"""
  setDisabledStatus(input: SetDisabledStatusInput!): SetDisabledStatusPayload!

  """Set verified status of a claim of user"""
  setVerifiedStatus(input: SetVerifiedStatusInput!): SetVerifiedStatusPayload!

  """Unschedule account anonymization"""
  unscheduleAccountAnonymization(input: UnscheduleAccountAnonymizationInput!): UnscheduleAccountAnonymizationPayload!

  """Unschedule account deletion"""
  unscheduleAccountDeletion(input: UnscheduleAccountDeletionInput!): UnscheduleAccountDeletionPayload!

  """Update an existing identity of user"""
  updateIdentity(input: UpdateIdentityInput!): UpdateIdentityPayload!

  """Update user"""
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
}

"""An object with an ID"""
interface Node {
  """The id of the object"""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

""""""
type Query {
  """Audit logs"""
  auditLogs(activityTypes: [AuditLogActivityType!], after: String, before: String, first: Int, last: Int, rangeFrom: DateTime, rangeTo: DateTime, sortDirection: SortDirection): AuditLogConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """All users"""
  users(after: String, before: String, first: Int, last: Int, searchKeyword: String, sortBy: UserSortBy, sortDirection: SortDirection): UserConnection
}

""""""
input ResetPasswordInput {
  """New password."""
  password: String!

  """Target user ID."""
  userID: ID!
}

""""""
type ResetPasswordPayload {
  """"""
  user: User!
}

""""""
input RevokeAllSessionsInput {
  """Target user ID."""
  userID: ID!
}

""""""
type RevokeAllSessionsPayload {
  """"""
  user: User!
}

""""""
input RevokeSessionInput {
  """Target session ID."""
  sessionID: ID!
}

""""""
type RevokeSessionPayload {
  """"""
  user: User!
}

""""""
input ScheduleAccountAnonymizationInput {
  """Target user ID."""
  userID: ID!
}

""""""
type ScheduleAccountAnonymizationPayload {
  """"""
  user: User!
}

""""""
input ScheduleAccountDeletionInput {
  """Target user ID."""
  userID: ID!
}

""""""
type ScheduleAccountDeletionPayload {
  """"""
  user: User!
}

""""""
type Session implements Entity & Node {
  """"""
  acr: String!

  """"""
  amr: [String!]!

  """The creation time of entity"""
  createdAt: DateTime!

  """"""
  createdByIP: String!

  """"""
  displayName: String!

  """The ID of an object"""
  id: ID!

  """"""
  lastAccessedAt: DateTime!

  """"""
  lastAccessedByIP: String!

  """"""
  type: SessionType!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  edges: [SessionEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type SessionEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Session
}

""""""
enum SessionType {
  """"""
  IDP

  """"""
  OFFLINE_GRANT
}

""""""
input SetDisabledStatusInput {
  """Indicate whether the target user is disabled."""
  isDisabled: Boolean!

  """
  Indicate the disable reason; If not provided, the user will be disabled with no reason.
  """
  reason: String

  """Target user ID."""
  userID: ID!
}

""""""
type SetDisabledStatusPayload {
  """"""
  user: User!
}

""""""
input SetVerifiedStatusInput {
  """Name of the claim to set verified status."""
  claimName: String!

  """Value of the claim."""
  claimValue: String!

  """Indicate whether the target claim is verified."""
  isVerified: Boolean!

  """Target user ID."""
  userID: ID!
}

""""""
type SetVerifiedStatusPayload {
  """"""
  user: User!
}

""""""
enum SortDirection {
  """"""
  ASC

  """"""
  DESC
}

""""""
input UnscheduleAccountAnonymizationInput {
  """Target user ID."""
  userID: ID!
}

""""""
type UnscheduleAccountAnonymizationPayload {
  """"""
  user: User!
}

""""""
input UnscheduleAccountDeletionInput {
  """Target user ID."""
  userID: ID!
}

""""""
type UnscheduleAccountDeletionPayload {
  """"""
  user: User!
}

""""""
input UpdateIdentityInput {
  """New definition of the identity."""
  definition: IdentityDefinition!

  """Target identity ID."""
  identityID: ID!

  """Target user ID."""
  userID: ID!
}

""""""
type UpdateIdentityPayload {
  """"""
  identity: Identity!

  """"""
  user: User!
}

""""""
input UpdateUserInput {
  """Whole custom attributes to be set on the user."""
  customAttributes: UserCustomAttributes

  """Whole standard attributes to be set on the user."""
  standardAttributes: UserStandardAttributes

  """Target user ID."""
  userID: ID!
}

""""""
type UpdateUserPayload {
  """"""
  user: User!
}

"""Authgear user"""
type User implements Entity & Node {
  """The scheduled anonymization time of the user"""
  anonymizeAt: DateTime

  """The list of authenticators"""
  authenticators(after: String, authenticatorKind: AuthenticatorKind, authenticatorType: AuthenticatorType, before: String, first: Int, last: Int): AuthenticatorConnection

  """The list of third party app authorizations"""
  authorizations(after: String, before: String, first: Int, last: Int): AuthorizationConnection

  """The list of biometric registrations"""
  biometricRegistrations: [Identity!]!

  """The creation time of entity"""
  createdAt: DateTime!

  """The user's custom attributes"""
  customAttributes: UserCustomAttributes!

  """The scheduled deletion time of the user"""
  deleteAt: DateTime

  """The reason of disabled"""
  disableReason: String

  """
  The end user account id constructed based on user's personal data. (e.g. email, phone...etc)
  """
  endUserAccountID: String

  """The user's formatted name"""
  formattedName: String

  """The ID of an object"""
  id: ID!

  """The list of identities"""
  identities(after: String, before: String, first: Int, identityType: IdentityType, last: Int): IdentityConnection

  """Indicates if the user is anonymized"""
  isAnonymized: Boolean!

  """Indicates if the user is anonymous"""
  isAnonymous: Boolean!

  """Indicates if the user is deactivated"""
  isDeactivated: Boolean!

  """Indicates if the user is disabled"""
  isDisabled: Boolean!

  """The last login time of user"""
  lastLoginAt: DateTime

  """The list of login ids"""
  loginIDs: [Identity!]!

  """The list of oauth connections"""
  oauthConnections: [Identity!]!

  """The list of passkeys"""
  passkeys: [Identity!]!

  """The primary passwordless via email authenticator"""
  primaryOOBOTPEmailAuthenticator: Authenticator

  """The primary passwordless via phone authenticator"""
  primaryOOBOTPSMSAuthenticator: Authenticator

  """The primary password authenticator"""
  primaryPassword: Authenticator

  """The list of secondary passwordless via email authenticators"""
  secondaryOOBOTPEmailAuthenticators: [Authenticator!]!

  """The list of secondary passwordless via phone authenticators"""
  secondaryOOBOTPSMSAuthenticators: [Authenticator!]!

  """The secondary password authenticator"""
  secondaryPassword: Authenticator

  """The list of secondary TOTP authenticators"""
  secondaryTOTPAuthenticators: [Authenticator!]!

  """The list of first party app sessions"""
  sessions(after: String, before: String, first: Int, last: Int): SessionConnection

  """The user's standard attributes"""
  standardAttributes: UserStandardAttributes!

  """The update time of entity"""
  updatedAt: DateTime!

  """The list of user's verified claims"""
  verifiedClaims: [Claim!]!

  """The web3 claims"""
  web3: Web3Claims!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""
The `UserCustomAttributes` scalar type represents the custom attributes of the user
"""
scalar UserCustomAttributes

"""An edge in a connection"""
type UserEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: User
}

""""""
enum UserSortBy {
  """"""
  CREATED_AT

  """"""
  LAST_LOGIN_AT
}

"""
The `UserStandardAttributes` scalar type represents the standard attributes of the user
"""
scalar UserStandardAttributes

"""The `Web3Claims` scalar type represents the scalar type of the user"""
scalar Web3Claims
