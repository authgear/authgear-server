""""""
input AddGroupToRolesInput {
  """The key of the group."""
  groupKey: String!

  """The list of role keys."""
  roleKeys: [String!]!
}

""""""
type AddGroupToRolesPayload {
  """"""
  group: Group!
}

""""""
input AddGroupToUsersInput {
  """The key of the group."""
  groupKey: String!

  """The list of user ids."""
  userIDs: [ID!]
}

""""""
type AddGroupToUsersPayload {
  """"""
  group: Group!
}

""""""
input AddRoleToGroupsInput {
  """The list of group keys."""
  groupKeys: [String!]!

  """The key of the role."""
  roleKey: String!
}

""""""
type AddRoleToGroupsPayload {
  """"""
  role: Role!
}

""""""
input AddRoleToUsersInput {
  """The key of the role."""
  roleKey: String!

  """The list of user ids."""
  userIDs: [ID!]
}

""""""
type AddRoleToUsersPayload {
  """"""
  role: Role!
}

""""""
input AddUserToGroupsInput {
  """The list of group keys."""
  groupKeys: [String!]

  """The ID of the user."""
  userID: ID!
}

""""""
type AddUserToGroupsPayload {
  """"""
  user: User!
}

""""""
input AddUserToRolesInput {
  """The list of role keys."""
  roleKeys: [String!]

  """The id of the user."""
  userID: ID!
}

""""""
type AddUserToRolesPayload {
  """"""
  user: User!
}

""""""
input AnonymizeUserInput {
  """Target user ID."""
  userID: ID!
}

""""""
type AnonymizeUserPayload {
  """"""
  anonymizedUserID: ID!
}

"""Audit log"""
type AuditLog implements Node {
  """"""
  activityType: AuditLogActivityType!

  """"""
  clientID: String

  """"""
  createdAt: DateTime!

  """"""
  data: AuditLogData

  """The ID of an object"""
  id: ID!

  """"""
  ipAddress: String

  """"""
  user: User

  """"""
  userAgent: String
}

""""""
enum AuditLogActivityType {
  """"""
  ADMIN_API_MUTATION_ADD_GROUP_TO_ROLES_EXECUTED

  """"""
  ADMIN_API_MUTATION_ADD_GROUP_TO_USERS_EXECUTED

  """"""
  ADMIN_API_MUTATION_ADD_ROLE_TO_GROUPS_EXECUTED

  """"""
  ADMIN_API_MUTATION_ADD_ROLE_TO_USERS_EXECUTED

  """"""
  ADMIN_API_MUTATION_ADD_USER_TO_GROUPS_EXECUTED

  """"""
  ADMIN_API_MUTATION_ADD_USER_TO_ROLES_EXECUTED

  """"""
  ADMIN_API_MUTATION_ANONYMIZE_USER_EXECUTED

  """"""
  ADMIN_API_MUTATION_CREATE_AUTHENTICATOR_EXECUTED

  """"""
  ADMIN_API_MUTATION_CREATE_GROUP_EXECUTED

  """"""
  ADMIN_API_MUTATION_CREATE_IDENTITY_EXECUTED

  """"""
  ADMIN_API_MUTATION_CREATE_ROLE_EXECUTED

  """"""
  ADMIN_API_MUTATION_CREATE_SESSION_EXECUTED

  """"""
  ADMIN_API_MUTATION_CREATE_USER_EXECUTED

  """"""
  ADMIN_API_MUTATION_DELETE_AUTHENTICATOR_EXECUTED

  """"""
  ADMIN_API_MUTATION_DELETE_AUTHORIZATION_EXECUTED

  """"""
  ADMIN_API_MUTATION_DELETE_GROUP_EXECUTED

  """"""
  ADMIN_API_MUTATION_DELETE_IDENTITY_EXECUTED

  """"""
  ADMIN_API_MUTATION_DELETE_ROLE_EXECUTED

  """"""
  ADMIN_API_MUTATION_DELETE_USER_EXECUTED

  """"""
  ADMIN_API_MUTATION_GENERATE_OOB_OTP_CODE_EXECUTED

  """"""
  ADMIN_API_MUTATION_REMOVE_GROUP_FROM_ROLES_EXECUTED

  """"""
  ADMIN_API_MUTATION_REMOVE_GROUP_FROM_USERS_EXECUTED

  """"""
  ADMIN_API_MUTATION_REMOVE_ROLE_FROM_GROUPS_EXECUTED

  """"""
  ADMIN_API_MUTATION_REMOVE_ROLE_FROM_USERS_EXECUTED

  """"""
  ADMIN_API_MUTATION_REMOVE_USER_FROM_GROUPS_EXECUTED

  """"""
  ADMIN_API_MUTATION_REMOVE_USER_FROM_ROLES_EXECUTED

  """"""
  ADMIN_API_MUTATION_RESET_PASSWORD_EXECUTED

  """"""
  ADMIN_API_MUTATION_REVOKE_ALL_SESSIONS_EXECUTED

  """"""
  ADMIN_API_MUTATION_REVOKE_SESSION_EXECUTED

  """"""
  ADMIN_API_MUTATION_SCHEDULE_ACCOUNT_ANONYMIZATION_EXECUTED

  """"""
  ADMIN_API_MUTATION_SCHEDULE_ACCOUNT_DELETION_EXECUTED

  """"""
  ADMIN_API_MUTATION_SEND_RESET_PASSWORD_MESSAGE_EXECUTED

  """"""
  ADMIN_API_MUTATION_SET_DISABLED_STATUS_EXECUTED

  """"""
  ADMIN_API_MUTATION_SET_PASSWORD_EXPIRED_EXECUTED

  """"""
  ADMIN_API_MUTATION_SET_VERIFIED_STATUS_EXECUTED

  """"""
  ADMIN_API_MUTATION_UNSCHEDULE_ACCOUNT_ANONYMIZATION_EXECUTED

  """"""
  ADMIN_API_MUTATION_UNSCHEDULE_ACCOUNT_DELETION_EXECUTED

  """"""
  ADMIN_API_MUTATION_UPDATE_GROUP_EXECUTED

  """"""
  ADMIN_API_MUTATION_UPDATE_IDENTITY_EXECUTED

  """"""
  ADMIN_API_MUTATION_UPDATE_ROLE_EXECUTED

  """"""
  ADMIN_API_MUTATION_UPDATE_USER_EXECUTED

  """"""
  AUTHENTICATION_IDENTITY_ANONYMOUS_FAILED

  """"""
  AUTHENTICATION_IDENTITY_BIOMETRIC_FAILED

  """"""
  AUTHENTICATION_IDENTITY_LOGIN_ID_FAILED

  """"""
  AUTHENTICATION_PRIMARY_OOB_OTP_EMAIL_FAILED

  """"""
  AUTHENTICATION_PRIMARY_OOB_OTP_SMS_FAILED

  """"""
  AUTHENTICATION_PRIMARY_PASSWORD_FAILED

  """"""
  AUTHENTICATION_SECONDARY_OOB_OTP_EMAIL_FAILED

  """"""
  AUTHENTICATION_SECONDARY_OOB_OTP_SMS_FAILED

  """"""
  AUTHENTICATION_SECONDARY_PASSWORD_FAILED

  """"""
  AUTHENTICATION_SECONDARY_RECOVERY_CODE_FAILED

  """"""
  AUTHENTICATION_SECONDARY_TOTP_FAILED

  """"""
  BOT_PROTECTION_VERIFICATION_FAILED

  """"""
  EMAIL_ERROR

  """"""
  EMAIL_SENT

  """"""
  EMAIL_SUPPRESSED

  """"""
  IDENTITY_BIOMETRIC_DISABLED

  """"""
  IDENTITY_BIOMETRIC_ENABLED

  """"""
  IDENTITY_EMAIL_ADDED

  """"""
  IDENTITY_EMAIL_REMOVED

  """"""
  IDENTITY_EMAIL_UNVERIFIED

  """"""
  IDENTITY_EMAIL_UPDATED

  """"""
  IDENTITY_EMAIL_VERIFIED

  """"""
  IDENTITY_OAUTH_CONNECTED

  """"""
  IDENTITY_OAUTH_DISCONNECTED

  """"""
  IDENTITY_PHONE_ADDED

  """"""
  IDENTITY_PHONE_REMOVED

  """"""
  IDENTITY_PHONE_UNVERIFIED

  """"""
  IDENTITY_PHONE_UPDATED

  """"""
  IDENTITY_PHONE_VERIFIED

  """"""
  IDENTITY_USERNAME_ADDED

  """"""
  IDENTITY_USERNAME_REMOVED

  """"""
  IDENTITY_USERNAME_UPDATED

  """"""
  PROJECT_APP_SECRET_VIEWED

  """"""
  PROJECT_APP_UPDATED

  """"""
  PROJECT_BILLING_CHECKOUT_CREATED

  """"""
  PROJECT_BILLING_SUBSCRIPTION_CANCELLED

  """"""
  PROJECT_BILLING_SUBSCRIPTION_STATUS_UPDATED

  """"""
  PROJECT_BILLING_SUBSCRIPTION_UPDATED

  """"""
  PROJECT_COLLABORATOR_DELETED

  """"""
  PROJECT_COLLABORATOR_INVITATION_ACCEPTED

  """"""
  PROJECT_COLLABORATOR_INVITATION_CREATED

  """"""
  PROJECT_COLLABORATOR_INVITATION_DELETED

  """"""
  PROJECT_DOMAIN_CREATED

  """"""
  PROJECT_DOMAIN_DELETED

  """"""
  PROJECT_DOMAIN_VERIFIED

  """"""
  SMS_ERROR

  """"""
  SMS_SENT

  """"""
  SMS_SUPPRESSED

  """"""
  USER_ANONYMIZATION_SCHEDULED

  """"""
  USER_ANONYMIZATION_UNSCHEDULED

  """"""
  USER_ANONYMIZED

  """"""
  USER_ANONYMOUS_PROMOTED

  """"""
  USER_AUTHENTICATED

  """"""
  USER_CREATED

  """"""
  USER_DELETED

  """"""
  USER_DELETION_SCHEDULED

  """"""
  USER_DELETION_UNSCHEDULED

  """"""
  USER_DISABLED

  """"""
  USER_PROFILE_UPDATED

  """"""
  USER_REENABLED

  """"""
  USER_SESSION_TERMINATED

  """"""
  USER_SIGNED_OUT

  """"""
  WHATSAPP_ERROR

  """"""
  WHATSAPP_OTP_VERIFIED

  """"""
  WHATSAPP_SENT

  """"""
  WHATSAPP_SUPPRESSED
}

"""A connection to a list of items."""
type AuditLogConnection {
  """Information to aid in pagination."""
  edges: [AuditLogEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""The `AuditLogData` scalar type represents the data of the audit log"""
scalar AuditLogData

"""An edge in a connection"""
type AuditLogEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AuditLog
}

""""""
type Authenticator implements Entity & Node {
  """"""
  claims(names: [String!]): AuthenticatorClaims!

  """The creation time of entity"""
  createdAt: DateTime!

  """"""
  expireAfter: DateTime

  """The ID of an object"""
  id: ID!

  """"""
  isDefault: Boolean!

  """"""
  kind: AuthenticatorKind!

  """"""
  type: AuthenticatorType!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""
The `AuthenticatorClaims` scalar type represents a set of claims belonging to an authenticator
"""
scalar AuthenticatorClaims

"""A connection to a list of items."""
type AuthenticatorConnection {
  """Information to aid in pagination."""
  edges: [AuthenticatorEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""
Definition of an authenticator. This is a union object, exactly one of the available fields must be present.
"""
input AuthenticatorDefinition {
  """Kind of authenticator."""
  kind: AuthenticatorKind!

  """
  OOB OTP Email authenticator definition. Must be provided when type is OOB_OTP_EMAIL.
  """
  oobOtpEmail: AuthenticatorDefinitionOOBOTPEmail

  """
  OOB OTP SMS authenticator definition. Must be provided when type is OOB_OTP_SMS.
  """
  oobOtpSMS: AuthenticatorDefinitionOOBOTPSMS

  """
  Password authenticator definition. Must be provided when type is PASSWORD.
  """
  password: AuthenticatorDefinitionPassword

  """Type of authenticator."""
  type: AuthenticatorType!
}

""""""
input AuthenticatorDefinitionOOBOTPEmail {
  """Email of the new oob otp sms authenticator."""
  email: String!
}

""""""
input AuthenticatorDefinitionOOBOTPSMS {
  """Phone number of the new oob otp sms authenticator."""
  phone: String!
}

""""""
input AuthenticatorDefinitionPassword {
  """Password of the new authenticator."""
  password: String!
}

"""An edge in a connection"""
type AuthenticatorEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Authenticator
}

""""""
enum AuthenticatorKind {
  """"""
  PRIMARY

  """"""
  SECONDARY
}

""""""
enum AuthenticatorType {
  """"""
  OOB_OTP_EMAIL

  """"""
  OOB_OTP_SMS

  """"""
  PASSKEY

  """"""
  PASSWORD

  """"""
  TOTP
}

""""""
type Authorization implements Entity & Node {
  """"""
  clientID: String!

  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of an object"""
  id: ID!

  """"""
  scopes: [String!]!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AuthorizationConnection {
  """Information to aid in pagination."""
  edges: [AuthorizationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type AuthorizationEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Authorization
}

""""""
type Claim {
  """"""
  name: String!

  """"""
  value: String!
}

""""""
input CreateAuthenticatorInput {
  """Definition of the new authenticator."""
  definition: AuthenticatorDefinition!

  """Target user ID."""
  userID: ID!
}

""""""
type CreateAuthenticatorPayload {
  """"""
  authenticator: Authenticator!
}

""""""
input CreateGroupInput {
  """The optional description of the group."""
  description: String

  """The key of the group."""
  key: String!

  """The optional name of the group."""
  name: String
}

""""""
type CreateGroupPayload {
  """"""
  group: Group!
}

""""""
input CreateIdentityInput {
  """Definition of the new identity."""
  definition: IdentityDefinition!

  """Password for the user if required."""
  password: String

  """Target user ID."""
  userID: ID!
}

""""""
type CreateIdentityPayload {
  """"""
  identity: Identity!

  """"""
  user: User!
}

""""""
input CreateRoleInput {
  """The optional description of the role."""
  description: String

  """The key of the role."""
  key: String!

  """The optional name of the role."""
  name: String
}

""""""
type CreateRolePayload {
  """"""
  role: Role!
}

""""""
input CreateSessionInput {
  """Target client ID."""
  clientID: String!

  """Base64-encoded Device information."""
  deviceInfo: String

  """Target user ID."""
  userID: ID!
}

""""""
type CreateSessionPayload {
  """"""
  accessToken: String!

  """"""
  expiresIn: Int!

  """"""
  refreshToken: String!

  """"""
  tokenType: String!
}

""""""
input CreateUserInput {
  """Definition of the identity of new user."""
  definition: IdentityDefinition!

  """Password for the user if required."""
  password: String

  """Indicate whether to send the new password to the user."""
  sendPassword: Boolean

  """
  Indicate whether the user is required to change password on next login.
  """
  setPasswordExpired: Boolean
}

""""""
type CreateUserPayload {
  """"""
  user: User!
}

"""
The `DateTime` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar DateTime

""""""
input DeleteAuthenticatorInput {
  """Target authenticator ID."""
  authenticatorID: ID!
}

""""""
type DeleteAuthenticatorPayload {
  """"""
  user: User!
}

""""""
input DeleteAuthorizationInput {
  """Target authorization ID."""
  authorizationID: ID!
}

""""""
type DeleteAuthorizationPayload {
  """"""
  user: User!
}

""""""
input DeleteGroupInput {
  """The ID of the group."""
  id: ID!
}

""""""
type DeleteGroupPayload {
  """"""
  ok: Boolean
}

""""""
input DeleteIdentityInput {
  """Target identity ID."""
  identityID: ID!
}

""""""
type DeleteIdentityPayload {
  """"""
  user: User!
}

""""""
input DeleteRoleInput {
  """The ID of the role."""
  id: ID!
}

""""""
type DeleteRolePayload {
  """"""
  ok: Boolean
}

""""""
input DeleteUserInput {
  """Target user ID."""
  userID: ID!
}

""""""
type DeleteUserPayload {
  """"""
  deletedUserID: ID!
}

""""""
interface Entity {
  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of entity"""
  id: ID!

  """The update time of entity"""
  updatedAt: DateTime!
}

""""""
input GenerateOOBOTPCodeInput {
  """Purpose of the generated OTP code."""
  purpose: OTPPurpose

  """Target user's email or phone number."""
  target: String!
}

""""""
type GenerateOOBOTPCodePayload {
  """"""
  code: String!
}

"""Authgear group"""
type Group implements Entity & Node {
  """The creation time of entity"""
  createdAt: DateTime!

  """The optional description of the group."""
  description: String

  """The ID of an object"""
  id: ID!

  """The key of the group."""
  key: String!

  """The optional name of the group."""
  name: String

  """The list of roles this group has."""
  roles(after: String, before: String, first: Int, last: Int): RoleConnection

  """The update time of entity"""
  updatedAt: DateTime!

  """The list of users in the group."""
  users(after: String, before: String, first: Int, last: Int): UserConnection
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  edges: [GroupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type GroupEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Group
}

""""""
type Identity implements Entity & Node {
  """"""
  claims(names: [String!]): IdentityClaims!

  """The creation time of entity"""
  createdAt: DateTime!

  """The ID of an object"""
  id: ID!

  """"""
  type: IdentityType!

  """The update time of entity"""
  updatedAt: DateTime!
}

"""
The `IdentityClaims` scalar type represents a set of claims belonging to an identity
"""
scalar IdentityClaims

"""A connection to a list of items."""
type IdentityConnection {
  """Information to aid in pagination."""
  edges: [IdentityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""
Definition of an identity. This is a union object, exactly one of the available fields must be present.
"""
input IdentityDefinition {
  """Login ID identity definition."""
  loginID: IdentityDefinitionLoginID
}

""""""
input IdentityDefinitionLoginID {
  """The login ID key."""
  key: String!

  """The login ID."""
  value: String!
}

"""An edge in a connection"""
type IdentityEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Identity
}

""""""
enum IdentityType {
  """"""
  ANONYMOUS

  """"""
  BIOMETRIC

  """"""
  LDAP

  """"""
  LOGIN_ID

  """"""
  OAUTH

  """"""
  PASSKEY

  """"""
  SIWE
}

""""""
type Mutation {
  """Add the group to the roles."""
  addGroupToRoles(input: AddGroupToRolesInput!): AddGroupToRolesPayload!

  """Add the group to the users."""
  addGroupToUsers(input: AddGroupToUsersInput!): AddGroupToUsersPayload!

  """Add the role to the groups."""
  addRoleToGroups(input: AddRoleToGroupsInput!): AddRoleToGroupsPayload!

  """Add the role to the users."""
  addRoleToUsers(input: AddRoleToUsersInput!): AddRoleToUsersPayload!

  """Add the user to the groups."""
  addUserToGroups(input: AddUserToGroupsInput!): AddUserToGroupsPayload!

  """Add the user to the roles."""
  addUserToRoles(input: AddUserToRolesInput!): AddUserToRolesPayload!

  """Anonymize specified user"""
  anonymizeUser(input: AnonymizeUserInput!): AnonymizeUserPayload!

  """Create authenticator of user"""
  createAuthenticator(input: CreateAuthenticatorInput!): CreateAuthenticatorPayload!

  """Create a new group."""
  createGroup(input: CreateGroupInput!): CreateGroupPayload!

  """Create new identity for user"""
  createIdentity(input: CreateIdentityInput!): CreateIdentityPayload!

  """Create a new role."""
  createRole(input: CreateRoleInput!): CreateRolePayload!

  """Create a session of a given user"""
  createSession(input: CreateSessionInput!): CreateSessionPayload!

  """Create new user"""
  createUser(input: CreateUserInput!): CreateUserPayload!

  """Delete authenticator of user"""
  deleteAuthenticator(input: DeleteAuthenticatorInput!): DeleteAuthenticatorPayload!

  """Delete authorization"""
  deleteAuthorization(input: DeleteAuthorizationInput!): DeleteAuthorizationPayload!

  """
  Delete an existing group. The associations between the group with other roles and other users will also be deleted.
  """
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload!

  """Delete identity of user"""
  deleteIdentity(input: DeleteIdentityInput!): DeleteIdentityPayload!

  """
  Delete an existing role. The associations between the role with other groups and other users will also be deleted.
  """
  deleteRole(input: DeleteRoleInput!): DeleteRolePayload!

  """Delete specified user"""
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!

  """Generate OOB OTP code for user"""
  generateOOBOTPCode(input: GenerateOOBOTPCodeInput!): GenerateOOBOTPCodePayload!

  """Remove the group from the roles."""
  removeGroupFromRoles(input: RemoveGroupFromRolesInput!): RemoveGroupFromRolesPayload!

  """Remove the group to the users."""
  removeGroupFromUsers(input: RemoveGroupFromUsersInput!): RemoveGroupToUsersPayload!

  """Revoke user grace period for MFA enrollment"""
  removeMFAGracePeriod(input: removeMFAGracePeriodInput!): removeMFAGracePeriodPayload!

  """Remove the role from the groups."""
  removeRoleFromGroups(input: RemoveRoleFromGroupsInput!): RemoveRoleFromGroupsPayload!

  """Remove the role to the users."""
  removeRoleFromUsers(input: RemoveRoleFromUsersInput!): RemoveRoleFromUsersPayload!

  """Remove the user from the groups."""
  removeUserFromGroups(input: RemoveUserFromGroupsInput!): RemoveUserFromGroupsPayload!

  """Remove the user from the roles."""
  removeUserFromRoles(input: RemoveUserFromRolesInput!): RemoveUserFromRolesPayload!

  """Reset password of user"""
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!

  """Revoke all sessions of user"""
  revokeAllSessions(input: RevokeAllSessionsInput!): RevokeAllSessionsPayload!

  """Revoke session of user"""
  revokeSession(input: RevokeSessionInput!): RevokeSessionPayload!

  """Schedule account anonymization"""
  scheduleAccountAnonymization(input: ScheduleAccountAnonymizationInput!): ScheduleAccountAnonymizationPayload!

  """Schedule account deletion"""
  scheduleAccountDeletion(input: ScheduleAccountDeletionInput!): ScheduleAccountDeletionPayload!

  """Send a reset password message to user"""
  sendResetPasswordMessage(input: SendResetPasswordMessageInput!): Boolean

  """Set disabled status of user"""
  setDisabledStatus(input: SetDisabledStatusInput!): SetDisabledStatusPayload!

  """Grant user grace period for MFA enrollment"""
  setMFAGracePeriod(input: SetMFAGracePeriodInput!): SetMFAGracePeriodPayload!

  """Force user to change password on next login"""
  setPasswordExpired(input: SetPasswordExpiredInput!): SetPasswordExpiredPayload!

  """Set verified status of a claim of user"""
  setVerifiedStatus(input: SetVerifiedStatusInput!): SetVerifiedStatusPayload!

  """Unschedule account anonymization"""
  unscheduleAccountAnonymization(input: UnscheduleAccountAnonymizationInput!): UnscheduleAccountAnonymizationPayload!

  """Unschedule account deletion"""
  unscheduleAccountDeletion(input: UnscheduleAccountDeletionInput!): UnscheduleAccountDeletionPayload!

  """Update an existing group."""
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload!

  """Update an existing identity of user"""
  updateIdentity(input: UpdateIdentityInput!): UpdateIdentityPayload!

  """Update an existing role."""
  updateRole(input: UpdateRoleInput!): UpdateRolePayload!

  """Update user"""
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
}

"""An object with an ID"""
interface Node {
  """The id of the object"""
  id: ID!
}

""""""
enum OTPPurpose {
  """"""
  LOGIN

  """"""
  VERIFICATION
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

""""""
type Query {
  """Audit logs"""
  auditLogs(activityTypes: [AuditLogActivityType!], after: String, before: String, emailAddresses: [String!], first: Int, last: Int, phoneNumbers: [String!], rangeFrom: DateTime, rangeTo: DateTime, sortDirection: SortDirection, userIDs: [ID!]): AuditLogConnection

  """Get user by Login ID."""
  getUserByLoginID(loginIDKey: String!, loginIDValue: String!): User

  """Get user by OAuth Alias and user ID."""
  getUserByOAuth(oauthProviderAlias: String!, oauthProviderUserID: String!): User

  """
  Get users by standardAttribute, attributeName must be email, phone_number or preferred_username.
  """
  getUsersByStandardAttribute(attributeName: String!, attributeValue: String!): [User!]!

  """All groups"""
  groups(after: String, before: String, excludedIDs: [ID!], first: Int, last: Int, searchKeyword: String): GroupConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """All roles"""
  roles(after: String, before: String, excludedIDs: [ID!], first: Int, last: Int, searchKeyword: String): RoleConnection

  """All users"""
  users(after: String, before: String, first: Int, groupKeys: [String!], last: Int, roleKeys: [String!], searchKeyword: String, sortBy: UserSortBy, sortDirection: SortDirection): UserConnection
}

""""""
input RemoveGroupFromRolesInput {
  """The key of the group."""
  groupKey: String!

  """The list of role keys."""
  roleKeys: [String!]!
}

""""""
type RemoveGroupFromRolesPayload {
  """"""
  group: Group!
}

""""""
input RemoveGroupFromUsersInput {
  """The key of the group."""
  groupKey: String!

  """The list of user ids."""
  userIDs: [ID!]
}

""""""
type RemoveGroupToUsersPayload {
  """"""
  group: Group!
}

""""""
input RemoveRoleFromGroupsInput {
  """The list of group keys."""
  groupKeys: [String!]!

  """The key of the role."""
  roleKey: String!
}

""""""
type RemoveRoleFromGroupsPayload {
  """"""
  role: Role!
}

""""""
input RemoveRoleFromUsersInput {
  """The key of the role."""
  roleKey: String!

  """The list of user ids."""
  userIDs: [ID!]
}

""""""
type RemoveRoleFromUsersPayload {
  """"""
  role: Role!
}

""""""
input RemoveUserFromGroupsInput {
  """The list of group keys."""
  groupKeys: [String!]

  """The ID of the user."""
  userID: ID!
}

""""""
type RemoveUserFromGroupsPayload {
  """"""
  user: User!
}

""""""
input RemoveUserFromRolesInput {
  """The list of role keys."""
  roleKeys: [String!]

  """The id of the user."""
  userID: ID!
}

""""""
type RemoveUserFromRolesPayload {
  """"""
  user: User!
}

""""""
input ResetPasswordInput {
  """New password."""
  password: String

  """Indicate whether to send the new password to the user."""
  sendPassword: Boolean

  """
  Indicate whether the user is required to change password on next login.
  """
  setPasswordExpired: Boolean

  """Target user ID."""
  userID: ID!
}

""""""
type ResetPasswordPayload {
  """"""
  user: User!
}

""""""
input RevokeAllSessionsInput {
  """Target user ID."""
  userID: ID!
}

""""""
type RevokeAllSessionsPayload {
  """"""
  user: User!
}

""""""
input RevokeSessionInput {
  """Target session ID."""
  sessionID: ID!
}

""""""
type RevokeSessionPayload {
  """"""
  user: User!
}

"""Authgear role"""
type Role implements Entity & Node {
  """The creation time of entity"""
  createdAt: DateTime!

  """The optional description of the role."""
  description: String

  """The list of groups this role is in."""
  groups(after: String, before: String, first: Int, last: Int): GroupConnection

  """The ID of an object"""
  id: ID!

  """The key of the role."""
  key: String!

  """The optional name of the role."""
  name: String

  """The update time of entity"""
  updatedAt: DateTime!

  """The list of users who has this role."""
  users(after: String, before: String, first: Int, last: Int): UserConnection
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  edges: [RoleEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type RoleEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Role
}

""""""
input ScheduleAccountAnonymizationInput {
  """Target user ID."""
  userID: ID!
}

""""""
type ScheduleAccountAnonymizationPayload {
  """"""
  user: User!
}

""""""
input ScheduleAccountDeletionInput {
  """Target user ID."""
  userID: ID!
}

""""""
type ScheduleAccountDeletionPayload {
  """"""
  user: User!
}

""""""
input SendResetPasswordMessageInput {
  """Target login ID."""
  loginID: ID!
}

""""""
type Session implements Entity & Node {
  """"""
  acr: String!

  """"""
  amr: [String!]!

  """"""
  clientID: String

  """The creation time of entity"""
  createdAt: DateTime!

  """"""
  createdByIP: String!

  """"""
  displayName: String!

  """The ID of an object"""
  id: ID!

  """"""
  lastAccessedAt: DateTime!

  """"""
  lastAccessedByIP: String!

  """"""
  type: SessionType!

  """The update time of entity"""
  updatedAt: DateTime!

  """"""
  userAgent: String
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  edges: [SessionEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""An edge in a connection"""
type SessionEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Session
}

""""""
enum SessionType {
  """"""
  IDP

  """"""
  OFFLINE_GRANT
}

""""""
input SetDisabledStatusInput {
  """Indicate whether the target user is disabled."""
  isDisabled: Boolean!

  """
  Indicate the disable reason; If not provided, the user will be disabled with no reason.
  """
  reason: String

  """Target user ID."""
  userID: ID!
}

""""""
type SetDisabledStatusPayload {
  """"""
  user: User!
}

""""""
input SetMFAGracePeriodInput {
  """Indicate when will user's MFA grace period end"""
  endAt: DateTime!

  """Target user ID"""
  userID: ID!
}

""""""
type SetMFAGracePeriodPayload {
  """"""
  user: User!
}

""""""
input SetPasswordExpiredInput {
  """Indicate whether the user's password is expired."""
  expired: Boolean!

  """Target user ID."""
  userID: ID!
}

""""""
type SetPasswordExpiredPayload {
  """"""
  user: User!
}

""""""
input SetVerifiedStatusInput {
  """Name of the claim to set verified status."""
  claimName: String!

  """Value of the claim."""
  claimValue: String!

  """Indicate whether the target claim is verified."""
  isVerified: Boolean!

  """Target user ID."""
  userID: ID!
}

""""""
type SetVerifiedStatusPayload {
  """"""
  user: User!
}

""""""
enum SortDirection {
  """"""
  ASC

  """"""
  DESC
}

""""""
input UnscheduleAccountAnonymizationInput {
  """Target user ID."""
  userID: ID!
}

""""""
type UnscheduleAccountAnonymizationPayload {
  """"""
  user: User!
}

""""""
input UnscheduleAccountDeletionInput {
  """Target user ID."""
  userID: ID!
}

""""""
type UnscheduleAccountDeletionPayload {
  """"""
  user: User!
}

""""""
input UpdateGroupInput {
  """
  The new description of the group. Pass null if you do not need to update the description. Pass an empty string to remove the description.
  """
  description: String

  """The ID of the group."""
  id: ID!

  """
  The new key of the group. Pass null if you do not need to update the key.
  """
  key: String

  """
  The new name of the group. Pass null if you do not need to update the name. Pass an empty string to remove the name.
  """
  name: String
}

""""""
type UpdateGroupPayload {
  """"""
  group: Group!
}

""""""
input UpdateIdentityInput {
  """New definition of the identity."""
  definition: IdentityDefinition!

  """Target identity ID."""
  identityID: ID!

  """Target user ID."""
  userID: ID!
}

""""""
type UpdateIdentityPayload {
  """"""
  identity: Identity!

  """"""
  user: User!
}

""""""
input UpdateRoleInput {
  """
  The new description of the role. Pass null if you do not need to update the description. Pass an empty string to remove the description.
  """
  description: String

  """The ID of the role."""
  id: ID!

  """
  The new key of the role. Pass null if you do not need to update the key.
  """
  key: String

  """
  The new name of the role. Pass null if you do not need to update the name. Pass an empty string to remove the name.
  """
  name: String
}

""""""
type UpdateRolePayload {
  """"""
  role: Role!
}

""""""
input UpdateUserInput {
  """Whole custom attributes to be set on the user."""
  customAttributes: UserCustomAttributes

  """Whole standard attributes to be set on the user."""
  standardAttributes: UserStandardAttributes

  """Target user ID."""
  userID: ID!
}

""""""
type UpdateUserPayload {
  """"""
  user: User!
}

"""Authgear user"""
type User implements Entity & Node {
  """The scheduled anonymization time of the user"""
  anonymizeAt: DateTime

  """The list of authenticators"""
  authenticators(after: String, authenticatorKind: AuthenticatorKind, authenticatorType: AuthenticatorType, before: String, first: Int, last: Int): AuthenticatorConnection

  """The list of third party app authorizations"""
  authorizations(after: String, before: String, first: Int, last: Int): AuthorizationConnection

  """The list of biometric registrations"""
  biometricRegistrations: [Identity!]!

  """The creation time of entity"""
  createdAt: DateTime!

  """The user's custom attributes"""
  customAttributes: UserCustomAttributes!

  """The scheduled deletion time of the user"""
  deleteAt: DateTime

  """The reason of disabled"""
  disableReason: String

  """The list of computed roles this user has."""
  effectiveRoles(after: String, before: String, first: Int, last: Int): RoleConnection

  """
  The end user account id constructed based on user's personal data. (e.g. email, phone...etc)
  """
  endUserAccountID: String

  """The user's formatted name"""
  formattedName: String

  """The list of groups this user has."""
  groups(after: String, before: String, first: Int, last: Int): GroupConnection

  """The ID of an object"""
  id: ID!

  """The list of identities"""
  identities(after: String, before: String, first: Int, identityType: IdentityType, last: Int): IdentityConnection

  """Indicates if the user is anonymized"""
  isAnonymized: Boolean!

  """Indicates if the user is anonymous"""
  isAnonymous: Boolean!

  """Indicates if the user is deactivated"""
  isDeactivated: Boolean!

  """Indicates if the user is disabled"""
  isDisabled: Boolean!

  """The last login time of user"""
  lastLoginAt: DateTime

  """The list of login ids"""
  loginIDs: [Identity!]!

  """Indicate when will user's MFA grace period will end"""
  mfaGracePeriodEndAt: DateTime

  """The list of oauth connections"""
  oauthConnections: [Identity!]!

  """The list of passkeys"""
  passkeys: [Identity!]!

  """The primary passwordless via email authenticator"""
  primaryOOBOTPEmailAuthenticator: Authenticator

  """The primary passwordless via phone authenticator"""
  primaryOOBOTPSMSAuthenticator: Authenticator

  """The primary password authenticator"""
  primaryPassword: Authenticator

  """The list of roles this user has."""
  roles(after: String, before: String, first: Int, last: Int): RoleConnection

  """The list of secondary passwordless via email authenticators"""
  secondaryOOBOTPEmailAuthenticators: [Authenticator!]!

  """The list of secondary passwordless via phone authenticators"""
  secondaryOOBOTPSMSAuthenticators: [Authenticator!]!

  """The secondary password authenticator"""
  secondaryPassword: Authenticator

  """The list of secondary TOTP authenticators"""
  secondaryTOTPAuthenticators: [Authenticator!]!

  """The list of first party app sessions"""
  sessions(after: String, before: String, first: Int, last: Int): SessionConnection

  """The user's standard attributes"""
  standardAttributes: UserStandardAttributes!

  """The update time of entity"""
  updatedAt: DateTime!

  """The list of user's verified claims"""
  verifiedClaims: [Claim!]!

  """The web3 claims"""
  web3: Web3Claims!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total number of nodes in the connection."""
  totalCount: Int
}

"""
The `UserCustomAttributes` scalar type represents the custom attributes of the user
"""
scalar UserCustomAttributes

"""An edge in a connection"""
type UserEdge {
  """ cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: User
}

""""""
enum UserSortBy {
  """"""
  CREATED_AT

  """"""
  LAST_LOGIN_AT
}

"""
The `UserStandardAttributes` scalar type represents the standard attributes of the user
"""
scalar UserStandardAttributes

"""The `Web3Claims` scalar type represents the scalar type of the user"""
scalar Web3Claims

""""""
input removeMFAGracePeriodInput {
  """Target user ID"""
  userID: ID!
}

""""""
type removeMFAGracePeriodPayload {
  """"""
  user: User!
}
