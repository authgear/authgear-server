""""""
input AcceptCollaboratorInvitationInput {
  """Invitation code."""
  code: String!
}

""""""
type AcceptCollaboratorInvitationPayload {
  """"""
  app: App!
}

""""""
input AdminAPIAuthKeyDeleteDataInput {
  """"""
  keyID: String!
}

""""""
input AdminAPIAuthKeyUpdateInstructionInput {
  """"""
  action: String!

  """"""
  deleteData: AdminAPIAuthKeyDeleteDataInput
}

"""Admin API secret"""
type AdminAPISecret {
  """"""
  createdAt: DateTime

  """"""
  keyID: String!

  """"""
  privateKeyPEM: String

  """"""
  publicKeyPEM: String!
}

"""Authgear app"""
type App implements Node {
  """"""
  collaboratorInvitations: [CollaboratorInvitation!]!

  """"""
  collaborators: [Collaborator!]!

  """"""
  domains: [Domain!]!

  """"""
  effectiveAppConfig: AppConfig!

  """"""
  effectiveFeatureConfig: FeatureConfig!

  """The ID of an object"""
  id: ID!

  """"""
  isProcessingSubscription: Boolean!

  """"""
  lastStripeError: StripeError

  """"""
  planName: String!

  """"""
  rawAppConfig: AppConfig!

  """"""
  rawAppConfigChecksum: AppConfig!

  """"""
  resources(paths: [String!]): [AppResource!]!

  """"""
  samlIdpEntityID: String!

  """"""
  secretConfig(token: String): SecretConfig!

  """"""
  secretConfigChecksum: AppConfig!

  """"""
  subscription: Subscription

  """"""
  subscriptionUsage(date: DateTime!): SubscriptionUsage

  """"""
  tutorialStatus: TutorialStatus!

  """"""
  usage(date: DateTime!): Usage

  """"""
  viewer: Collaborator!
}

"""The `AppConfig` scalar type represents an app config JSON object"""
scalar AppConfig

""""""
type AppListItem {
  """"""
  appID: String!

  """"""
  publicOrigin: String!
}

"""Resource file for an app"""
type AppResource {
  """
  The checksum of the resource file. It is an opaque string that will be used to detect conflict.
  """
  checksum: String

  """"""
  data: String

  """"""
  effectiveData: String

  """"""
  languageTag: String

  """"""
  path: String!
}

"""Update to resource file."""
input AppResourceUpdate {
  """
  The checksum of the original resource file. If provided, it will be used to detect conflict.
  """
  checksum: String

  """New data of the resource file. Set to null to remove it."""
  data: String

  """Path of the resource file to update."""
  path: String!
}

""""""
enum AppSecretKey {
  """"""
  ADMIN_API_SECRETS

  """"""
  BOT_PROTECTION_PROVIDER_SECRET

  """"""
  OAUTH_CLIENT_SECRETS

  """"""
  OAUTH_SSO_PROVIDER_CLIENT_SECRETS

  """"""
  SAML_IDP_SIGNING_SECRETS

  """"""
  SAML_SP_SIGNING_SECRETS

  """"""
  SMS_PROVIDER_SECRETS

  """"""
  SMTP_SECRET

  """"""
  WEBHOOK_SECRET
}

"""Bot protection provider secret"""
type BotProtectionProviderSecret {
  """"""
  secretKey: String

  """"""
  type: String!
}

""""""
input BotProtectionProviderSecretInput {
  """"""
  secretKey: String

  """"""
  type: String!
}

""""""
input BotProtectionProviderSecretUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  data: BotProtectionProviderSecretInput
}

""""""
type CancelFailedSubscriptionPayload {
  """"""
  app: App!
}

""""""
type Chart {
  """"""
  dataset: [DataPoint]!
}

""""""
type CheckCollaboratorInvitationPayload {
  """"""
  appID: String!

  """"""
  isInvitee: Boolean!
}

"""Collaborator of an app"""
type Collaborator {
  """"""
  createdAt: DateTime!

  """"""
  id: String!

  """"""
  role: CollaboratorRole!

  """"""
  user: User!
}

"""Collaborator invitation of an app"""
type CollaboratorInvitation {
  """"""
  createdAt: DateTime!

  """"""
  expireAt: DateTime!

  """"""
  id: String!

  """"""
  invitedBy: User!

  """"""
  inviteeEmail: String!
}

""""""
enum CollaboratorRole {
  """"""
  EDITOR

  """"""
  OWNER
}

""""""
input CreateAppInput {
  """ID of the new app."""
  id: String!
}

""""""
type CreateAppPayload {
  """"""
  app: App!
}

""""""
input CreateCheckoutSessionInput {
  """App ID."""
  appID: ID!

  """Plan name."""
  planName: String!
}

""""""
type CreateCheckoutSessionPayload {
  """"""
  url: String!
}

""""""
input CreateCollaboratorInvitationInput {
  """Target app ID."""
  appID: ID!

  """Invitee email address."""
  inviteeEmail: String!
}

""""""
type CreateCollaboratorInvitationPayload {
  """"""
  app: App!

  """"""
  collaboratorInvitation: CollaboratorInvitation!
}

""""""
input CreateDomainInput {
  """Target app ID."""
  appID: ID!

  """Domain name."""
  domain: String!
}

""""""
type CreateDomainPayload {
  """"""
  app: App!

  """"""
  domain: Domain!
}

""""""
input CustomSmsProviderSecretsInput {
  """"""
  timeout: Int

  """"""
  url: String!
}

""""""
type DataPoint {
  """"""
  data: Float!

  """"""
  label: String!
}

"""
The `Date` scalar type represents a Date. The Date is serialized in ISO 8601 format
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar DateTime

""""""
input DeleteCollaboratorInput {
  """Collaborator ID."""
  collaboratorID: String!
}

""""""
input DeleteCollaboratorInvitationInput {
  """Collaborator invitation ID."""
  collaboratorInvitationID: String!
}

""""""
type DeleteCollaboratorInvitationPayload {
  """"""
  app: App!
}

""""""
type DeleteCollaboratorPayload {
  """"""
  app: App!
}

""""""
input DeleteDomainInput {
  """Target app ID."""
  appID: ID!

  """Domain ID."""
  domainID: String!
}

""""""
type DeleteDomainPayload {
  """"""
  app: App!
}

"""DNS domain of an app"""
type Domain {
  """"""
  apexDomain: String!

  """"""
  cookieDomain: String!

  """"""
  createdAt: DateTime!

  """"""
  domain: String!

  """"""
  id: String!

  """"""
  isCustom: Boolean!

  """"""
  isVerified: Boolean!

  """"""
  verificationDNSRecord: String!
}

"""
The `FeatureConfig` scalar type represents an feature config JSON object
"""
scalar FeatureConfig

""""""
input GenerateAppSecretVisitTokenInput {
  """ID of the app."""
  id: ID!

  """Secrets to visit."""
  secrets: [AppSecretKey!]!
}

""""""
type GenerateAppSecretVisitTokenPayloadPayload {
  """The generated token"""
  token: String!
}

""""""
input GenerateStripeCustomerPortalSessionInput {
  """Target app ID."""
  appID: ID!
}

""""""
type GenerateStripeCustomerPortalSessionPayload {
  """"""
  url: String!
}

""""""
input GenerateTestTokenInput {
  """ID of the app."""
  id: ID!

  """URI to return to in the tester page"""
  returnUri: String!
}

""""""
type GenerateTestTokenPayload {
  """The generated token"""
  token: String!
}

""""""
type Mutation {
  """Accept collaborator invitation to the target app."""
  acceptCollaboratorInvitation(input: AcceptCollaboratorInvitationInput!): AcceptCollaboratorInvitationPayload!

  """Cancel failed subscription"""
  cancelFailedSubscription(input: cancelFailedSubscriptionInput!): CancelFailedSubscriptionPayload!

  """Check Deno Hook"""
  checkDenoHook(input: sendDenoHookInput!): Boolean

  """Create new app"""
  createApp(input: CreateAppInput!): CreateAppPayload!

  """Create stripe checkout session"""
  createCheckoutSession(input: CreateCheckoutSessionInput!): CreateCheckoutSessionPayload!

  """Invite a collaborator to the target app."""
  createCollaboratorInvitation(input: CreateCollaboratorInvitationInput!): CreateCollaboratorInvitationPayload!

  """Create domain for target app"""
  createDomain(input: CreateDomainInput!): CreateDomainPayload!

  """Delete collaborator of target app."""
  deleteCollaborator(input: DeleteCollaboratorInput!): DeleteCollaboratorPayload!

  """Delete collaborator invitation of target app."""
  deleteCollaboratorInvitation(input: DeleteCollaboratorInvitationInput!): DeleteCollaboratorInvitationPayload!

  """Delete domain of target app"""
  deleteDomain(input: DeleteDomainInput!): DeleteDomainPayload!

  """Generate a token for visiting app secrets"""
  generateAppSecretVisitToken(input: GenerateAppSecretVisitTokenInput!): GenerateAppSecretVisitTokenPayloadPayload!

  """Generate Stripe customer portal session"""
  generateStripeCustomerPortalSession(input: GenerateStripeCustomerPortalSessionInput!): GenerateStripeCustomerPortalSessionPayload!

  """Generate a token for tester"""
  generateTesterToken(input: GenerateTestTokenInput!): GenerateTestTokenPayload!

  """Preview update subscription"""
  previewUpdateSubscription(input: PreviewUpdateSubscriptionInput!): PreviewUpdateSubscriptionPayload!

  """Reconcile the completed checkout session"""
  reconcileCheckoutSession(input: reconcileCheckoutSession!): reconcileCheckoutSessionPayload!

  """Updates the current user's custom attribute with 'survey' key"""
  saveOnboardingSurvey(input: SaveOnboardingSurveyInput!): Boolean

  """Send test STMP configuration email"""
  sendTestSMTPConfigurationEmail(input: sendTestSMTPConfigurationEmailInput!): Boolean

  """Set app subscription cancellation status"""
  setSubscriptionCancelledStatus(input: SetSubscriptionCancelledStatusInput!): SetSubscriptionCancelledStatusPayload!

  """Skip the tutorial of the app"""
  skipAppTutorial(input: SkipAppTutorialInput!): SkipAppTutorialPayload!

  """Skip a progress of the tutorial of the app"""
  skipAppTutorialProgress(input: SkipAppTutorialProgressInput!): SkipAppTutorialProgressPayload!

  """Update app"""
  updateApp(input: UpdateAppInput!): UpdateAppPayload!

  """Update subscription"""
  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload!

  """Request verification of a domain of target app"""
  verifyDomain(input: VerifyDomainInput!): VerifyDomainPayload!
}

"""An object with an ID"""
interface Node {
  """The id of the object"""
  id: ID!
}

""""""
input OAuthClientSecretsCleanupDataInput {
  """"""
  keepClientIDs: [String!]!
}

""""""
input OAuthClientSecretsGenerateDataInput {
  """"""
  clientID: String!
}

""""""
input OAuthClientSecretsUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  cleanupData: OAuthClientSecretsCleanupDataInput

  """"""
  generateData: OAuthClientSecretsGenerateDataInput
}

"""OAuth client secret"""
type OAuthSSOProviderClientSecret {
  """"""
  alias: String!

  """"""
  clientSecret: String
}

""""""
input OAuthSSOProviderClientSecretInput {
  """"""
  newAlias: String!

  """"""
  newClientSecret: String

  """"""
  originalAlias: String
}

""""""
input OAuthSSOProviderClientSecretsUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  data: [OAuthSSOProviderClientSecretInput!]
}

""""""
enum Periodical {
  """"""
  MONTHLY

  """"""
  WEEKLY
}

""""""
input PreviewUpdateSubscriptionInput {
  """App ID."""
  appID: ID!

  """Plan name."""
  planName: String!
}

""""""
type PreviewUpdateSubscriptionPayload {
  """"""
  amountDue: Int!

  """"""
  currency: String!
}

""""""
type Query {
  """Active users chart dataset"""
  activeUserChart(
    """Target app ID."""
    appID: ID!

    """"""
    periodical: Periodical!

    """"""
    rangeFrom: Date!

    """"""
    rangeTo: Date!
  ): Chart

  """The list of apps accessible to the current viewer"""
  appList: [AppListItem!]

  """Check whether the viewer can accept the collaboration invitation"""
  checkCollaboratorInvitation(code: String!): CheckCollaboratorInvitationPayload

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """Signup by methods dataset"""
  signupByMethodsChart(
    """Target app ID."""
    appID: ID!

    """"""
    rangeFrom: Date!

    """"""
    rangeTo: Date!
  ): Chart

  """Signup conversion rate dashboard data"""
  signupConversionRate(
    """Target app ID."""
    appID: ID!

    """"""
    rangeFrom: Date!

    """"""
    rangeTo: Date!
  ): SignupConversionRate

  """Available subscription plans"""
  subscriptionPlans: [SubscriptionPlan!]!

  """Total users count chart dataset"""
  totalUserCountChart(
    """Target app ID."""
    appID: ID!

    """"""
    rangeFrom: Date!

    """"""
    rangeTo: Date!
  ): Chart

  """The current viewer"""
  viewer: Viewer
}

"""SAML Identity Provider signing certificate"""
type SAMLIdpSigningCertificate {
  """"""
  certificateFingerprint: String!

  """"""
  certificatePEM: String!

  """"""
  keyID: String!
}

"""SAML Identity Provider signing secrets"""
type SAMLIdpSigningSecrets {
  """"""
  certificates: [SAMLIdpSigningCertificate!]!
}

""""""
input SAMLIdpSigningSecretsDeleteDataInput {
  """"""
  keyIDs: [String!]!
}

""""""
input SAMLIdpSigningSecretsUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  deleteData: SAMLIdpSigningSecretsDeleteDataInput
}

"""SAML Service Provider signing secrets"""
type SAMLSpSigningSecrets {
  """"""
  certificates: [samlSpSigningCertificate!]!

  """"""
  clientID: String!
}

""""""
input SAMLSpSigningSecretsSetDataInput {
  """"""
  items: [SAMLSpSigningSecretsSetDataInputItem!]!
}

""""""
input SAMLSpSigningSecretsSetDataInputItem {
  """"""
  certificates: [String!]!

  """"""
  clientID: String!
}

""""""
input SAMLSpSigningSecretsUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  setData: SAMLSpSigningSecretsSetDataInput
}

"""Custom SMS Provider configs"""
type SMSProviderCustomSMSProviderSecrets {
  """"""
  timeout: Int

  """"""
  url: String!
}

"""SMS Provider secrets"""
type SMSProviderSecrets {
  """"""
  customSMSProviderCredentials: SMSProviderCustomSMSProviderSecrets

  """"""
  twilioCredentials: SMSProviderTwilioCredentials
}

""""""
input SMSProviderSecretsSetDataInput {
  """"""
  customSMSProviderCredentials: CustomSmsProviderSecretsInput

  """"""
  twilioCredentials: SMSProviderTwilioCredentialsInput
}

""""""
input SMSProviderSecretsUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  setData: SMSProviderSecretsSetDataInput
}

"""Twilio credentials"""
type SMSProviderTwilioCredentials {
  """"""
  accountSID: String!

  """"""
  authToken: String

  """"""
  messagingServiceSID: String!
}

""""""
input SMSProviderTwilioCredentialsInput {
  """"""
  accountSID: String!

  """"""
  authToken: String

  """"""
  messagingServiceSID: String!
}

"""SMTP secret"""
type SMTPSecret {
  """"""
  host: String!

  """"""
  password: String

  """"""
  port: Int!

  """"""
  username: String!
}

""""""
input SMTPSecretInput {
  """"""
  host: String!

  """"""
  password: String

  """"""
  port: Int!

  """"""
  username: String!
}

""""""
input SaveOnboardingSurveyInput {
  """Onboarding survey result JSON."""
  surveyJSON: String!
}

"""The content of authgear.secrets.yaml"""
type SecretConfig {
  """"""
  adminAPISecrets: [AdminAPISecret!]

  """"""
  botProtectionProviderSecret: BotProtectionProviderSecret

  """"""
  oauthClientSecrets: [oauthClientSecretItem!]

  """"""
  oauthSSOProviderClientSecrets: [OAuthSSOProviderClientSecret!]

  """"""
  samlIdpSigningSecrets: SAMLIdpSigningSecrets

  """"""
  samlSpSigningSecrets: [SAMLSpSigningSecrets!]

  """"""
  smsProviderSecrets: SMSProviderSecrets

  """"""
  smtpSecret: SMTPSecret

  """"""
  webhookSecret: WebhookSecret
}

""""""
input SecretConfigUpdateInstructionsInput {
  """"""
  adminAPIAuthKey: AdminAPIAuthKeyUpdateInstructionInput

  """"""
  botProtectionProviderSecret: BotProtectionProviderSecretUpdateInstructionsInput

  """"""
  oauthClientSecrets: OAuthClientSecretsUpdateInstructionsInput

  """"""
  oauthSSOProviderClientSecrets: OAuthSSOProviderClientSecretsUpdateInstructionsInput

  """"""
  samlIdpSigningSecrets: SAMLIdpSigningSecretsUpdateInstructionsInput

  """"""
  samlSpSigningSecrets: SAMLSpSigningSecretsUpdateInstructionsInput

  """"""
  smsProviderSecrets: SMSProviderSecretsUpdateInstructionsInput

  """"""
  smtpSecret: SmtpSecretUpdateInstructionsInput
}

""""""
input SetSubscriptionCancelledStatusInput {
  """Target app ID."""
  appID: ID!

  """Target app subscription cancellation status."""
  cancelled: Boolean!
}

""""""
type SetSubscriptionCancelledStatusPayload {
  """"""
  app: App!
}

"""Signup conversion rate dashboard data"""
type SignupConversionRate {
  """"""
  conversionRate: Float!

  """"""
  totalSignup: Int!

  """"""
  totalSignupUniquePageView: Int!
}

""""""
input SkipAppTutorialInput {
  """ID of the app."""
  id: String!
}

""""""
type SkipAppTutorialPayload {
  """"""
  app: App!
}

""""""
input SkipAppTutorialProgressInput {
  """ID of the app."""
  id: String!

  """The progress to skip."""
  progress: String!
}

""""""
type SkipAppTutorialProgressPayload {
  """"""
  app: App!
}

""""""
input SmtpSecretUpdateInstructionsInput {
  """"""
  action: String!

  """"""
  data: SMTPSecretInput
}

"""The `StripeError` scalar type represents Stripe error"""
scalar StripeError

""""""
type Subscription {
  """"""
  cancelledAt: DateTime

  """"""
  createdAt: DateTime!

  """"""
  endedAt: DateTime

  """"""
  id: String!

  """"""
  updatedAt: DateTime!
}

""""""
type SubscriptionItemPrice {
  """"""
  currency: String!

  """"""
  freeQuantity: Int

  """"""
  smsRegion: UsageSMSRegion!

  """"""
  transformQuantityDivideBy: Int

  """"""
  transformQuantityRound: TransformQuantityRound!

  """"""
  type: SubscriptionItemPriceType!

  """"""
  unitAmount: Int!

  """"""
  usageType: UsageType!

  """"""
  whatsappRegion: UsageWhatsappRegion!
}

""""""
enum SubscriptionItemPriceType {
  """"""
  FIXED

  """"""
  USAGE
}

""""""
type SubscriptionPlan {
  """"""
  name: String!

  """"""
  prices: [SubscriptionItemPrice!]!
}

""""""
type SubscriptionUsage {
  """"""
  items: [SubscriptionUsageItem!]!

  """"""
  nextBillingDate: DateTime!
}

""""""
type SubscriptionUsageItem {
  """"""
  currency: String

  """"""
  freeQuantity: Int

  """"""
  quantity: Int!

  """"""
  smsRegion: UsageSMSRegion!

  """"""
  totalAmount: Int

  """"""
  transformQuantityDivideBy: Int

  """"""
  transformQuantityRound: TransformQuantityRound!

  """"""
  type: SubscriptionItemPriceType!

  """"""
  unitAmount: Int

  """"""
  usageType: UsageType!

  """"""
  whatsappRegion: UsageWhatsappRegion!
}

""""""
enum TransformQuantityRound {
  """"""
  DOWN

  """"""
  NONE

  """"""
  UP
}

"""Tutorial status of an app"""
type TutorialStatus {
  """"""
  appID: String!

  """"""
  data: TutorialStatusData!
}

"""The `TutorialStatusData` scalar type represents tutorial status data"""
scalar TutorialStatusData

""""""
input UpdateAppInput {
  """authgear.yaml in JSON."""
  appConfig: AppConfig

  """
  The checksum of appConfig. If provided, it will be used to detect conflict.
  """
  appConfigChecksum: String

  """App ID to update."""
  appID: ID!

  """update secret config instructions."""
  secretConfigUpdateInstructions: SecretConfigUpdateInstructionsInput

  """
  The checksum of secretConfig. If provided, it will be used to detect conflict.
  """
  secretConfigUpdateInstructionsChecksum: String

  """Resource file updates."""
  updates: [AppResourceUpdate!]
}

""""""
type UpdateAppPayload {
  """"""
  app: App!
}

""""""
input UpdateSubscriptionInput {
  """App ID."""
  appID: ID!

  """Plan name."""
  planName: String!
}

""""""
type UpdateSubscriptionPayload {
  """"""
  app: App!
}

""""""
type Usage {
  """"""
  items: [UsageItem!]!
}

""""""
type UsageItem {
  """"""
  quantity: Int!

  """"""
  smsRegion: UsageSMSRegion!

  """"""
  usageType: UsageType!

  """"""
  whatsappRegion: UsageWhatsappRegion!
}

""""""
enum UsageSMSRegion {
  """"""
  NONE

  """"""
  NORTH_AMERICA

  """"""
  OTHER_REGIONS
}

""""""
enum UsageType {
  """"""
  MAU

  """"""
  NONE

  """"""
  SMS

  """"""
  WHATSAPP
}

""""""
enum UsageWhatsappRegion {
  """"""
  NONE

  """"""
  NORTH_AMERICA

  """"""
  OTHER_REGIONS
}

"""Portal User"""
type User implements Node {
  """"""
  email: String

  """The ID of an object"""
  id: ID!
}

""""""
input VerifyDomainInput {
  """Target app ID."""
  appID: ID!

  """Domain ID."""
  domainID: String!
}

""""""
type VerifyDomainPayload {
  """"""
  app: App!

  """"""
  domain: Domain!
}

"""The viewer"""
type Viewer implements Node {
  """"""
  email: String

  """"""
  formattedName: String

  """"""
  geoIPCountryCode: String

  """The ID of an object"""
  id: ID!

  """"""
  isOnboardingSurveyCompleted: Boolean

  """"""
  projectOwnerCount: Int!

  """"""
  projectQuota: Int
}

"""Webhook secret"""
type WebhookSecret {
  """"""
  secret: String
}

""""""
input cancelFailedSubscriptionInput {
  """Target app ID."""
  appID: ID!
}

"""OAuth client secret item"""
type oauthClientSecretItem {
  """"""
  clientID: String!

  """"""
  keys: [oauthClientSecretKey!]
}

"""OAuth client secret key"""
type oauthClientSecretKey {
  """"""
  createdAt: DateTime

  """"""
  key: String!

  """"""
  keyID: String!
}

""""""
input reconcileCheckoutSession {
  """Target app ID."""
  appID: ID!

  """Checkout session ID."""
  checkoutSessionID: String!
}

""""""
type reconcileCheckoutSessionPayload {
  """"""
  app: App!
}

"""SAML Identity Provider signing certificate"""
type samlSpSigningCertificate {
  """"""
  certificateFingerprint: String!

  """"""
  certificatePEM: String!
}

""""""
input sendDenoHookInput {
  """App ID."""
  appID: ID!

  """The content of the hook."""
  content: String!
}

""""""
input sendTestSMTPConfigurationEmailInput {
  """App ID to test."""
  appID: ID!

  """SMTP Host."""
  smtpHost: String!

  """SMTP Password."""
  smtpPassword: String!

  """SMTP Port."""
  smtpPort: Int!

  """SMTP Username."""
  smtpUsername: String!

  """The recipient email address."""
  to: String!
}
